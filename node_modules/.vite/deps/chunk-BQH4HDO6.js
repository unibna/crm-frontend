import {
  useMediaQuery
} from "./chunk-4T6ZWAOH.js";
import {
  MobileWrapper_default
} from "./chunk-IYQK47IL.js";
import {
  DateRangePickerInput_default,
  DateRangePickerView
} from "./chunk-V3N6CN5L.js";
import {
  WrapperVariantContext,
  executeInTheNextEventLoopTick,
  parseRangeInputValue,
  useDateRangeValidation,
  useDefaultDates,
  usePickerState,
  useUtils
} from "./chunk-5WRRARR4.js";
import {
  Grow_default
} from "./chunk-BGTGBJZE.js";
import {
  Popper_default
} from "./chunk-2OA7OZ7C.js";
import {
  Paper_default
} from "./chunk-SZGUYREO.js";
import {
  init_utils
} from "./chunk-TML3UZQD.js";
import {
  ownerDocument_default
} from "./chunk-JJYLZDEF.js";
import {
  useEventCallback_default
} from "./chunk-UD3MRUBZ.js";
import {
  useForkRef_default
} from "./chunk-ZRKMYW3M.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-OLZETHCB.js";
import {
  Unstable_TrapFocus_default,
  init_Unstable_TrapFocus
} from "./chunk-3U3DCDMU.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-LCB5PCMX.js";
import {
  _extends,
  init_extends
} from "./chunk-S4J2UMZF.js";
import {
  require_jsx_runtime
} from "./chunk-LDDDBTIY.js";
import {
  require_prop_types
} from "./chunk-P6ODHCVW.js";
import {
  require_react
} from "./chunk-LBQWZZ6Z.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@mui/lab/DateRangePicker/DateRangePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var import_prop_types = __toESM(require_prop_types());
var React4 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/wrappers/ResponsiveWrapper.js
init_extends();
init_objectWithoutPropertiesLoose();
var React3 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/wrappers/DesktopTooltipWrapper.js
init_extends();
var React2 = __toESM(require_react());
init_utils();

// node_modules/@mui/lab/internal/pickers/PickersPopper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());

// node_modules/@mui/material/Unstable_TrapFocus/index.js
init_Unstable_TrapFocus();

// node_modules/@mui/lab/internal/pickers/PickersPopper.js
init_utils();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["onClick", "onTouchStart"];
var PickersPopperRoot = styled_default(Popper_default, {
  skipSx: true
})(({
  theme
}) => ({
  zIndex: theme.zIndex.modal
}));
var PickersPopperPaper = styled_default(Paper_default, {
  skipSx: true
})(({
  ownerState
}) => _extends({
  transformOrigin: "top center",
  outline: 0
}, ownerState.placement === "top" && {
  transformOrigin: "bottom center"
}));
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function useClickAwayListener(active, onClickAway) {
  const movedRef = React.useRef(false);
  const syntheticEventRef = React.useRef(false);
  const nodeRef = React.useRef(null);
  const activatedRef = React.useRef(false);
  React.useEffect(() => {
    if (!active) {
      return void 0;
    }
    function armClickAwayListener() {
      activatedRef.current = true;
    }
    document.addEventListener("mousedown", armClickAwayListener, true);
    document.addEventListener("touchstart", armClickAwayListener, true);
    return () => {
      document.removeEventListener("mousedown", armClickAwayListener, true);
      document.removeEventListener("touchstart", armClickAwayListener, true);
      activatedRef.current = false;
    };
  }, [active]);
  const handleClickAway = useEventCallback_default((event) => {
    if (!activatedRef.current) {
      return;
    }
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument_default(nodeRef.current);
    if (!nodeRef.current || // is a TouchEvent?
    "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && !insideReactTree) {
      onClickAway(event);
    }
  });
  const handleSynthetic = () => {
    syntheticEventRef.current = true;
  };
  React.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener("touchstart", handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener("touchstart", handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  React.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      doc.addEventListener("click", handleClickAway);
      return () => {
        doc.removeEventListener("click", handleClickAway);
        syntheticEventRef.current = false;
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  return [nodeRef, handleSynthetic, handleSynthetic];
}
var PickersPopper = (props) => {
  const {
    anchorEl,
    children,
    containerRef = null,
    onClose,
    open,
    PopperProps,
    role,
    TransitionComponent = Grow_default,
    TrapFocusProps,
    PaperProps = {}
  } = props;
  React.useEffect(() => {
    function handleKeyDown(nativeEvent) {
      if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
        onClose();
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [onClose]);
  const lastFocusedElementRef = React.useRef(null);
  React.useEffect(() => {
    if (role === "tooltip") {
      return;
    }
    if (open) {
      lastFocusedElementRef.current = document.activeElement;
    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
      lastFocusedElementRef.current.focus();
    }
  }, [open, role]);
  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onClose);
  const paperRef = React.useRef(null);
  const handleRef = useForkRef_default(paperRef, containerRef);
  const handlePaperRef = useForkRef_default(handleRef, clickAwayRef);
  const ownerState = props;
  const {
    onClick: onPaperClickProp,
    onTouchStart: onPaperTouchStartProp
  } = PaperProps, otherPaperProps = _objectWithoutPropertiesLoose(PaperProps, _excluded);
  return (0, import_jsx_runtime.jsx)(PickersPopperRoot, _extends({
    transition: true,
    role,
    open,
    anchorEl,
    ownerState
  }, PopperProps, {
    children: ({
      TransitionProps,
      placement
    }) => (0, import_jsx_runtime.jsx)(Unstable_TrapFocus_default, _extends({
      open,
      disableAutoFocus: true,
      disableEnforceFocus: role === "tooltip",
      isEnabled: () => true
    }, TrapFocusProps, {
      children: (0, import_jsx_runtime.jsx)(TransitionComponent, _extends({}, TransitionProps, {
        children: (0, import_jsx_runtime.jsx)(PickersPopperPaper, _extends({
          tabIndex: -1,
          elevation: 8,
          ref: handlePaperRef,
          onClick: (event) => {
            onPaperClick(event);
            if (onPaperClickProp) {
              onPaperClickProp(event);
            }
          },
          onTouchStart: (event) => {
            onPaperTouchStart(event);
            if (onPaperTouchStartProp) {
              onPaperTouchStartProp(event);
            }
          },
          ownerState: _extends({}, ownerState, {
            placement
          })
        }, otherPaperProps, {
          children
        }))
      }))
    }))
  }));
};
var PickersPopper_default = PickersPopper;

// node_modules/@mui/lab/internal/pickers/wrappers/DesktopTooltipWrapper.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function DesktopTooltipWrapper(props) {
  const {
    children,
    DateInputProps,
    KeyboardDateInputComponent: KeyboardDateInputComponent2,
    onDismiss,
    open,
    PopperProps,
    TransitionComponent
  } = props;
  const inputContainerRef = React2.useRef(null);
  const popperRef = React2.useRef(null);
  const handleBlur = () => {
    executeInTheNextEventLoopTick(() => {
      var _inputContainerRef$cu, _popperRef$current;
      if ((_inputContainerRef$cu = inputContainerRef.current) != null && _inputContainerRef$cu.contains(document.activeElement) || (_popperRef$current = popperRef.current) != null && _popperRef$current.contains(document.activeElement)) {
        return;
      }
      onDismiss();
    });
  };
  const inputComponentRef = useForkRef_default(DateInputProps.ref, inputContainerRef);
  return (0, import_jsx_runtime3.jsxs)(WrapperVariantContext.Provider, {
    value: "desktop",
    children: [(0, import_jsx_runtime2.jsx)(KeyboardDateInputComponent2, _extends({}, DateInputProps, {
      ref: inputComponentRef,
      onBlur: handleBlur
    })), (0, import_jsx_runtime2.jsx)(PickersPopper_default, {
      role: "tooltip",
      open,
      containerRef: popperRef,
      anchorEl: inputContainerRef.current,
      TransitionComponent,
      PopperProps,
      onBlur: handleBlur,
      onClose: onDismiss,
      children
    })]
  });
}
var DesktopTooltipWrapper_default = DesktopTooltipWrapper;

// node_modules/@mui/lab/internal/pickers/wrappers/ResponsiveWrapper.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded2 = ["cancelText", "clearable", "clearText", "DateInputProps", "desktopModeMediaQuery", "DialogProps", "KeyboardDateInputComponent", "okText", "PopperProps", "PureDateInputComponent", "showTodayButton", "todayText", "TransitionComponent"];
function ResponsiveTooltipWrapper(props) {
  const {
    cancelText,
    clearable,
    clearText,
    DateInputProps,
    desktopModeMediaQuery = "@media (pointer: fine)",
    DialogProps,
    KeyboardDateInputComponent: KeyboardDateInputComponent2,
    okText,
    PopperProps,
    PureDateInputComponent: PureDateInputComponent2,
    showTodayButton,
    todayText,
    TransitionComponent
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const isDesktop = useMediaQuery(desktopModeMediaQuery);
  return isDesktop ? (0, import_jsx_runtime4.jsx)(DesktopTooltipWrapper_default, _extends({
    DateInputProps,
    KeyboardDateInputComponent: KeyboardDateInputComponent2,
    PopperProps,
    TransitionComponent
  }, other)) : (0, import_jsx_runtime4.jsx)(MobileWrapper_default, _extends({
    cancelText,
    clearable,
    clearText,
    DateInputProps,
    DialogProps,
    okText,
    PureDateInputComponent: PureDateInputComponent2,
    showTodayButton,
    todayText
  }, other));
}

// node_modules/@mui/lab/DateRangePicker/DateRangePicker.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var _excluded3 = ["calendars", "value", "onChange", "mask", "startText", "endText", "inputFormat", "minDate", "maxDate"];
var KeyboardDateInputComponent = DateRangePickerInput_default;
var PureDateInputComponent = DateRangePickerInput_default;
var rangePickerValueManager = {
  emptyValue: [null, null],
  parseInput: parseRangeInputValue,
  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])
};
var DateRangePicker = React4.forwardRef(function DateRangePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDateRangePicker"
  });
  const {
    calendars = 2,
    value,
    onChange,
    mask = "__/__/____",
    startText = "Start",
    endText = "End",
    inputFormat: passedInputFormat,
    minDate: minDateProp,
    maxDate: maxDateProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;
  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;
  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React4.useState("start");
  const pickerStateProps = _extends({}, other, {
    value,
    onChange
  });
  const restProps = _extends({}, other, {
    minDate,
    maxDate
  });
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(pickerStateProps, rangePickerValueManager);
  const validationError = useDateRangeValidation(props);
  const DateInputProps = _extends({}, inputProps, restProps, {
    currentlySelectingRangeEnd,
    inputFormat: passedInputFormat || utils.formats.keyboardDate,
    setCurrentlySelectingRangeEnd,
    startText,
    endText,
    mask,
    validationError,
    ref
  });
  return (0, import_jsx_runtime5.jsx)(ResponsiveTooltipWrapper, _extends({}, restProps, wrapperProps, {
    DateInputProps,
    KeyboardDateInputComponent,
    PureDateInputComponent,
    children: (0, import_jsx_runtime5.jsx)(DateRangePickerView, _extends({
      open: wrapperProps.open,
      DateInputProps,
      calendars,
      currentlySelectingRangeEnd,
      setCurrentlySelectingRangeEnd,
      startText,
      endText
    }, pickerProps, restProps))
  }));
});
true ? DateRangePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Regular expression to detect "accepted" symbols.
   * @default /\dap/gi
   */
  acceptRegex: import_prop_types.default.instanceOf(RegExp),
  /**
   * If `true`, `onChange` is fired on click even if the same date is selected.
   * @default false
   */
  allowSameDateSelection: import_prop_types.default.bool,
  /**
   * @ignore
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * The number of calendars that render on **desktop**.
   * @default 2
   */
  calendars: import_prop_types.default.oneOf([1, 2, 3]),
  /**
   * Cancel text message.
   * @default 'Cancel'
   */
  cancelText: import_prop_types.default.node,
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * className applied to the root component.
   */
  className: import_prop_types.default.string,
  /**
   * If `true`, it shows the clear action in the picker dialog.
   * @default false
   */
  clearable: import_prop_types.default.bool,
  /**
   * Clear text message.
   * @default 'Clear'
   */
  clearText: import_prop_types.default.node,
  /**
   * The components used for each slot.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: import_prop_types.default.shape({
    LeftArrowButton: import_prop_types.default.elementType,
    LeftArrowIcon: import_prop_types.default.elementType,
    OpenPickerIcon: import_prop_types.default.elementType,
    RightArrowButton: import_prop_types.default.elementType,
    RightArrowIcon: import_prop_types.default.elementType,
    SwitchViewButton: import_prop_types.default.elementType,
    SwitchViewIcon: import_prop_types.default.elementType
  }),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  componentsProps: import_prop_types.default.object,
  /**
   * Default calendar month displayed when `value={null}`.
   */
  defaultCalendarMonth: import_prop_types.default.any,
  /**
   * CSS media query when `Mobile` mode will be changed to `Desktop`.
   * @default '@media (pointer: fine)'
   * @example '@media (min-width: 720px)' or theme.breakpoints.up('sm')
   */
  desktopModeMediaQuery: import_prop_types.default.string,
  /**
   * Props applied to the [`Dialog`](/api/dialog/) element.
   */
  DialogProps: import_prop_types.default.object,
  /**
   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.
   * @default false
   */
  disableAutoMonthSwitching: import_prop_types.default.bool,
  /**
   * If `true` the popup or dialog will immediately close after submitting full date.
   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  disableCloseOnSelect: import_prop_types.default.bool,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * If `true`, todays date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: import_prop_types.default.bool,
  /**
   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
   * @default false
   */
  disableMaskedInput: import_prop_types.default.bool,
  /**
   * Do not render open picker button (renders only text field with validation).
   * @default false
   */
  disableOpenPicker: import_prop_types.default.bool,
  /**
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * Text for end input label and toolbar placeholder.
   * @default 'End'
   */
  endText: import_prop_types.default.node,
  /**
   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`
   */
  getOpenDialogAriaText: import_prop_types.default.func,
  /**
   * Get aria-label text for switching between views button.
   */
  getViewSwitchingButtonText: import_prop_types.default.func,
  /**
   * @ignore
   */
  ignoreInvalidInputs: import_prop_types.default.bool,
  /**
   * Props to pass to keyboard input adornment.
   */
  InputAdornmentProps: import_prop_types.default.object,
  /**
   * Format string.
   */
  inputFormat: import_prop_types.default.string,
  /**
   * @ignore
   */
  InputProps: import_prop_types.default.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.object
  })]),
  /**
   * @ignore
   */
  key: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * @ignore
   */
  label: import_prop_types.default.node,
  /**
   * Left arrow icon aria-label text.
   */
  leftArrowButtonText: import_prop_types.default.string,
  /**
   * If `true` renders `LoadingComponent` in calendar instead of calendar view.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: import_prop_types.default.bool,
  /**
   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
   * @default '__/__/____'
   */
  mask: import_prop_types.default.string,
  /**
   * Max selectable date. @DateIOType
   * @default defaultMaxDate
   */
  maxDate: import_prop_types.default.any,
  /**
   * Min selectable date. @DateIOType
   * @default defaultMinDate
   */
  minDate: import_prop_types.default.any,
  /**
   * Ok button text.
   * @default 'OK'
   */
  okText: import_prop_types.default.node,
  /**
   * Callback fired when date is accepted @DateIOType.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value (the selected date range) changes @DateIOType.
   */
  onChange: import_prop_types.default.func.isRequired,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
   * This can be used to render appropriate form error.
   *
   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
   * @DateIOType
   */
  onError: import_prop_types.default.func,
  /**
   * Callback firing on month change. @DateIOType
   */
  onMonthChange: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   */
  onOpen: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * Control the popup or dialog open state.
   */
  open: import_prop_types.default.bool,
  /**
   * Props to pass to keyboard adornment button.
   */
  OpenPickerButtonProps: import_prop_types.default.object,
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  /**
   * Paper props passed down to [Paper](https://mui.com/api/paper/) component.
   */
  PaperProps: import_prop_types.default.object,
  /**
   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.
   */
  PopperProps: import_prop_types.default.object,
  /**
   * Make picker read only.
   * @default false
   */
  readOnly: import_prop_types.default.bool,
  /**
   * Disable heavy animations.
   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
   */
  reduceAnimations: import_prop_types.default.bool,
  /**
   * Custom renderer for `<DateRangePicker />` days. @DateIOType
   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />
   */
  renderDay: import_prop_types.default.func,
  /**
   * The `renderInput` prop allows you to customize the rendered input.
   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),
   * that you need to forward to the range start/end inputs respectively.
   * Pay specific attention to the `ref` and `inputProps` keys.
   * @example
   * ```jsx
   * <DateRangePicker
   *  renderInput={(startProps, endProps) => (
   *   <React.Fragment>
   *     <TextField {...startProps} />
   *     <Box sx={{ mx: 2 }}> to </Box>
   *     <TextField {...endProps} />
   *   </React.Fragment>;
   *  )}
   * />
   * ````
   */
  renderInput: import_prop_types.default.func.isRequired,
  /**
   * Component displaying when passed `loading` true.
   * @default () => <span data-mui-test="loading-progress">...</span>
   */
  renderLoading: import_prop_types.default.func,
  /**
   * Custom formatter to be passed into Rifm component.
   */
  rifmFormatter: import_prop_types.default.func,
  /**
   * Right arrow icon aria-label text.
   */
  rightArrowButtonText: import_prop_types.default.string,
  /**
   * Disable specific date. @DateIOType
   */
  shouldDisableDate: import_prop_types.default.func,
  /**
   * Disable specific years dynamically.
   * Works like `shouldDisableDate` but for year selection view @DateIOType.
   */
  shouldDisableYear: import_prop_types.default.func,
  /**
   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
   * @default false
   */
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  /**
   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.
   * @default false
   */
  showTodayButton: import_prop_types.default.bool,
  /**
   * If `true`, show the toolbar even in desktop mode.
   */
  showToolbar: import_prop_types.default.bool,
  /**
   * Text for start input label and toolbar placeholder.
   * @default 'Start'
   */
  startText: import_prop_types.default.node,
  /**
   * Today text message.
   * @default 'Today'
   */
  todayText: import_prop_types.default.node,
  /**
   * Component that will replace default toolbar renderer.
   */
  ToolbarComponent: import_prop_types.default.elementType,
  /**
   * Date format, that is displaying in toolbar.
   */
  toolbarFormat: import_prop_types.default.string,
  /**
   * Mobile picker date value placeholder, displaying if `value` === `null`.
   * @default '–'
   */
  toolbarPlaceholder: import_prop_types.default.node,
  /**
   * Mobile picker title, displaying in the toolbar.
   * @default 'Select date range'
   */
  toolbarTitle: import_prop_types.default.node,
  /**
   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).
   */
  TransitionComponent: import_prop_types.default.elementType,
  /**
   * The value of the date range picker.
   */
  value: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.any, import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string])).isRequired
} : void 0;
var DateRangePicker_default = DateRangePicker;

export {
  PickersPopper_default,
  DesktopTooltipWrapper_default,
  DateRangePicker_default
};
//# sourceMappingURL=chunk-BQH4HDO6.js.map
