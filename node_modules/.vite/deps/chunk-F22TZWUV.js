import {
  DateRangePickerView
} from "./chunk-V3N6CN5L.js";
import {
  DIALOG_WIDTH,
  IsStaticVariantContext,
  WrapperVariantContext,
  parseRangeInputValue,
  useDateRangeValidation,
  useDefaultDates,
  usePickerState,
  useUtils
} from "./chunk-5WRRARR4.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-OLZETHCB.js";
import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_base
} from "./chunk-3U3DCDMU.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-LCB5PCMX.js";
import {
  _extends,
  init_extends
} from "./chunk-S4J2UMZF.js";
import {
  require_jsx_runtime
} from "./chunk-LDDDBTIY.js";
import {
  require_prop_types
} from "./chunk-P6ODHCVW.js";
import {
  require_react
} from "./chunk-LBQWZZ6Z.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@mui/lab/StaticDateRangePicker/StaticDateRangePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/lab/internal/pickers/wrappers/PickerStaticWrapper.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
init_base();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["displayStaticWrapperAs"];
function getStaticWrapperUtilityClass(slot) {
  return generateUtilityClass("MuiPickerStaticWrapper", slot);
}
var pickerStaticWrapperClasses = generateUtilityClasses("MuiPickerStaticWrapper", ["root"]);
var useUtilityClasses = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getStaticWrapperUtilityClass, classes);
};
var PickerStaticWrapperRoot = styled_default("div", {
  name: "MuiPickerStaticWrapper",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root,
  skipSx: true
})(({
  theme
}) => ({
  overflow: "hidden",
  minWidth: DIALOG_WIDTH,
  display: "flex",
  flexDirection: "column",
  backgroundColor: theme.palette.background.paper
}));
function PickerStaticWrapper(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickerStaticWrapper"
  });
  const {
    displayStaticWrapperAs
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const classes = useUtilityClasses(props);
  const isStatic = true;
  return (0, import_jsx_runtime.jsx)(IsStaticVariantContext.Provider, {
    value: isStatic,
    children: (0, import_jsx_runtime.jsx)(WrapperVariantContext.Provider, {
      value: displayStaticWrapperAs,
      children: (0, import_jsx_runtime.jsx)(PickerStaticWrapperRoot, _extends({
        className: classes.root
      }, other))
    })
  });
}
var PickerStaticWrapper_default = PickerStaticWrapper;

// node_modules/@mui/lab/StaticDateRangePicker/StaticDateRangePicker.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded2 = ["calendars", "displayStaticWrapperAs", "value", "onChange", "mask", "startText", "endText", "inputFormat", "minDate", "maxDate"];
var rangePickerValueManager = {
  emptyValue: [null, null],
  parseInput: parseRangeInputValue,
  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])
};
var StaticDateRangePicker = React2.forwardRef(function StaticDateRangePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiStaticDateRangePicker"
  });
  const {
    calendars = 2,
    displayStaticWrapperAs = "mobile",
    value,
    onChange,
    mask = "__/__/____",
    startText = "Start",
    endText = "End",
    inputFormat: passedInputFormat,
    minDate: minDateProp,
    maxDate: maxDateProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;
  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;
  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React2.useState("start");
  const pickerStateProps = _extends({}, other, {
    value,
    onChange
  });
  const restProps = _extends({}, other, {
    minDate,
    maxDate
  });
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(pickerStateProps, rangePickerValueManager);
  const validationError = useDateRangeValidation(props);
  const DateInputProps = _extends({}, inputProps, restProps, {
    currentlySelectingRangeEnd,
    inputFormat: passedInputFormat || utils.formats.keyboardDate,
    setCurrentlySelectingRangeEnd,
    startText,
    endText,
    mask,
    validationError,
    ref
  });
  return (0, import_jsx_runtime2.jsx)(PickerStaticWrapper_default, {
    displayStaticWrapperAs,
    children: (0, import_jsx_runtime2.jsx)(DateRangePickerView, _extends({
      open: wrapperProps.open,
      DateInputProps,
      calendars,
      currentlySelectingRangeEnd,
      setCurrentlySelectingRangeEnd,
      startText,
      endText
    }, pickerProps, restProps))
  });
});
true ? StaticDateRangePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Regular expression to detect "accepted" symbols.
   * @default /\dap/gi
   */
  acceptRegex: import_prop_types.default.instanceOf(RegExp),
  /**
   * If `true`, `onChange` is fired on click even if the same date is selected.
   * @default false
   */
  allowSameDateSelection: import_prop_types.default.bool,
  /**
   * @ignore
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * The number of calendars that render on **desktop**.
   * @default 2
   */
  calendars: import_prop_types.default.oneOf([1, 2, 3]),
  /**
   * className applied to the root component.
   */
  className: import_prop_types.default.string,
  /**
   * The components used for each slot.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: import_prop_types.default.shape({
    LeftArrowButton: import_prop_types.default.elementType,
    LeftArrowIcon: import_prop_types.default.elementType,
    OpenPickerIcon: import_prop_types.default.elementType,
    RightArrowButton: import_prop_types.default.elementType,
    RightArrowIcon: import_prop_types.default.elementType,
    SwitchViewButton: import_prop_types.default.elementType,
    SwitchViewIcon: import_prop_types.default.elementType
  }),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  componentsProps: import_prop_types.default.object,
  /**
   * Default calendar month displayed when `value={null}`.
   */
  defaultCalendarMonth: import_prop_types.default.any,
  /**
   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.
   * @default false
   */
  disableAutoMonthSwitching: import_prop_types.default.bool,
  /**
   * If `true` the popup or dialog will immediately close after submitting full date.
   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  disableCloseOnSelect: import_prop_types.default.bool,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * If `true`, todays date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: import_prop_types.default.bool,
  /**
   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
   * @default false
   */
  disableMaskedInput: import_prop_types.default.bool,
  /**
   * Do not render open picker button (renders only text field with validation).
   * @default false
   */
  disableOpenPicker: import_prop_types.default.bool,
  /**
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * Force static wrapper inner components to be rendered in mobile or desktop mode.
   * @default 'mobile'
   */
  displayStaticWrapperAs: import_prop_types.default.oneOf(["desktop", "mobile"]),
  /**
   * Text for end input label and toolbar placeholder.
   * @default 'End'
   */
  endText: import_prop_types.default.node,
  /**
   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`
   */
  getOpenDialogAriaText: import_prop_types.default.func,
  /**
   * Get aria-label text for switching between views button.
   */
  getViewSwitchingButtonText: import_prop_types.default.func,
  /**
   * @ignore
   */
  ignoreInvalidInputs: import_prop_types.default.bool,
  /**
   * Props to pass to keyboard input adornment.
   */
  InputAdornmentProps: import_prop_types.default.object,
  /**
   * Format string.
   */
  inputFormat: import_prop_types.default.string,
  /**
   * @ignore
   */
  InputProps: import_prop_types.default.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.object
  })]),
  /**
   * @ignore
   */
  key: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * @ignore
   */
  label: import_prop_types.default.node,
  /**
   * Left arrow icon aria-label text.
   */
  leftArrowButtonText: import_prop_types.default.string,
  /**
   * If `true` renders `LoadingComponent` in calendar instead of calendar view.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: import_prop_types.default.bool,
  /**
   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
   * @default '__/__/____'
   */
  mask: import_prop_types.default.string,
  /**
   * Max selectable date. @DateIOType
   */
  maxDate: import_prop_types.default.any,
  /**
   * Min selectable date. @DateIOType
   */
  minDate: import_prop_types.default.any,
  /**
   * Callback fired when date is accepted @DateIOType.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value (the selected date range) changes @DateIOType.
   */
  onChange: import_prop_types.default.func.isRequired,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
   * This can be used to render appropriate form error.
   *
   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
   * @DateIOType
   */
  onError: import_prop_types.default.func,
  /**
   * Callback firing on month change. @DateIOType
   */
  onMonthChange: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   */
  onOpen: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * Control the popup or dialog open state.
   */
  open: import_prop_types.default.bool,
  /**
   * Props to pass to keyboard adornment button.
   */
  OpenPickerButtonProps: import_prop_types.default.object,
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  /**
   * Make picker read only.
   * @default false
   */
  readOnly: import_prop_types.default.bool,
  /**
   * Disable heavy animations.
   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
   */
  reduceAnimations: import_prop_types.default.bool,
  /**
   * Custom renderer for `<DateRangePicker />` days. @DateIOType
   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />
   */
  renderDay: import_prop_types.default.func,
  /**
   * The `renderInput` prop allows you to customize the rendered input.
   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),
   * that you need to forward to the range start/end inputs respectively.
   * Pay specific attention to the `ref` and `inputProps` keys.
   * @example
   * ```jsx
   * <DateRangePicker
   *  renderInput={(startProps, endProps) => (
   *   <React.Fragment>
   *     <TextField {...startProps} />
   *     <Box sx={{ mx: 2 }}> to </Box>
   *     <TextField {...endProps} />
   *   </React.Fragment>;
   *  )}
   * />
   * ````
   */
  renderInput: import_prop_types.default.func.isRequired,
  /**
   * Component displaying when passed `loading` true.
   * @default () => <span data-mui-test="loading-progress">...</span>
   */
  renderLoading: import_prop_types.default.func,
  /**
   * Custom formatter to be passed into Rifm component.
   */
  rifmFormatter: import_prop_types.default.func,
  /**
   * Right arrow icon aria-label text.
   */
  rightArrowButtonText: import_prop_types.default.string,
  /**
   * Disable specific date. @DateIOType
   */
  shouldDisableDate: import_prop_types.default.func,
  /**
   * Disable specific years dynamically.
   * Works like `shouldDisableDate` but for year selection view @DateIOType.
   */
  shouldDisableYear: import_prop_types.default.func,
  /**
   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
   * @default false
   */
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  /**
   * If `true`, show the toolbar even in desktop mode.
   */
  showToolbar: import_prop_types.default.bool,
  /**
   * Text for start input label and toolbar placeholder.
   * @default 'Start'
   */
  startText: import_prop_types.default.node,
  /**
   * Component that will replace default toolbar renderer.
   */
  ToolbarComponent: import_prop_types.default.elementType,
  /**
   * Date format, that is displaying in toolbar.
   */
  toolbarFormat: import_prop_types.default.string,
  /**
   * Mobile picker date value placeholder, displaying if `value` === `null`.
   * @default '–'
   */
  toolbarPlaceholder: import_prop_types.default.node,
  /**
   * Mobile picker title, displaying in the toolbar.
   * @default 'Select date range'
   */
  toolbarTitle: import_prop_types.default.node,
  /**
   * The value of the date range picker.
   */
  value: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.any, import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string])).isRequired
} : void 0;
var StaticDateRangePicker_default = StaticDateRangePicker;

export {
  PickerStaticWrapper_default,
  StaticDateRangePicker_default
};
//# sourceMappingURL=chunk-F22TZWUV.js.map
