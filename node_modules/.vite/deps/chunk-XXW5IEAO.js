import {
  Tabs_default,
  tabsClasses_default
} from "./chunk-G2D7WSWP.js";
import {
  Tab_default
} from "./chunk-JCI5FQD6.js";
import {
  MobileWrapper_default
} from "./chunk-IYQK47IL.js";
import {
  Picker_default,
  PickersToolbarButton_default,
  PickersToolbarText_default,
  PickersToolbar_default,
  WrapperVariantContext,
  getDisplayDate,
  getTextFieldAriaText,
  onSpaceOrEnter,
  parsePickerInputValue,
  pick12hOr24hFormat,
  useDateTimeValidation,
  useDefaultDates,
  usePickerState,
  useUtils
} from "./chunk-5WRRARR4.js";
import {
  init_utils
} from "./chunk-TML3UZQD.js";
import {
  createSvgIcon
} from "./chunk-7V7POLXT.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-OLZETHCB.js";
import {
  generateUtilityClasses,
  init_base
} from "./chunk-3U3DCDMU.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-LCB5PCMX.js";
import {
  _extends,
  init_extends
} from "./chunk-S4J2UMZF.js";
import {
  require_jsx_runtime
} from "./chunk-LDDDBTIY.js";
import {
  require_prop_types
} from "./chunk-P6ODHCVW.js";
import {
  require_react
} from "./chunk-LBQWZZ6Z.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@mui/lab/MobileDateTimePicker/MobileDateTimePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React6 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@mui/lab/DateTimePicker/shared.js
init_extends();
init_objectWithoutPropertiesLoose();
var _excluded = ["ampm", "inputFormat", "maxDate", "maxDateTime", "maxTime", "minDate", "minDateTime", "minTime", "openTo", "orientation", "views"];
function useDateTimePickerDefaultizedProps(_ref, name) {
  let {
    ampm,
    inputFormat,
    maxDate: maxDateProp,
    maxDateTime,
    maxTime,
    minDate: minDateProp,
    minDateTime,
    minTime,
    openTo = "day",
    orientation = "portrait",
    views = ["year", "day", "hours", "minutes"]
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded);
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;
  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;
  const willUseAmPm = ampm != null ? ampm : utils.is12HourCycleInCurrentLocale();
  if (orientation !== "portrait") {
    throw new Error("We are not supporting custom orientation for DateTimePicker yet :(");
  }
  return useThemeProps({
    props: _extends({
      openTo,
      views,
      ampm: willUseAmPm,
      ampmInClock: true,
      orientation,
      showToolbar: true,
      allowSameDateSelection: true,
      minDate: minDateTime != null ? minDateTime : minDate,
      minTime: minDateTime != null ? minDateTime : minTime,
      maxDate: maxDateTime != null ? maxDateTime : maxDate,
      maxTime: maxDateTime != null ? maxDateTime : maxTime,
      disableIgnoringDatePartForTimeValidation: Boolean(minDateTime || maxDateTime),
      acceptRegex: willUseAmPm ? /[\dap]/gi : /\d/gi,
      mask: "__/__/____ __:__",
      disableMaskedInput: willUseAmPm,
      inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {
        localized: utils.formats.keyboardDateTime,
        "12h": utils.formats.keyboardDateTime12h,
        "24h": utils.formats.keyboardDateTime24h
      })
    }, other),
    name
  });
}

// node_modules/@mui/lab/DateTimePicker/DateTimePickerToolbar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React4 = __toESM(require_react());
init_base();

// node_modules/@mui/lab/DateTimePicker/DateTimePickerTabs.js
init_extends();
var React3 = __toESM(require_react());

// node_modules/@mui/lab/internal/svg-icons/Time.js
var React = __toESM(require_react());
init_utils();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var Time_default = createSvgIcon((0, import_jsx_runtime2.jsxs)(React.Fragment, {
  children: [(0, import_jsx_runtime.jsx)("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), (0, import_jsx_runtime.jsx)("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Time");

// node_modules/@mui/lab/internal/svg-icons/DateRange.js
var React2 = __toESM(require_react());
init_utils();
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var DateRange_default = createSvgIcon((0, import_jsx_runtime3.jsx)("path", {
  d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
}), "DateRange");

// node_modules/@mui/lab/DateTimePicker/DateTimePickerTabs.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var _DateRangeIcon;
var _TimeIcon;
var viewToTab = (openView) => {
  if (openView === "day" || openView === "year") {
    return "date";
  }
  return "time";
};
var tabToView = (tab) => {
  if (tab === "date") {
    return "day";
  }
  return "hours";
};
var DateTimePickerTabsRoot = styled_default(Tabs_default, {
  skipSx: true
})(({
  ownerState,
  theme
}) => _extends({
  boxShadow: `0 -1px 0 0 inset ${theme.palette.divider}`
}, ownerState.wrapperVariant === "desktop" && {
  order: 1,
  boxShadow: `0 1px 0 0 inset ${theme.palette.divider}`,
  [`& .${tabsClasses_default.indicator}`]: {
    bottom: "auto",
    top: 0
  }
}));
var DateTimePickerTabs = (props) => {
  const {
    dateRangeIcon = _DateRangeIcon || (_DateRangeIcon = (0, import_jsx_runtime4.jsx)(DateRange_default, {})),
    onChange,
    timeIcon = _TimeIcon || (_TimeIcon = (0, import_jsx_runtime4.jsx)(Time_default, {})),
    view
  } = props;
  const wrapperVariant = React3.useContext(WrapperVariantContext);
  const ownerState = _extends({}, props, {
    wrapperVariant
  });
  const handleChange = (event, value) => {
    onChange(tabToView(value));
  };
  return (0, import_jsx_runtime5.jsxs)(DateTimePickerTabsRoot, {
    ownerState,
    variant: "fullWidth",
    value: viewToTab(view),
    onChange: handleChange,
    children: [(0, import_jsx_runtime4.jsx)(Tab_default, {
      value: "date",
      "aria-label": "pick date",
      icon: (0, import_jsx_runtime4.jsx)(React3.Fragment, {
        children: dateRangeIcon
      })
    }), (0, import_jsx_runtime4.jsx)(Tab_default, {
      value: "time",
      "aria-label": "pick time",
      icon: (0, import_jsx_runtime4.jsx)(React3.Fragment, {
        children: timeIcon
      })
    })]
  });
};
var DateTimePickerTabs_default = DateTimePickerTabs;

// node_modules/@mui/lab/DateTimePicker/DateTimePickerToolbar.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var _DateTimePickerToolba;
var _DateTimePickerToolba2;
var _excluded2 = ["ampm", "date", "dateRangeIcon", "hideTabs", "isMobileKeyboardViewOpen", "onChange", "openView", "setOpenView", "timeIcon", "toggleMobileKeyboardView", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views"];
var classes = generateUtilityClasses("PrivateDateTimePickerToolbar", ["penIcon"]);
var DateTimePickerToolbarRoot = styled_default(PickersToolbar_default, {
  skipSx: true
})({
  paddingLeft: 16,
  paddingRight: 16,
  justifyContent: "space-around",
  [`& .${classes.penIcon}`]: {
    position: "absolute",
    top: 8,
    right: 8
  }
});
var DateTimePickerToolbarDateContainer = styled_default("div", {
  skipSx: true
})({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start"
});
var DateTimePickerToolbarTimeContainer = styled_default("div", {
  skipSx: true
})({
  display: "flex"
});
var DateTimePickerToolbarSeparator = styled_default(PickersToolbarText_default, {
  skipSx: true
})({
  margin: "0 4px 0 2px",
  cursor: "default"
});
var DateTimePickerToolbar = (props) => {
  const {
    ampm,
    date,
    dateRangeIcon,
    hideTabs,
    isMobileKeyboardViewOpen,
    openView,
    setOpenView,
    timeIcon,
    toggleMobileKeyboardView,
    toolbarFormat,
    toolbarPlaceholder = "––",
    toolbarTitle = "Select date & time",
    views
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const utils = useUtils();
  const wrapperVariant = React4.useContext(WrapperVariantContext);
  const showTabs = wrapperVariant === "desktop" ? true : !hideTabs && typeof window !== "undefined" && window.innerHeight > 667;
  const formatHours = (time) => ampm ? utils.format(time, "hours12h") : utils.format(time, "hours24h");
  const dateText = React4.useMemo(() => {
    if (!date) {
      return toolbarPlaceholder;
    }
    if (toolbarFormat) {
      return utils.formatByString(date, toolbarFormat);
    }
    return utils.format(date, "shortDate");
  }, [date, toolbarFormat, toolbarPlaceholder, utils]);
  return (0, import_jsx_runtime7.jsxs)(React4.Fragment, {
    children: [wrapperVariant !== "desktop" && (0, import_jsx_runtime7.jsxs)(DateTimePickerToolbarRoot, _extends({
      toolbarTitle,
      penIconClassName: classes.penIcon,
      isMobileKeyboardViewOpen,
      toggleMobileKeyboardView
    }, other, {
      isLandscape: false,
      children: [(0, import_jsx_runtime7.jsxs)(DateTimePickerToolbarDateContainer, {
        children: [views.includes("year") && (0, import_jsx_runtime6.jsx)(PickersToolbarButton_default, {
          tabIndex: -1,
          variant: "subtitle1",
          onClick: () => setOpenView("year"),
          selected: openView === "year",
          value: date ? utils.format(date, "year") : "–"
        }), views.includes("day") && (0, import_jsx_runtime6.jsx)(PickersToolbarButton_default, {
          tabIndex: -1,
          variant: "h4",
          onClick: () => setOpenView("day"),
          selected: openView === "day",
          value: dateText
        })]
      }), (0, import_jsx_runtime7.jsxs)(DateTimePickerToolbarTimeContainer, {
        children: [views.includes("hours") && (0, import_jsx_runtime6.jsx)(PickersToolbarButton_default, {
          variant: "h3",
          onClick: () => setOpenView("hours"),
          selected: openView === "hours",
          value: date ? formatHours(date) : "--"
        }), views.includes("minutes") && (0, import_jsx_runtime7.jsxs)(React4.Fragment, {
          children: [_DateTimePickerToolba || (_DateTimePickerToolba = (0, import_jsx_runtime6.jsx)(DateTimePickerToolbarSeparator, {
            variant: "h3",
            value: ":"
          })), (0, import_jsx_runtime6.jsx)(PickersToolbarButton_default, {
            variant: "h3",
            onClick: () => setOpenView("minutes"),
            selected: openView === "minutes",
            value: date ? utils.format(date, "minutes") : "--"
          })]
        }), views.includes("seconds") && (0, import_jsx_runtime7.jsxs)(React4.Fragment, {
          children: [_DateTimePickerToolba2 || (_DateTimePickerToolba2 = (0, import_jsx_runtime6.jsx)(DateTimePickerToolbarSeparator, {
            variant: "h3",
            value: ":"
          })), (0, import_jsx_runtime6.jsx)(PickersToolbarButton_default, {
            variant: "h3",
            onClick: () => setOpenView("seconds"),
            selected: openView === "seconds",
            value: date ? utils.format(date, "seconds") : "--"
          })]
        })]
      })]
    })), showTabs && (0, import_jsx_runtime6.jsx)(DateTimePickerTabs_default, {
      dateRangeIcon,
      timeIcon,
      view: openView,
      onChange: setOpenView
    })]
  });
};
var DateTimePickerToolbar_default = DateTimePickerToolbar;

// node_modules/@mui/lab/internal/pickers/PureDateInput.js
init_extends();
var React5 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var PureDateInput = React5.forwardRef(function PureDateInput2(props, ref) {
  const {
    disabled,
    getOpenDialogAriaText = getTextFieldAriaText,
    inputFormat,
    InputProps,
    inputRef,
    label,
    openPicker: onOpen,
    rawValue,
    renderInput,
    TextFieldProps = {},
    validationError
  } = props;
  const utils = useUtils();
  const PureDateInputProps = React5.useMemo(() => _extends({}, InputProps, {
    readOnly: true
  }), [InputProps]);
  const inputValue = getDisplayDate(utils, rawValue, inputFormat);
  return renderInput(_extends({
    label,
    disabled,
    ref,
    inputRef,
    error: validationError,
    InputProps: PureDateInputProps,
    inputProps: {
      disabled,
      readOnly: true,
      "aria-readonly": true,
      "aria-label": getOpenDialogAriaText(rawValue, utils),
      value: inputValue,
      onClick: onOpen,
      onKeyDown: onSpaceOrEnter(onOpen)
    }
  }, TextFieldProps));
});
PureDateInput.propTypes = {
  getOpenDialogAriaText: import_prop_types.default.func,
  renderInput: import_prop_types.default.func.isRequired
};

// node_modules/@mui/lab/MobileDateTimePicker/MobileDateTimePicker.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var _excluded3 = ["ToolbarComponent", "value", "onChange"];
var valueManager = {
  emptyValue: null,
  parseInput: parsePickerInputValue,
  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)
};
var MobileDateTimePicker = React6.forwardRef(function MobileDateTimePicker2(inProps, ref) {
  const props = useDateTimePickerDefaultizedProps(inProps, "MuiMobileDateTimePicker");
  const validationError = useDateTimeValidation(props) !== null;
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(props, valueManager);
  const {
    ToolbarComponent = DateTimePickerToolbar_default
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const DateInputProps = _extends({}, inputProps, other, {
    ref,
    validationError
  });
  return (0, import_jsx_runtime8.jsx)(MobileWrapper_default, _extends({}, other, wrapperProps, {
    DateInputProps,
    PureDateInputComponent: PureDateInput,
    children: (0, import_jsx_runtime8.jsx)(Picker_default, _extends({}, pickerProps, {
      autoFocus: true,
      toolbarTitle: props.label || props.toolbarTitle,
      ToolbarComponent,
      DateInputProps
    }, other))
  }));
});
true ? MobileDateTimePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Regular expression to detect "accepted" symbols.
   * @default /\dap/gi
   */
  acceptRegex: import_prop_types2.default.instanceOf(RegExp),
  /**
   * If `true`, `onChange` is fired on click even if the same date is selected.
   * @default false
   */
  allowSameDateSelection: import_prop_types2.default.bool,
  /**
   * 12h/24h view for hour selection clock.
   * @default false
   */
  ampm: import_prop_types2.default.bool,
  /**
   * Display ampm controls under the clock (instead of in the toolbar).
   * @default false
   */
  ampmInClock: import_prop_types2.default.bool,
  /**
   * @ignore
   */
  autoFocus: import_prop_types2.default.bool,
  /**
   * Cancel text message.
   * @default 'Cancel'
   */
  cancelText: import_prop_types2.default.node,
  /**
   * @ignore
   */
  children: import_prop_types2.default.node,
  /**
   * className applied to the root component.
   */
  className: import_prop_types2.default.string,
  /**
   * If `true`, it shows the clear action in the picker dialog.
   * @default false
   */
  clearable: import_prop_types2.default.bool,
  /**
   * Clear text message.
   * @default 'Clear'
   */
  clearText: import_prop_types2.default.node,
  /**
   * The components used for each slot.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: import_prop_types2.default.shape({
    LeftArrowButton: import_prop_types2.default.elementType,
    LeftArrowIcon: import_prop_types2.default.elementType,
    OpenPickerIcon: import_prop_types2.default.elementType,
    RightArrowButton: import_prop_types2.default.elementType,
    RightArrowIcon: import_prop_types2.default.elementType,
    SwitchViewButton: import_prop_types2.default.elementType,
    SwitchViewIcon: import_prop_types2.default.elementType
  }),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  componentsProps: import_prop_types2.default.object,
  /**
   * Date tab icon.
   */
  dateRangeIcon: import_prop_types2.default.node,
  /**
   * Default calendar month displayed when `value={null}`.
   */
  defaultCalendarMonth: import_prop_types2.default.any,
  /**
   * Props applied to the [`Dialog`](/api/dialog/) element.
   */
  DialogProps: import_prop_types2.default.object,
  /**
   * If `true` the popup or dialog will immediately close after submitting full date.
   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  disableCloseOnSelect: import_prop_types2.default.bool,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types2.default.bool,
  /**
   * @default false
   */
  disableFuture: import_prop_types2.default.bool,
  /**
   * If `true`, todays date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: import_prop_types2.default.bool,
  /**
   * Do not ignore date part when validating min/max time.
   * @default false
   */
  disableIgnoringDatePartForTimeValidation: import_prop_types2.default.bool,
  /**
   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
   * @default false
   */
  disableMaskedInput: import_prop_types2.default.bool,
  /**
   * Do not render open picker button (renders only text field with validation).
   * @default false
   */
  disableOpenPicker: import_prop_types2.default.bool,
  /**
   * @default false
   */
  disablePast: import_prop_types2.default.bool,
  /**
   * Accessible text that helps user to understand which time and view is selected.
   * @default <TDate extends any>(
   *   view: ClockView,
   *   time: TDate | null,
   *   adapter: MuiPickersAdapter<TDate>,
   * ) =>
   *   `Select ${view}. ${
   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
   *   }`
   */
  getClockLabelText: import_prop_types2.default.func,
  /**
   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`
   */
  getOpenDialogAriaText: import_prop_types2.default.func,
  /**
   * Get aria-label text for switching between views button.
   */
  getViewSwitchingButtonText: import_prop_types2.default.func,
  /**
   * To show tabs.
   */
  hideTabs: import_prop_types2.default.bool,
  /**
   * @ignore
   */
  ignoreInvalidInputs: import_prop_types2.default.bool,
  /**
   * Props to pass to keyboard input adornment.
   */
  InputAdornmentProps: import_prop_types2.default.object,
  /**
   * Format string.
   */
  inputFormat: import_prop_types2.default.string,
  /**
   * @ignore
   */
  InputProps: import_prop_types2.default.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.shape({
    current: import_prop_types2.default.object
  })]),
  /**
   * @ignore
   */
  key: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  /**
   * @ignore
   */
  label: import_prop_types2.default.node,
  /**
   * Left arrow icon aria-label text.
   */
  leftArrowButtonText: import_prop_types2.default.string,
  /**
   * If `true` renders `LoadingComponent` in calendar instead of calendar view.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: import_prop_types2.default.bool,
  /**
   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
   */
  mask: import_prop_types2.default.string,
  /**
   * Max selectable date. @DateIOType
   */
  maxDate: import_prop_types2.default.any,
  /**
   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
   */
  maxDateTime: import_prop_types2.default.any,
  /**
   * Max time acceptable time.
   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
   */
  maxTime: import_prop_types2.default.any,
  /**
   * Min selectable date. @DateIOType
   */
  minDate: import_prop_types2.default.any,
  /**
   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
   */
  minDateTime: import_prop_types2.default.any,
  /**
   * Min time acceptable time.
   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
   */
  minTime: import_prop_types2.default.any,
  /**
   * Step over minutes.
   * @default 1
   */
  minutesStep: import_prop_types2.default.number,
  /**
   * Ok button text.
   * @default 'OK'
   */
  okText: import_prop_types2.default.node,
  /**
   * Callback fired when date is accepted @DateIOType.
   */
  onAccept: import_prop_types2.default.func,
  /**
   * Callback fired when the value (the selected date) changes @DateIOType.
   */
  onChange: import_prop_types2.default.func.isRequired,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   */
  onClose: import_prop_types2.default.func,
  /**
   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
   * This can be used to render appropriate form error.
   *
   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
   * @DateIOType
   */
  onError: import_prop_types2.default.func,
  /**
   * Callback firing on month change. @DateIOType
   */
  onMonthChange: import_prop_types2.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   */
  onOpen: import_prop_types2.default.func,
  /**
   * Callback fired on view change.
   */
  onViewChange: import_prop_types2.default.func,
  /**
   * Callback firing on year change @DateIOType.
   */
  onYearChange: import_prop_types2.default.func,
  /**
   * Control the popup or dialog open state.
   */
  open: import_prop_types2.default.bool,
  /**
   * Props to pass to keyboard adornment button.
   */
  OpenPickerButtonProps: import_prop_types2.default.object,
  /**
   * First view to show.
   */
  openTo: import_prop_types2.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types2.default.oneOf(["landscape", "portrait"]),
  /**
   * Make picker read only.
   * @default false
   */
  readOnly: import_prop_types2.default.bool,
  /**
   * Disable heavy animations.
   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
   */
  reduceAnimations: import_prop_types2.default.bool,
  /**
   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.
   */
  renderDay: import_prop_types2.default.func,
  /**
   * The `renderInput` prop allows you to customize the rendered input.
   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.
   * Pay specific attention to the `ref` and `inputProps` keys.
   * @example ```jsx
   * renderInput={props => <TextField {...props} />}
   * ````
   */
  renderInput: import_prop_types2.default.func.isRequired,
  /**
   * Component displaying when passed `loading` true.
   * @default () => <span data-mui-test="loading-progress">...</span>
   */
  renderLoading: import_prop_types2.default.func,
  /**
   * Custom formatter to be passed into Rifm component.
   */
  rifmFormatter: import_prop_types2.default.func,
  /**
   * Right arrow icon aria-label text.
   */
  rightArrowButtonText: import_prop_types2.default.string,
  /**
   * Disable specific date. @DateIOType
   */
  shouldDisableDate: import_prop_types2.default.func,
  /**
   * Dynamically check if time is disabled or not.
   * If returns `false` appropriate time point will ot be acceptable.
   */
  shouldDisableTime: import_prop_types2.default.func,
  /**
   * Disable specific years dynamically.
   * Works like `shouldDisableDate` but for year selection view @DateIOType.
   */
  shouldDisableYear: import_prop_types2.default.func,
  /**
   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
   * @default false
   */
  showDaysOutsideCurrentMonth: import_prop_types2.default.bool,
  /**
   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.
   * @default false
   */
  showTodayButton: import_prop_types2.default.bool,
  /**
   * If `true`, show the toolbar even in desktop mode.
   */
  showToolbar: import_prop_types2.default.bool,
  /**
   * Time tab icon.
   */
  timeIcon: import_prop_types2.default.node,
  /**
   * Today text message.
   * @default 'Today'
   */
  todayText: import_prop_types2.default.node,
  /**
   * Component that will replace default toolbar renderer.
   * @default DateTimePickerToolbar
   */
  ToolbarComponent: import_prop_types2.default.elementType,
  /**
   * Date format, that is displaying in toolbar.
   */
  toolbarFormat: import_prop_types2.default.string,
  /**
   * Mobile picker date value placeholder, displaying if `value` === `null`.
   * @default '–'
   */
  toolbarPlaceholder: import_prop_types2.default.node,
  /**
   * Mobile picker title, displaying in the toolbar.
   * @default 'Select date & time'
   */
  toolbarTitle: import_prop_types2.default.node,
  /**
   * The value of the picker.
   */
  value: import_prop_types2.default.oneOfType([import_prop_types2.default.any, import_prop_types2.default.instanceOf(Date), import_prop_types2.default.number, import_prop_types2.default.string]),
  /**
   * Array of views to show.
   */
  views: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired)
} : void 0;
var MobileDateTimePicker_default = MobileDateTimePicker;

export {
  PureDateInput,
  useDateTimePickerDefaultizedProps,
  DateTimePickerToolbar_default,
  MobileDateTimePicker_default
};
//# sourceMappingURL=chunk-XXW5IEAO.js.map
