{
  "version": 3,
  "sources": ["../../bson-objectid/objectid.js"],
  "sourcesContent": ["\nvar MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n// <https://github.com/williamkapke/bson-objectid/pull/51>\n// Attempt to fallback Buffer if _Buffer is undefined (e.g. for Node.js).\n// Worst case fallback to null and handle with null checking before using.\nvar BufferCtr = (() => { try { return _Buffer; }catch(_){ try{ return Buffer; }catch(_){ return null; } } })();\n\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\nvar isBuffer = function (obj) {\n  return !!(\n  obj != null &&\n  obj.constructor &&\n  typeof obj.constructor.isBuffer === 'function' &&\n  obj.constructor.isBuffer(obj)\n  )\n};\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Lookup tables\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\nfunction ObjectID(id) {\n  if(!(this instanceof ObjectID)) return new ObjectID(id);\n  if(id && ((id instanceof ObjectID) || id._bsontype===\"ObjectID\"))\n    return id;\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && typeof id.toHexString === 'function') {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n}\nmodule.exports = ObjectID;\nObjectID.default = ObjectID;\n\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromTime = function(time){\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8,time)+\"0000000000000000\");\n};\n\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromHexString = function(hexString) {\n  // Throw an error if it's not a valid setup\n  if (typeof hexString === 'undefined' || (hexString != null && hexString.length !== 24)) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  // Calculate lengths\n  var data = '';\n  var i = 0;\n\n  while (i < 24) {\n    data += String.fromCharCode((decodeLookup[hexString.charCodeAt(i++)] << 4) | decodeLookup[hexString.charCodeAt(i++)]);\n  }\n\n  return new ObjectID(data);\n};\n\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\nObjectID.isValid = function(id) {\n  if (id == null) return false;\n\n  if (typeof id === 'number') {\n    return true;\n  }\n\n  if (typeof id === 'string') {\n    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  }\n\n  // <https://github.com/williamkapke/bson-objectid/issues/53>\n  if (isBuffer(id)) {\n    return ObjectID.isValid(id.toString('hex'));\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  // <https://github.com/williamkapke/bson-objectid/pull/51>\n  if (typeof id.toHexString === 'function') {\n    if(\n      BufferCtr &&\n      (id.id instanceof BufferCtr || typeof id.id === 'string')\n    ) {\n      return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n    }\n  }\n\n  return false;\n};\n\nObjectID.prototype = {\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function() {\n    if (!this.id || !this.id.length) {\n      throw new Error(\n        'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n          JSON.stringify(this.id) +\n          ']'\n      );\n    }\n\n    if (this.id.length === 24) {\n      return this.id;\n    }\n\n    if (isBuffer(this.id)) {\n      return this.id.toString('hex')\n    }\n\n    var hexString = '';\n    for (var i = 0; i < this.id.length; i++) {\n      hexString += hexTable[this.id.charCodeAt(i)];\n    }\n\n    return hexString;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} otherId ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function (otherId){\n    if (otherId instanceof ObjectID) {\n      return this.toString() === otherId.toString();\n    } else if (\n      typeof otherId === 'string' &&\n      ObjectID.isValid(otherId) &&\n      otherId.length === 12 &&\n      isBuffer(this.id)\n    ) {\n      return otherId === this.id.toString('binary');\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n      return otherId.toLowerCase() === this.toHexString();\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n      return otherId === this.id;\n    } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n      return otherId.toHexString() === this.toHexString();\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function(){\n    var timestamp = new Date();\n    var time;\n    if (isBuffer(this.id)) {\n      time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n    } else {\n      time = this.id.charCodeAt(3) | (this.id.charCodeAt(2) << 8) | (this.id.charCodeAt(1) << 16) | (this.id.charCodeAt(0) << 24);\n    }\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n  },\n\n  /**\n  * Generate a 12 byte id buffer used in ObjectID's\n  *\n  * @method\n  * @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n  * @return {string} return the 12 byte id buffer string.\n  */\n  generate: function (time) {\n    if ('number' !== typeof time) {\n      time = ~~(Date.now() / 1000);\n    }\n\n    //keep it in the ring!\n    time = parseInt(time, 10) % 0xFFFFFFFF;\n\n    var inc = next();\n\n    return String.fromCharCode(\n      ((time >> 24) & 0xFF),\n      ((time >> 16) & 0xFF),\n      ((time >> 8) & 0xFF),\n      (time & 0xFF),\n      ((MACHINE_ID >> 16) & 0xFF),\n      ((MACHINE_ID >> 8) & 0xFF),\n      (MACHINE_ID & 0xFF),\n      ((pid >> 8) & 0xFF),\n      (pid & 0xFF),\n      ((inc >> 16) & 0xFF),\n      ((inc >> 8) & 0xFF),\n      (inc & 0xFF)\n    )\n  },\n};\n\nfunction next() {\n  return index = (index+1) % 0xFFFFFF;\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return (n.length===length)? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i=0,out=[];\n\n  if(str.length===24)\n    for(;i<24; out.push(parseInt(str[i]+str[i+1], 16)),i+=2);\n\n  else if(str.length===12)\n    for(;i<12; out.push(str.charCodeAt(i)),i++);\n\n  return out;\n}\n\nvar inspect = (Symbol && Symbol.for && Symbol.for('nodejs.util.inspect.custom')) || 'inspect';\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\nObjectID.prototype[inspect] = function() { return \"ObjectID(\"+this+\")\" };\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;\n"],
  "mappings": "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",
  "names": ["_", "i"]
}
