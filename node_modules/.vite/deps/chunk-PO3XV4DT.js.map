{
  "version": 3,
  "sources": ["../../react-hook-form/src/utils/isCheckBoxInput.ts", "../../react-hook-form/src/utils/isDateObject.ts", "../../react-hook-form/src/utils/isNullOrUndefined.ts", "../../react-hook-form/src/utils/isObject.ts", "../../react-hook-form/src/logic/getEventValue.ts", "../../react-hook-form/src/logic/getNodeParentName.ts", "../../react-hook-form/src/logic/isNameInFieldArray.ts", "../../react-hook-form/src/utils/compact.ts", "../../react-hook-form/src/utils/isUndefined.ts", "../../react-hook-form/src/utils/get.ts", "../../react-hook-form/src/constants.ts", "../../react-hook-form/src/utils/omit.ts", "../../react-hook-form/src/useFormContext.tsx", "../../react-hook-form/src/logic/getProxyFormState.ts", "../../react-hook-form/src/utils/isEmptyObject.ts", "../../react-hook-form/src/logic/shouldRenderFormState.ts", "../../react-hook-form/src/utils/convertToArrayPayload.ts", "../../react-hook-form/src/logic/shouldSubscribeByName.ts", "../../react-hook-form/src/useSubscribe.ts", "../../react-hook-form/src/useFormState.ts", "../../react-hook-form/src/utils/isString.ts", "../../react-hook-form/src/logic/generateWatchOutput.ts", "../../react-hook-form/src/utils/isFunction.ts", "../../react-hook-form/src/utils/objectHasFunction.ts", "../../react-hook-form/src/useWatch.ts", "../../react-hook-form/src/useController.ts", "../../react-hook-form/src/controller.tsx", "../../react-hook-form/src/logic/appendErrors.ts", "../../react-hook-form/src/utils/isKey.ts", "../../react-hook-form/src/utils/stringToPath.ts", "../../react-hook-form/src/utils/set.ts", "../../react-hook-form/src/logic/focusFieldBy.ts", "../../react-hook-form/src/logic/getFocusFieldName.ts", "../../react-hook-form/src/logic/isWatched.ts", "../../react-hook-form/src/logic/mapCurrentIds.ts", "../../react-hook-form/src/logic/generateId.ts", "../../react-hook-form/src/logic/mapId.ts", "../../react-hook-form/src/utils/append.ts", "../../react-hook-form/src/utils/cloneObject.ts", "../../react-hook-form/src/utils/fillEmptyArray.ts", "../../react-hook-form/src/utils/insert.ts", "../../react-hook-form/src/utils/move.ts", "../../react-hook-form/src/utils/omitKeys.ts", "../../react-hook-form/src/utils/prepend.ts", "../../react-hook-form/src/utils/remove.ts", "../../react-hook-form/src/utils/swap.ts", "../../react-hook-form/src/utils/update.ts", "../../react-hook-form/src/useFieldArray.ts", "../../react-hook-form/src/utils/createSubject.ts", "../../react-hook-form/src/utils/isPrimitive.ts", "../../react-hook-form/src/utils/deepEqual.ts", "../../react-hook-form/src/utils/getValidationModes.ts", "../../react-hook-form/src/utils/isBoolean.ts", "../../react-hook-form/src/utils/isFileInput.ts", "../../react-hook-form/src/utils/isHTMLElement.ts", "../../react-hook-form/src/utils/isMultipleSelect.ts", "../../react-hook-form/src/utils/isRadioInput.ts", "../../react-hook-form/src/utils/isRadioOrCheckbox.ts", "../../react-hook-form/src/utils/isWeb.ts", "../../react-hook-form/src/utils/live.ts", "../../react-hook-form/src/utils/unset.ts", "../../react-hook-form/src/logic/getDirtyFields.ts", "../../react-hook-form/src/logic/getCheckboxValue.ts", "../../react-hook-form/src/logic/getFieldValueAs.ts", "../../react-hook-form/src/logic/getRadioValue.ts", "../../react-hook-form/src/logic/getFieldValue.ts", "../../react-hook-form/src/logic/getResolverOptions.ts", "../../react-hook-form/src/utils/isRegex.ts", "../../react-hook-form/src/logic/getRuleValue.ts", "../../react-hook-form/src/logic/hasValidation.ts", "../../react-hook-form/src/logic/schemaErrorLookup.ts", "../../react-hook-form/src/logic/skipValidation.ts", "../../react-hook-form/src/logic/unsetEmptyArray.ts", "../../react-hook-form/src/utils/isMessage.ts", "../../react-hook-form/src/logic/getValidateError.ts", "../../react-hook-form/src/logic/getValueAndMessage.ts", "../../react-hook-form/src/logic/validateField.ts", "../../react-hook-form/src/logic/createFormControl.ts", "../../react-hook-form/src/useForm.ts"],
  "sourcesContent": ["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n", "export default (data: unknown) => data instanceof Date;\n", "export default (value: unknown): value is null | undefined => value == null;\n", "import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n", "import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n", "export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n", "import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n", "export default (value: any[]) => (value || []).filter(Boolean);\n", "export default (val: unknown): val is undefined => val === undefined;\n", "import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n", "import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n", "export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n", "import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n", "import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n", "import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n", "import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n", "export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n", "import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n", "import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n", "import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n", "export default (value: unknown): value is string => typeof value === 'string';\n", "import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n", "export default (value: unknown): value is Function =>\n  typeof value === 'function';\n", "import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n", "import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n", "import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      isArrayField\n        ? _shouldUnregisterField && !control._stateFlags.action\n        : _shouldUnregisterField\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n", "import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n", "import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n", "export default (value: string) => /^\\w*$/.test(value);\n", "import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n", "import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n", "import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n", "import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n", "import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n", "import React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n", "export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n", "import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n", "import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n", "import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n", "export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n", "import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n", "import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n", "import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n", "import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n", "import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n", "export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n", "export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n", "import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(\n      name,\n      fieldArrayValues.length - 1,\n      options,\n    );\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(cloneObject(value)), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(cloneObject(value)), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds<TFieldValues, TFieldArrayName, TKeyName>(\n      updatedFieldArrayValues,\n      keyName,\n    );\n    const fieldArrayValues = updateValues(_fieldIds.current);\n\n    setFields(_fieldIds.current);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      fieldArrayValues,\n      true,\n      false,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapIds<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >(convertToArrayPayload(value) as Partial<TFieldValues>[], keyName);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      fieldArrayValues,\n      true,\n      false,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n", "import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n", "import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n", "import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n", "import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n", "export default (value: unknown): value is boolean => typeof value === 'boolean';\n", "import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n", "export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n", "import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n", "import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n", "import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n", "export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n", "import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n", "import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n", "import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n", "import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n", "import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n", "type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n", "import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n", "import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n", "export default (value: unknown): value is RegExp => value instanceof RegExp;\n", "import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n", "import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n", "import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n", "export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n", "import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n", "import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n", "import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n", "import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n", "import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n", "import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n    shouldSetError = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (shouldSetError && Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return {\n      ...(isBoolean(options.disabled) ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n\n          if (\n            fieldRef === field._f.ref ||\n            (radioOrCheckbox &&\n              compact(field._f.refs).find((option) => option === fieldRef))\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: radioOrCheckbox\n              ? {\n                  ...field._f,\n                  refs: [...compact(field._f.refs).filter(live), fieldRef],\n                  ref: { type: fieldRef.type, name },\n                }\n              : {\n                  ...field._f,\n                  ref: fieldRef,\n                },\n          });\n\n          updateValidAndValue(name, false, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n", "import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],
  "mappings": "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",
  "names": ["result", "React", "subscription", "name", "value", "append", "appendAt", "prepend", "prependAt", "insert", "insertAt", "ref", "isCheckBox", "isRadioOrCheckbox"]
}
