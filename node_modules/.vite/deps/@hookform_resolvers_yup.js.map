{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestError.ts", "../../@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import { get, FieldError, ResolverOptions } from 'react-hook-form';\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      const error = get(errors, fieldPath) as FieldError | undefined;\n\n      field.ref.setCustomValidity((error && error.message) || '');\n\n      field.ref.reportValidity();\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n", "import Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e: any) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],
  "mappings": ";;;;;;;;;AAGaA,IAAAA,IAAyB,SACpCC,GACAC,IAAAA;AAEA,WAAWC,MAAaD,GAAQE,QAAQ;AACtC,QAAMC,IAAQH,GAAQE,OAAOD,EAAAA;AAE7B,QAAIE,KAASA,EAAMC,OAAO,oBAAoBD,EAAMC,KAAK;AACvD,UAAMC,IAAQC,IAAIP,GAAQE,EAAAA;AAE1BE,QAAMC,IAAIG,kBAAmBF,KAASA,EAAMG,WAAY,EAAA,GAExDL,EAAMC,IAAIK,eAAAA;IAAAA;EAAAA;AAAAA;AAZHX,ICOAY,IAAc,SACzBX,IACAC,GAAAA;AAEAA,IAAQW,6BAA6Bb,EAAuBC,IAAQC,CAAAA;AAEpE,MAAMY,IAAc,CAAA;AACpB,WAAWC,MAAQd,IAAQ;AACzB,QAAMI,IAAQG,IAAIN,EAAQE,QAAQW,EAAAA;AAElCC,QACEF,GACAC,IACAE,OAAOC,OAAOjB,GAAOc,EAAAA,GAAO,EAAET,KAAKD,KAASA,EAAMC,IAAAA,CAAAA,CAAAA;EAAAA;AAItD,SAAOQ;AAAAA;;;AClBT,IA+BaK,IACX,SAACC,IAAQC,GAAoBC,IAAAA;AAAAA,SAAAA,WAApBD,MAAAA,IAAgB,CAAA,IAAA,WAAIC,OAAAA,KAAkB,CAAA,IAAA,SACxCC,GAAQC,IAASC,GAAAA;AAAAA,QAAAA;AAAAA,aAAAA,QAAAA,QAAAA,SAAAA,GAAAA,GAAAA;AAAAA,YAAAA;AAAAA,cAAAA,KAEhBJ,EAAcG,WAAoC,QAEpDE,QAAQC,KACN,+FAAA,GAAA,QAAA,QAIiBP,GACM,WAAzBE,GAAgBM,OAAkB,iBAAiB,UAAA,EAEnDL,GACAM,OAAOC,OAAO,EAAEC,YAAAA,MAAY,GAASV,GAAe,EAAEG,SAAAA,GAAAA,CAAAA,CAAAA,CAAAA,EAAAA,KAAAA,SAJlDQ,IAAAA;AASN,mBAFAP,EAAQQ,6BAA6BC,EAAuB,CAAA,GAAIT,CAAAA,GAEzD,EACLF,QAAQS,IACRG,QAAQ,CAAA,EAAA;UAAA,CAAA;QAAA,SAAA,GAAA;AAAA,iBAAA,EAAA,CAAA;QAAA;AAAA,eAAA,KAAA,EAAA,OAAA,EAAA,KAAA,QAAA,CAAA,IAAA;MAAA,EAAA,GAAA,SAEHC,GAAAA;AACP,eAAO,EACLb,QAAQ,CAAA,GACRY,QAAQE,GAzDdC,KA2DUF,GA1DVG,KAAAA,CA2DWd,EAAQQ,6BACkB,UAAzBR,EAAQe,eA1DZF,GAAMG,SAAS,CAAA,GAAIC,OACzB,SAACC,IAAUL,GAAAA;AAKT,cAJKK,GAASL,EAAMM,IAAAA,MAClBD,GAASL,EAAMM,IAAAA,IAAS,EAAEC,SAASP,EAAMO,SAASC,MAAMR,EAAMQ,KAAAA,IAG5DP,IAA0B;AAC5B,gBAAMQ,KAAQJ,GAASL,EAAMM,IAAAA,EAAOG,OAC9BC,KAAWD,MAASA,GAAMT,EAAMQ,IAAAA;AAEtCH,YAAAA,GAASL,EAAMM,IAAAA,IAASK,aACtBX,EAAMM,MACNL,IACAI,IACAL,EAAMQ,MACNE,KACK,CAAA,EAAgBE,OAAOF,IAAsBV,EAAMO,OAAAA,IACpDP,EAAMO,OAAAA;UAAAA;AAId,iBAAOF;QAAAA,GAET,CAAA,CAAA,IAqCMlB,CAAAA,EAAAA;AAhEe,YACvBa,IACAC;MAAAA,CAAAA,CAAAA;IAAAA,SA8BA,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA;",
  "names": ["validateFieldsNatively", "errors", "options", "fieldPath", "fields", "field", "ref", "error", "get", "setCustomValidity", "message", "reportValidity", "toNestError", "shouldUseNativeValidation", "fieldErrors", "path", "set", "Object", "assign", "yupResolver", "schema", "schemaOptions", "resolverOptions", "values", "context", "options", "console", "warn", "mode", "Object", "assign", "abortEarly", "result", "shouldUseNativeValidation", "validateFieldsNatively", "errors", "e", "toNestError", "error", "validateAllFieldCriteria", "criteriaMode", "inner", "reduce", "previous", "path", "message", "type", "types", "messages", "appendErrors", "concat"]
}
