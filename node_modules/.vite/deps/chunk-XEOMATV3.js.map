{
  "version": 3,
  "sources": ["../../@devexpress/dx-grid-core/src/plugins/integrated-grouping/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/grid-core/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/sorting-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/sorting-state/helpers.ts", "../../@devexpress/dx-grid-core/src/utils/merge-sort.ts", "../../@devexpress/dx-grid-core/src/utils/hierarchical-data.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-sorting/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/filtering-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/filtering-state/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/filtering-state/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-filtering/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/grouping-state/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/grouping-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/grouping-state/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-grouping/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-grouping/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/custom-grouping/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/custom-grouping/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/grouping-panel/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/paging-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-paging/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-paging/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/paging-panel/helpers.ts", "../../@devexpress/dx-grid-core/src/utils/common-reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/selection-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-selection/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/editing-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/editing-state/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/editing-state/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-reordering/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-reordering/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/table/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-reordering/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-resizing/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-resizing/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-resizing/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-edit-column/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-edit-row/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-header-row/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-edit-column/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-edit-column/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-edit-row/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-edit-row/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-inline-cell-editing/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-filter-row/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-filter-row/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-filter-row/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-group-row/constants.ts", "../../@devexpress/dx-grid-core/src/utils/virtual-table.ts", "../../@devexpress/dx-grid-core/src/plugins/table-group-row/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-group-row/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-header-row/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-header-row/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-band-header/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-band-header/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/virtual-table-state/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/virtual-table-state/utils.ts", "../../@devexpress/dx-grid-core/src/plugins/table-band-header/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/row-detail-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-row-detail/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-row-detail/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-row-detail/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-selection/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-selection/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-selection/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table/helpers.ts", "../../@devexpress/dx-grid-core/src/utils/column-extension.ts", "../../@devexpress/dx-grid-core/src/plugins/table/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-visibility/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-column-visibility/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/column-chooser/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/column-chooser/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/tree-data-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/custom-tree-data/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/custom-tree-data/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-tree-column/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/search-state/reducers.ts", "../../@devexpress/dx-grid-core/src/plugins/search-state/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/data-type-provider/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-fixed-columns/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-fixed-columns/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-fixed-columns/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/integrated-summary/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/table-summary-row/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/table-summary-row/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-summary-row/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/summary-state/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-keyboard-navigation/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/table-keyboard-navigation/computeds.ts", "../../@devexpress/dx-grid-core/src/utils/column-geometries.ts", "../../@devexpress/dx-grid-core/src/utils/table.ts", "../../@devexpress/dx-grid-core/src/utils/group-panel.ts", "../../@devexpress/dx-grid-core/src/plugins/virtual-table/utils.ts", "../../@devexpress/dx-grid-core/src/plugins/virtual-table/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/virtual-table/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/virtual-table-state/computeds.ts", "../../@devexpress/dx-grid-core/src/plugins/grid-exporter/constants.ts", "../../@devexpress/dx-grid-core/src/plugins/grid-exporter/helpers.ts", "../../@devexpress/dx-grid-core/src/plugins/grid-exporter/computeds.ts", "../../@devexpress/dx-react-grid/src/plugins/internal/table-group-row-columns.tsx", "../../@devexpress/dx-react-grid/src/plugins/internal/grid-core-getters.tsx", "../../@devexpress/dx-react-grid/src/plugins/internal/table-columns-getter.tsx", "../../@devexpress/dx-react-grid/src/plugins/internal/visible-table-columns.tsx", "../../@devexpress/dx-react-grid/src/plugins/internal/ordered-table-columns.tsx", "../../@devexpress/dx-react-grid/src/plugins/grid-core.tsx", "../../@devexpress/dx-react-grid/src/grid.tsx", "../../@devexpress/dx-react-grid/src/plugins/column-chooser.tsx", "../../@devexpress/dx-react-grid/src/plugins/filtering-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/integrated-filtering.tsx", "../../@devexpress/dx-react-grid/src/plugins/editing-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/paging-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/integrated-paging.tsx", "../../@devexpress/dx-react-grid/src/plugins/custom-paging.tsx", "../../@devexpress/dx-react-grid/src/plugins/grouping-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/integrated-grouping.tsx", "../../@devexpress/dx-react-grid/src/plugins/custom-grouping.tsx", "../../@devexpress/dx-react-grid/src/plugins/selection-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/integrated-selection.tsx", "../../@devexpress/dx-react-grid/src/plugins/sorting-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/integrated-sorting.tsx", "../../@devexpress/dx-react-grid/src/plugins/drag-drop-provider.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-column-reordering.tsx", "../../@devexpress/dx-react-grid/src/plugins/table.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-selection.tsx", "../../@devexpress/dx-react-grid/src/plugins/row-detail-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-row-detail.tsx", "../../@devexpress/dx-react-grid/src/components/summary/constants.ts", "../../@devexpress/dx-react-grid/src/components/summary/table-summary-content.tsx", "../../@devexpress/dx-react-grid/src/components/summary/group-summaries.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-group-row.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-header-row.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-band-header.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-filter-row.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-edit-row.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-edit-column.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-column-resizing.tsx", "../../@devexpress/dx-react-grid/src/plugins/paging-panel.tsx", "../../@devexpress/dx-react-grid/src/components/group-panel-layout/item-layout.tsx", "../../@devexpress/dx-react-grid/src/components/group-panel-layout.tsx", "../../@devexpress/dx-react-grid/src/plugins/grouping-panel.tsx", "../../@devexpress/dx-react-grid/src/plugins/data-type-provider.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-column-visibility.tsx", "../../@devexpress/dx-react-grid/src/plugins/toolbar.tsx", "../../@devexpress/dx-react-grid/src/plugins/tree-data-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/custom-tree-data.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-tree-column.tsx", "../../@devexpress/dx-react-grid/src/plugins/search-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/search-panel.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-fixed-columns.tsx", "../../@devexpress/dx-react-grid/src/plugins/summary-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/integrated-summary.tsx", "../../@devexpress/dx-react-grid/src/plugins/custom-summary.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-summary-row.tsx", "../../@devexpress/dx-react-grid/src/plugins/virtual-table/virtual-table-state.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-inline-cell-editing.tsx", "../../@devexpress/dx-react-grid/src/plugins/export-panel.tsx", "../../@devexpress/dx-react-grid/src/plugins/table-keyboard-navigation.tsx", "../../@devexpress/dx-react-grid/src/utils/helpers.ts", "../../@devexpress/dx-react-grid/src/components/table-layout.tsx", "../../@devexpress/dx-react-grid/src/components/table-layout/virtual-row-layout.tsx", "../../@devexpress/dx-react-grid/src/components/table-layout/virtual-table-layout-block.tsx", "../../@devexpress/dx-react-grid/src/components/table-layout/column-group.tsx", "../../@devexpress/dx-react-grid/src/components/table-layout/virtual-table-layout.tsx", "../../@devexpress/dx-react-grid/src/components/table-layout/row-layout.tsx", "../../@devexpress/dx-react-grid/src/components/table-layout/rows-block-layout.tsx", "../../@devexpress/dx-react-grid/src/components/table-layout/static-table-layout.tsx", "../../@devexpress/dx-react-grid/src/plugins/virtual-table/virtual-table.tsx", "../../@devexpress/dx-react-grid/src/utils/row-cache.ts", "../../@devexpress/dx-react-grid/src/utils/with-keyboard-navigation.tsx", "../../@devexpress/dx-react-grid/src/components/summary/inline-summary-item.tsx"],
  "sourcesContent": ["export const GRID_GROUP_TYPE = Symbol('group');\nexport const GRID_GROUP_CHECK = Symbol(`${GRID_GROUP_TYPE.toString()}_check`);\nexport const GRID_GROUP_LEVEL_KEY = Symbol(`${GRID_GROUP_TYPE.toString()}_levelKey`);\nexport const GRID_GROUP_COLLAPSED_ROWS = Symbol(`${GRID_GROUP_TYPE.toString()}_collapsedRows`);\n", "import { GRID_GROUP_CHECK } from '../integrated-grouping/constants';\nimport { GetRowIdFn, Row, RowId, GetCellValueFn, Column } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nconst warnIfRowIdUndefined: PureComputed<[GetRowIdFn]> = getRowId => (row) => {\n  const result = getRowId(row);\n  if (!row[GRID_GROUP_CHECK] && result === undefined) {\n    // tslint:disable-next-line: no-console\n    console.warn('The row id is undefined. Check the getRowId function. The row is', row);\n  }\n  return result;\n};\n\nexport const rowIdGetter: PureComputed<[GetRowIdFn, Row[]]> = (getRowId, rows) => {\n  if (!getRowId) {\n    const map = new Map(rows.map((row, rowIndex) => [row, rowIndex]) as [any, number]);\n    return (row: Row) => map.get(row) as RowId;\n  }\n  return warnIfRowIdUndefined(getRowId);\n};\n\nconst defaultGetCellValue: GetCellValueFn = (row, columnName) => row[columnName];\n\nexport const cellValueGetter: PureComputed<[GetCellValueFn, Column[]]> = (\n  getCellValue = defaultGetCellValue, columns,\n) => {\n  let useFastAccessor = true;\n  const map = columns.reduce((acc, column) => {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return (row, columnName) => (map[columnName]\n    ? map[columnName](row, columnName)\n    : getCellValue(row, columnName));\n};\n", "import { ColumnSortingState, ChangeSortingPayload, Sorting } from '../../types';\nimport { PureReducer, slice } from '@devexpress/dx-core';\n\nexport const changeColumnSorting: PureReducer<ColumnSortingState, ChangeSortingPayload> = (\n  state, {\n  columnName, direction, keepOther, sortIndex,\n}) => {\n  const { sorting } = state;\n\n  let nextSorting: any[] = [];\n  if (keepOther === true) {\n    nextSorting = sorting as Sorting[];\n  }\n  if (Array.isArray(keepOther)) {\n    nextSorting = slice(sorting)\n      .filter(s =>\n        keepOther.indexOf(s.columnName) > -1);\n  }\n\n  const columnSortingIndex = sorting.findIndex(s => s.columnName === columnName);\n  const columnSorting = sorting[columnSortingIndex];\n  const newColumnSorting = {\n    columnName,\n    direction: direction\n      || (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc'),\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting = slice(nextSorting);\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    const newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    const newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting = slice(nextSorting);\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting,\n  };\n};\n", "import {\n  KeepOtherSorting, GetColumnSortingDirectionFn, GetPersistentSortedColumnsFn,\n  CalculateKeepOtherFn,\n} from '../../types';\n\nconst unique = (arr: any[]) => [...Array.from(new Set(arr))];\n\nexport const getColumnSortingDirection: GetColumnSortingDirectionFn = (\n  sorting, columnName,\n) => {\n  const columnSorting = sorting.filter(s => s.columnName === columnName)[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nexport const getPersistentSortedColumns: GetPersistentSortedColumnsFn = (\n  sorting, columnExtensions = [],\n) => columnExtensions.reduce((acc, { columnName, sortingEnabled }) => {\n  if (sortingEnabled === false) {\n    if (sorting.findIndex(sortItem => sortItem.columnName === columnName) > -1) {\n      acc.push(columnName);\n    }\n  }\n  return acc;\n}, [] as string[]);\n\nexport const calculateKeepOther: CalculateKeepOtherFn = (\n  sorting, keepOther, persistentSortedColumns = [],\n) => {\n  if (!persistentSortedColumns.length) return keepOther as KeepOtherSorting;\n  if (!keepOther) return persistentSortedColumns as KeepOtherSorting;\n\n  return Array.isArray(keepOther)\n    ? unique([...keepOther, ...persistentSortedColumns])\n    : unique([...sorting.map(item => item.columnName), ...persistentSortedColumns]);\n};\n", "import { slice } from '@devexpress/dx-core';\nimport { MergeFn, SortArrayToAuxiliaryFn, CompareFn } from '../types';\n\n/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n/* tslint:disable no-increment-decrement */\n\nconst merge: MergeFn = (array, auxiliary, lo, mid, hi, compare) => {\n  let i = lo;\n  let j = mid + 1;\n  let k = lo;\n  while (true) {\n    const cmp = compare(array[i], array[j]);\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n        break;\n      }\n    }\n  }\n};\n\nconst sortArrayToAuxiliary: SortArrayToAuxiliaryFn = (array, auxiliary, lo, hi, compare) => {\n  if (hi < lo) return;\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nconst sortAuxiliaryToArray: SortArrayToAuxiliaryFn = (array, auxiliary, lo, hi, compare) => {\n  if (hi <= lo) return;\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nexport default (\n  array: any[] | ReadonlyArray<any>,\n  compare: CompareFn = (a, b): number => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  },\n) => {\n  const result = slice(array);\n  const auxiliary = slice(array);\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n", "import { RowsToTreeFn, TreeToRowsFn, TreeNode } from '../types';\n\nexport const NODE_CHECK = Symbol('node');\n\nexport const rowsToTree: RowsToTreeFn = (rows, getRowLevelKey) => {\n  if (!rows.length) return rows;\n\n  const levels: any[] = [{ children: [] }];\n\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.slice(1)\n        .findIndex(level => getRowLevelKey(level.root) === levelKey) + 1;\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n      const node = { [NODE_CHECK]: true, root: row, children: [] };\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n\n  return levels[0].children;\n};\n\nexport const treeToRows: TreeToRowsFn = (tree, rows = []) => {\n  if (!tree.length) return tree;\n  return tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        acc.push(node.root);\n        treeToRows(node.children, rows);\n      } else {\n        acc.push(node);\n      }\n      return acc;\n    },\n    rows as TreeNode[],\n  );\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport mergeSort from '../../utils/merge-sort';\nimport { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\nimport {\n  Row, GetRowLevelKeyFn, CompareFn, CreateCompareFn, SortedRowsFn, TreeNode,\n} from '../../types';\n\nconst defaultCompare = (a: any, b: any) => {\n  if (a === b) return 0;\n\n  if (a === null) {\n    return b === undefined ? -1 : 1;\n  }\n  if (a === undefined) {\n    return 1;\n  }\n  if (b === null || b === undefined) {\n    return -1;\n  }\n  return a < b ? -1 : 1;\n};\n\nconst createCompare: CreateCompareFn = (\n  sorting, getColumnCompare, getComparableValue,\n) => sorting.reduceRight((prevCompare, columnSorting) => {\n  const { columnName } = columnSorting;\n  const inverse = columnSorting.direction === 'desc';\n  const columnCompare = (getColumnCompare && getColumnCompare(columnName)) || defaultCompare;\n\n  return (aRow: Row, bRow: Row) => {\n    const a = getComparableValue(aRow, columnName);\n    const b = getComparableValue(bRow, columnName);\n    const result = columnCompare(a, b);\n\n    if (result !== 0) {\n      return inverse ? -result : result;\n    }\n    return prevCompare(aRow, bRow);\n  };\n}, (...args: any[]) => 0);\n\nconst sortTree: PureComputed<[TreeNode[], CompareFn]> = (tree, compare) => {\n  const sortedTree = tree.map((node) => {\n    if (node[NODE_CHECK]) {\n      return {\n        ...node,\n        children: sortTree(node.children, compare),\n      };\n    }\n    return node;\n  });\n\n  return mergeSort(\n    sortedTree, (a, b) => compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b),\n  );\n};\n\nconst sortHierarchicalRows: PureComputed<[Row[], CompareFn, GetRowLevelKeyFn]> = (\n  rows, compare, getRowLevelKey,\n) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const sortedTree = sortTree(tree, compare);\n\n  return treeToRows(sortedTree);\n};\n\nexport const sortedRows: SortedRowsFn = (\n  rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey,\n) => {\n  if (!sorting.length || !rows.length) return rows;\n\n  let compare;\n  if (!getRowLevelKey) {\n    compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  compare = createCompare(sorting, getColumnCompare, (row, columnName) => {\n    if (isGroupRow && isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n      return undefined;\n    }\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(\n    rows,\n    compare,\n    getRowLevelKey,\n  );\n};\n", "import { Filter, ChangeFilterPayload } from '../../types';\nimport { PureReducer, slice } from '@devexpress/dx-core';\n\nexport const changeColumnFilter: PureReducer<Filter[], ChangeFilterPayload> = (\n  filters, { columnName, config },\n) => {\n  const filterIndex = filters.findIndex(f => f.columnName === columnName);\n  const nextState = slice(filters);\n\n  if (config) {\n    const filter = { columnName, ...config };\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else if (filterIndex > -1) {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { Filter } from '../../types';\n\nexport const getColumnFilterConfig: PureComputed<\n  [Filter[], string], Filter | null\n> = (filters, columnName) => (\n  filters.length && filters.filter(s => s.columnName === columnName)[0] || null\n);\n", "import { FilterExpression, Filter } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const filterExpression: PureComputed<\n  [Filter[], FilterExpression?], FilterExpression\n> = (filters, expression) => {\n  // tslint:disable-next-line: no-object-literal-type-assertion\n  const selfFilterExpr = { filters, operator: 'and' as 'and' } as FilterExpression;\n  if (!expression) {\n    return selfFilterExpr;\n  }\n  return {\n    operator: 'and' as 'and',\n    filters: [expression, selfFilterExpr] as FilterExpression[],\n  };\n};\n", "import { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  Row, Filter, FilterPredicate,\n  FilterExpression, GetCellValueFn, RowsWithCollapsedRowsMetaMap,\n  UnwrapRowsComputed, FilteredRowsFn, FilterHierarchicalRowsFn,\n  CompiledPredicate, GetColumnPredicateFn, FilteredCollapsedRowsGetterFn, TreeNode,\n} from '../../types';\n\nconst operators = {\n  or: (predicates: CompiledPredicate[]) => (row: Row) => (\n    predicates.reduce((acc, predicate) => acc || predicate(row), false)\n  ),\n  and: (predicates: CompiledPredicate[]) => (row: Row) => (\n    predicates.reduce((acc, predicate) => acc && predicate(row), true)\n  ),\n};\n\nconst toLowerCase = (value: any) => String(value).toLowerCase();\n\nconst operationPredicates: { [key: string]: FilterPredicate } = {\n  contains: (value, filter) => toLowerCase(value)\n    .indexOf(toLowerCase(filter.value)) > -1,\n\n  notContains: (value, filter) => toLowerCase(value)\n    .indexOf(toLowerCase(filter.value)) === -1,\n\n  startsWith: (value, filter) => toLowerCase(value)\n    .startsWith(toLowerCase(filter.value)),\n\n  endsWith: (value, filter) => toLowerCase(value)\n    .endsWith(toLowerCase(filter.value)),\n\n  equal: (value, filter) => String(value) === String(filter.value),\n  notEqual: (value, filter) => String(value) !== String(filter.value),\n\n  greaterThan: (value, filter) => value > filter.value!,\n  greaterThanOrEqual: (value, filter) => value >= filter.value!,\n  lessThan: (value, filter) => value < filter.value!,\n  lessThanOrEqual: (value, filter) => value <= filter.value!,\n};\n\nexport const defaultFilterPredicate: FilterPredicate = (value, filter) => {\n  const operation = filter.operation || 'contains';\n  return operationPredicates[operation](value, filter);\n};\n\nconst filterTree: PureComputed<[TreeNode[], CompiledPredicate]> = (tree, predicate) => tree.reduce(\n  (acc, node) => {\n    if (node[NODE_CHECK]) {\n      const filteredChildren = filterTree(node.children, predicate) as TreeNode[];\n      if (filteredChildren.length > 0) {\n        acc.push({\n          ...node,\n          children: filteredChildren,\n        });\n        return acc;\n      }\n      if (predicate(node.root, true)) {\n        acc.push(node.root);\n        return acc;\n      }\n      return acc;\n    }\n\n    if (predicate(node)) {\n      acc.push(node);\n      return acc;\n    }\n\n    return acc;\n  },\n  [] as TreeNode[],\n);\n\nconst filterHierarchicalRows: FilterHierarchicalRowsFn = (\n  rows, predicate, getRowLevelKey, getCollapsedRows,\n) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n  const collapsedRowsMeta: any[] = [];\n\n  const filteredTree = filterTree(tree, (row, isNode) => {\n    if (isNode) {\n      const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n      if (collapsedRows && collapsedRows.length) {\n        const filteredCollapsedRows = collapsedRows.filter(predicate);\n        collapsedRowsMeta.push([row, filteredCollapsedRows]);\n        return !!filteredCollapsedRows.length || predicate(row);\n      }\n      if (predicate(row)) {\n        collapsedRowsMeta.push([row, []]);\n        return true;\n      }\n      return false;\n    }\n    return predicate(row);\n  });\n\n  return { rows: treeToRows(filteredTree), collapsedRowsMeta: new Map(collapsedRowsMeta) };\n};\n\nconst buildPredicate: PureComputed<\n  [FilterExpression, GetCellValueFn, GetColumnPredicateFn],\n  CompiledPredicate\n> = (\n  initialFilterExpression, getCellValue, getColumnPredicate,\n) => {\n  const getSimplePredicate = (filter: Filter) => {\n    const { columnName } = filter;\n    const customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    const predicate = customPredicate || defaultFilterPredicate;\n    return (row: Row) => predicate(getCellValue(row, columnName), filter, row);\n  };\n\n  const getOperatorPredicate: any = (filterExpression: FilterExpression) => {\n    const build = operators[toLowerCase(filterExpression.operator)];\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  const getPredicate = (filterExpression: any) => (\n    getOperatorPredicate(filterExpression)\n    || getSimplePredicate(filterExpression)\n  );\n\n  return getPredicate(initialFilterExpression);\n};\n\nexport const filteredRows: FilteredRowsFn = (\n  rows, filterExpression, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows,\n) => {\n  if (!(filterExpression && Object.keys(filterExpression).length && rows.length)) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return { rows } as Partial<RowsWithCollapsedRowsMetaMap>;\n  }\n\n  const predicate = buildPredicate(\n    filterExpression,\n    getCellValue,\n    getColumnPredicate,\n  );\n\n  return getRowLevelKey\n    ? filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows)\n    : { rows: rows.filter(predicate) };\n};\n\nexport const filteredCollapsedRowsGetter: FilteredCollapsedRowsGetterFn = (\n  { collapsedRowsMeta },\n) => row => collapsedRowsMeta && collapsedRowsMeta.get(row);\n\nexport const unwrappedFilteredRows: UnwrapRowsComputed = ({ rows }) => rows;\n", "export const GROUP_KEY_SEPARATOR = '|';\n", "import { PureReducer, slice } from '@devexpress/dx-core';\nimport { Getters } from '@devexpress/dx-react-core';\nimport { GROUP_KEY_SEPARATOR } from './constants';\nimport {\n  Grouping, ColumnGroupingState, ChangeGroupingPayload, ToggleGroupPayload, DraftGroupingState,\n} from '../../types';\n\nconst applyColumnGrouping: PureReducer<Grouping[], ChangeGroupingPayload> = (\n  grouping, { columnName, groupIndex },\n) => {\n  let nextGrouping = grouping;\n  const groupingIndex = nextGrouping.findIndex(g => g.columnName === columnName);\n  let targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping = slice(grouping);\n    (nextGrouping as Grouping[]).splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping = slice(nextGrouping);\n    (nextGrouping as Grouping[]).splice(targetIndex, 0, {\n      columnName,\n    });\n  }\n\n  return nextGrouping;\n};\n\nexport const changeColumnGrouping: PureReducer<ColumnGroupingState, ChangeGroupingPayload> = (\n  { grouping, expandedGroups }, { columnName, groupIndex },\n) => {\n  const nextGrouping = applyColumnGrouping(grouping!, { columnName, groupIndex });\n\n  const ungroupedColumnIndex = grouping!.findIndex(\n    (group, index) => !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName,\n  );\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  const filteredExpandedGroups = expandedGroups!.filter(\n    group => group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex,\n  );\n  if (filteredExpandedGroups.length === expandedGroups!.length) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups,\n  };\n};\n\nexport const toggleExpandedGroups: PureReducer<ColumnGroupingState, ToggleGroupPayload> = (\n  state, { groupKey },\n) => {\n  const expandedGroups = slice(state.expandedGroups);\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups,\n  };\n};\n\nexport const draftColumnGrouping: PureReducer<\n  Getters, ChangeGroupingPayload, DraftGroupingState\n> = (\n  { grouping, draftGrouping },\n  { columnName, groupIndex },\n) => ({\n  draftGrouping: applyColumnGrouping(draftGrouping || grouping, { columnName, groupIndex }),\n});\n\nexport const cancelColumnGroupingDraft = () => ({\n  draftGrouping: null,\n});\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { Grouping, Sorting, GroupIndex } from '../../types';\n\nexport const adjustSortIndex: PureComputed<[GroupIndex, Grouping[], Sorting[]]> = (\n  groupingIndex, grouping, sorting,\n) => Math.max(\n  grouping.slice(0, groupingIndex).reduce(\n    (acc, columnGrouping) => {\n      const columnSortingIndex = sorting.findIndex(\n        columnSorting => columnSorting.columnName === columnGrouping.columnName,\n      );\n      return (columnSortingIndex === -1 ? acc - 1 : acc);\n    },\n    groupingIndex,\n  ),\n  0,\n);\n", "import { GetIntegratedGroupsFn, GetGroupRowsFn, Row } from '../../types';\nimport { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport { GRID_GROUP_CHECK, GRID_GROUP_LEVEL_KEY, GRID_GROUP_TYPE } from './constants';\n\nconst defaultColumnCriteria = (value: any) => ({\n  value,\n  key: String(value),\n});\n\nexport const getGroupRows: GetGroupRowsFn = (\n  rows, grouping, groupsGetter,\n) => {\n  if (grouping.length === 0) {\n    return rows;\n  }\n\n  const keyPrefixes = [{ prefix: '', level: 0, rows }];\n  const resultRows = [] as Row[];\n  const compoundKeys = {};\n\n  while (keyPrefixes.length) {\n    const { prefix: keyPrefix, level, rows: currentRows } = keyPrefixes.pop()!;\n\n    const currentCompoundKey = keyPrefix.slice(0, keyPrefix.length - 1);\n    const groupIndex = compoundKeys[currentCompoundKey] ?? -1;\n\n    const groupRows: readonly Row[] = grouping[level] && currentRows.length\n      ? groupsGetter(currentRows, grouping[level], keyPrefix)\n          .map(({ childRows, ...params }: any, rowIndex) => {\n            const { compoundKey } = params;\n\n            compoundKeys[compoundKey] = groupIndex + rowIndex + 1;\n            keyPrefixes.push({\n              prefix: `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n              level: level + 1,\n              rows: childRows || [],\n            });\n\n            return params;\n          })\n      : currentRows;\n\n    if (groupIndex > -1) {\n      resultRows.splice(groupIndex + 1, 0, ...groupRows);\n    } else {\n      groupRows.forEach(row => resultRows.push(row));\n    }\n  }\n\n  return resultRows;\n};\n\nexport const getIntegratedGroups: GetIntegratedGroupsFn = (\n  rows,\n  grouping,\n  keyPrefix,\n  getCellValue,\n  getColumnCriteria,\n) => {\n  const { columnName } = grouping;\n  const groupCriteria = (getColumnCriteria && getColumnCriteria(columnName))\n        || defaultColumnCriteria;\n\n  const groups = new Map();\n  rows.forEach((row) => {\n    const rawValue = getCellValue(row, columnName);\n    const { key, value } = groupCriteria(rawValue, row);\n    const sameKeyItems = groups.get(key);\n\n    if (!sameKeyItems) {\n      const groupingValue = value === rawValue ? value : value || key;\n      groups.set(key, [groupingValue, key, [row]]);\n    } else {\n      sameKeyItems[2].push(row);\n    }\n  });\n\n  const groupedBy = columnName;\n  return [...groups.values()]\n    .map(([value, key, childRows]) => ({\n      groupedBy,\n      compoundKey: `${keyPrefix}${key}`,\n      key,\n      value,\n      [GRID_GROUP_CHECK]: true,\n      [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE.toString()}_${groupedBy}`,\n      childRows,\n    }));\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport {\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n  GRID_GROUP_COLLAPSED_ROWS,\n} from './constants';\nimport {\n  Grouping,\n  GroupKey,\n  Row,\n  GetCollapsedRowsFn,\n  IsSpecificRowFn,\n  GroupedRowsFn,\n  GroupsGetterFn,\n} from '../../types';\nimport { getGroupRows, getIntegratedGroups } from './helpers';\n\nexport const groupRowChecker: IsSpecificRowFn = row => row[GRID_GROUP_CHECK];\n\nexport const groupRowLevelKeyGetter = (row: Row) => (row ? row[GRID_GROUP_LEVEL_KEY] : undefined);\n\nexport const groupedRows: GroupedRowsFn = (\n  rows, grouping, getCellValue, getColumnCriteria,\n) => {\n  const groupsGetter: GroupsGetterFn = (currentRows, currentGrouping, prefix) =>\n    getIntegratedGroups(\n      currentRows,\n      currentGrouping,\n      prefix,\n      getCellValue,\n      getColumnCriteria,\n    );\n  return getGroupRows(rows, grouping, groupsGetter);\n};\n\nexport const expandedGroupRows: PureComputed<[Row[], Grouping[], GroupKey[], boolean]> = (\n  rows,\n  grouping,\n  expandedGroups,\n  isExporting,\n) => {\n  if (!grouping.length) return rows;\n\n  const groupingColumnNames = grouping.map(columnGrouping => columnGrouping.columnName);\n  const expandedGroupsSet = new Set(expandedGroups);\n  let currentGroupExpanded = true;\n  let currentGroupLevel = 0;\n\n  return rows.reduce((acc, row) => {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1][GRID_GROUP_COLLAPSED_ROWS].push(row);\n      }\n      return acc;\n    }\n\n    const groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey) || isExporting;\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push({\n        ...row,\n        [GRID_GROUP_COLLAPSED_ROWS]: [],\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const groupCollapsedRowsGetter: PureComputed<[GetCollapsedRowsFn]> =\n  getCollapsedRows => row => (\n  row[GRID_GROUP_COLLAPSED_ROWS] || (getCollapsedRows && getCollapsedRows(row))\n);\n", "import { GetCustomGroupsFn } from '../../types';\nimport {\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n  GRID_GROUP_TYPE,\n} from '../integrated-grouping/constants';\n\nexport const getCustomGroups: GetCustomGroupsFn = (\n  rows,\n  grouping,\n  keyPrefix,\n  getChildGroups,\n  rootRows,\n) => {\n  const groupedBy = grouping.columnName;\n  return getChildGroups(rows as any[], grouping, rootRows as any[])\n    .map(({ key, value = key, childRows }) => ({\n      groupedBy,\n      compoundKey: `${keyPrefix}${key}`,\n      key,\n      value,\n      [GRID_GROUP_CHECK]: true,\n      [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE.toString()}_${groupedBy}`,\n      childRows,\n    }));\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { GRID_GROUP_CHECK } from '../integrated-grouping/constants';\nimport { GetRowIdFn, Row, RowId, CustomGroupedRowsFn, GroupsGetterFn } from '../../types';\nimport { getCustomGroups } from './helpers';\nimport { getGroupRows } from '../integrated-grouping/helpers';\n\nexport const customGroupedRows: CustomGroupedRowsFn = (\n  rows, grouping, getChildGroups, rootRows = rows,\n) => {\n  const groupsGetter: GroupsGetterFn = (currentRows, currentGrouping, prefix) =>\n    getCustomGroups(\n      currentRows,\n      currentGrouping,\n      prefix,\n      getChildGroups,\n      rootRows,\n    );\n  return getGroupRows(rows, grouping, groupsGetter);\n};\n\nexport const customGroupingRowIdGetter: PureComputed<[GetRowIdFn, Row[]]> = (getRowId, rows) => {\n  const firstRow = rows.find(row => !row[GRID_GROUP_CHECK]);\n  if (!firstRow || getRowId(firstRow) !== undefined) {\n    return getRowId;\n  }\n\n  const map = new Map<Row, RowId>(rows\n    .filter(row => !row[GRID_GROUP_CHECK])\n    .map((row, rowIndex) => [row, rowIndex]) as [Row, RowId]);\n\n  return row => map.get(row)!;\n};\n", "import { GroupingPanelItemsFn } from '../../types/';\n\nexport const groupingPanelItems: GroupingPanelItemsFn = (\n  columns, grouping, draftGrouping,\n) => {\n  const items = draftGrouping.map(({ columnName }) => ({\n    column: columns.find(c => c.name === columnName)!,\n    draft: !grouping.some(columnGrouping => columnGrouping.columnName === columnName),\n  }));\n\n  grouping.forEach(({ columnName }, index) => {\n    if (draftGrouping.some(columnGrouping => columnGrouping.columnName === columnName)) return;\n    items.splice(index, 0, {\n      column: columns.find(c => c.name === columnName)!,\n      draft: true,\n    });\n  });\n\n  return items;\n};\n", "export const setCurrentPage = (prevPage: number, page: number) => page;\nexport const setPageSize = (prevPageSize: number, size: number) => size;\n", "import { PureComputed } from '@devexpress/dx-core';\n\nexport const clamp: PureComputed<[number, number]> = (value, max) => (\n  Math.max(Math.min(value, max), 0)\n);\n", "import { clamp } from './helpers';\nimport { Row, GetRowLevelKeyFn, CurrentPageFn } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\n// tslint:disable-next-line:max-line-length\nconst PAGE_HEADERS_OVERFLOW_ERROR = 'Max row level exceeds the page size. Consider increasing the page size.';\n\nexport const paginatedRows: PureComputed<[Row[], number, number]> = (rows, pageSize, page) => (\n  pageSize\n    ? rows.slice(pageSize * page, pageSize * (page + 1))\n    : rows as Row[]\n);\n\nexport const rowsWithPageHeaders: PureComputed<[Row[], number, GetRowLevelKeyFn]> = (\n  rows, pageSize, getRowLevelKey,\n) => {\n  if (!pageSize || !getRowLevelKey) return rows as Row[];\n\n  let result = rows.slice();\n\n  let headerRows: any[] = [];\n  let currentIndex = 0;\n  while (result.length > currentIndex) {\n    const row = result[currentIndex];\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const headerIndex = headerRows.findIndex(headerRow => getRowLevelKey(headerRow) === levelKey);\n      // tslint:disable-next-line:prefer-conditional-expression\n      if (headerIndex === -1) {\n        headerRows = [...headerRows, row];\n      } else {\n        headerRows = [...headerRows.slice(0, headerIndex), row];\n      }\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n    const indexInPage = currentIndex % pageSize;\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [\n        ...result.slice(0, currentIndex),\n        headerRows[indexInPage],\n        ...result.slice(currentIndex),\n      ];\n    }\n    currentIndex += 1;\n  }\n\n  return result;\n};\n\nexport const rowCount = (rows: Row[]) => rows.length;\n\nexport const pageCount: PureComputed<[number, number]> = (count, pageSize) => (\n  pageSize ? Math.ceil(count / pageSize) : 1\n);\n\nexport const currentPage: CurrentPageFn = (\n  page, totalCount, pageSize, setCurrentPage,\n) => {\n  const totalPages = pageCount(totalCount, pageSize);\n  const adjustedCurrentPage = clamp(page, totalPages - 1);\n  if (page !== adjustedCurrentPage) {\n    setTimeout(() => setCurrentPage(adjustedCurrentPage));\n  }\n  return adjustedCurrentPage;\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { NthRowOnPageFn } from '../../types';\n\nexport const firstRowOnPage: NthRowOnPageFn = (currentPage, pageSize, totalCount) => {\n  if (totalCount === 0) {\n    return 0;\n  }\n  return pageSize ? (currentPage * pageSize) + 1 : 1;\n};\n\nexport const lastRowOnPage: NthRowOnPageFn = (currentPage, pageSize, totalRowCount) => {\n  let result = totalRowCount;\n  if (pageSize) {\n    const index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n\nexport const calculateStartPage: PureComputed<[number, number, number]> = (\n  currentPage, maxButtonCount, totalPageCount,\n) => (\n  Math.max(\n    Math.min(\n    currentPage - Math.floor(maxButtonCount / 2),\n      (totalPageCount - maxButtonCount) + 1,\n    ),\n    1,\n  )\n);\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { RowId } from '../types';\n\nexport const toggle: PureComputed<[RowId[], RowId[], boolean?]> = (\n  source, items, state?,\n) => {\n  const itemsSet = new Set(items);\n\n  let sourceState: any = state;\n  if (sourceState === undefined) {\n    const availableSelection = source.filter(item => itemsSet.has(item));\n    sourceState = availableSelection.length !== itemsSet.size;\n  }\n\n  if (sourceState) {\n    const sourceSet = new Set(source);\n    return [\n      ...source,\n      ...items.filter(item => !sourceSet.has(item)),\n    ];\n  }\n\n  return source.filter(item => !itemsSet.has(item));\n};\n", "import { toggle } from '../../utils/common-reducers';\nimport { ToggleRowsFieldReducer } from '../../types';\n\nexport const toggleSelection: ToggleRowsFieldReducer = (\n  selection, { rowIds, state },\n) => toggle(selection, rowIds, state);\n", "import { PureComputed } from '@devexpress/dx-core';\nimport {\n  RowsWithSelection, UnwrapRowsComputed, RowId, RowsWithAvailableToSelectFn,\n} from '../../types';\n\ntype RowsSelectedFn = PureComputed<[RowsWithSelection, RowId[]], boolean>;\n\nexport const rowsWithAvailableToSelect: RowsWithAvailableToSelectFn = (\n  rows, getRowId, isGroupRow,\n) => {\n  let dataRows = rows;\n  if (isGroupRow) {\n    dataRows = dataRows.filter(row => !isGroupRow(row));\n  }\n  return { rows, availableToSelect: dataRows.map(row => getRowId(row)) };\n};\n\nexport const someSelected: RowsSelectedFn = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return availableToSelect.length !== 0 && selectionSet.size !== 0\n    && availableToSelect.some(elem => selectionSet.has(elem))\n    && availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const allSelected: RowsSelectedFn = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return selectionSet.size !== 0 && availableToSelect.length !== 0\n    && !availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const unwrapSelectedRows: UnwrapRowsComputed = ({ rows }) => rows;\n", "import { PureReducer } from '@devexpress/dx-core';\nimport { RowId, Row, RowIdsPayload, RowPayload, RowChangePayload,\n  RowChanges, EditingCell, EditingCellsPayload,\n} from '../../types';\n\nexport const startEditRows: PureReducer<RowId[], RowIdsPayload> = (\n  prevEditingRowIds, { rowIds },\n) => [...prevEditingRowIds, ...rowIds];\n\nexport const stopEditRows: PureReducer<RowId[], RowIdsPayload> = (\n  prevEditingRowIds, { rowIds },\n) => {\n  const rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(id => !rowIdSet.has(id));\n};\n\nexport const startEditCells: PureReducer<EditingCell[], EditingCellsPayload> = (\n  prevEditingCells, { editingCells },\n) => [...prevEditingCells, ...editingCells];\n\nexport const stopEditCells: PureReducer<EditingCell[], EditingCellsPayload> = (\n  prevEditingCells, { editingCells },\n) => {\n  return prevEditingCells.filter(({ rowId, columnName }) => (\n    !editingCells.some(({ rowId: currentRowId, columnName: currentColumnName }) => (\n      currentRowId === rowId && currentColumnName === columnName\n    ))\n  ));\n};\n\nexport const addRow: PureReducer<Row[], RowPayload> = (\n  addedRows, { row } = { row: {} },\n) => [...addedRows, row];\n\nexport const changeAddedRow: PureReducer<Row[], RowChangePayload> = (\n  addedRows, { rowId, change },\n) => {\n  const result = addedRows.slice();\n  result[rowId] = { ...result[rowId], ...change };\n  return result;\n};\n\nexport const cancelAddedRows: PureReducer<Row[], RowIdsPayload> = (addedRows, { rowIds }) => {\n  const result: Row[] = [];\n  const indexSet = new Set(rowIds);\n  addedRows.forEach((row, index) => {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nexport const changeRow: PureReducer<RowChanges, RowChangePayload> = (\n  prevRowChanges, { rowId, change },\n) => {\n  const prevChange = prevRowChanges[rowId] || {};\n  return {\n    ...prevRowChanges,\n    [rowId]: {\n      ...prevChange,\n      ...change,\n    },\n  };\n};\n\nexport const cancelChanges: PureReducer<RowChanges, RowIdsPayload> = (\n  prevRowChanges, { rowIds },\n) => {\n  const result = { ...prevRowChanges };\n  rowIds.forEach((rowId) => {\n    delete result[rowId];\n  });\n  return result;\n};\n\nexport const deleteRows: PureReducer<RowId[], RowIdsPayload> = (deletedRowIds, { rowIds }) => [\n  ...deletedRowIds, ...rowIds,\n];\n\nexport const cancelDeletedRows: PureReducer<RowId[], RowIdsPayload> = (\n  deletedRowIds, { rowIds },\n) => {\n  const rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(rowId => !rowIdSet.has(rowId));\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport {\n  EditingColumnExtension, CreateRowChangeFn, Row, RowId, RowChanges,\n} from '../../types';\n\nexport const changedRowsByIds: PureComputed<\n  [any, RowId[]], RowChanges\n> = (changes, rowIds) => {\n  const result = {};\n  rowIds.forEach((rowId) => {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nexport const addedRowsByIds: PureComputed<[Row[], RowId[]]> = (addedRows, rowIds) => {\n  const rowIdSet = new Set(rowIds);\n  const result: Row[] = [];\n  addedRows.forEach((row, index) => {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nconst defaultCreateRowChange: CreateRowChangeFn = (row, value, columnName) => (\n  { [columnName]: value }\n);\nexport const createRowChangeGetter: PureComputed<\n  [CreateRowChangeFn?, EditingColumnExtension[]?], CreateRowChangeFn\n> = (\n  createRowChange = defaultCreateRowChange,\n  columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n    return acc;\n  }, {});\n\n  return (row, value, columnName) => {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n    return createRowChange(row, value, columnName);\n  };\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { RowId, RowChanges } from '../../types';\n\nexport const getRowChange: PureComputed<[RowChanges, RowId], any> = (\n  rowChanges, rowId,\n) => rowChanges[rowId] || {};\n", "export const TABLE_REORDERING_TYPE = Symbol('reordering');\n", "import { PureReducer, slice } from '@devexpress/dx-core';\nimport { ColumnOrder, ChangeColumnOrderPayload } from '../../types';\n\nexport const changeColumnOrder: PureReducer<ColumnOrder, ChangeColumnOrderPayload> = (\n  order, { sourceColumnName, targetColumnName },\n) => {\n  const sourceColumnIndex = order.indexOf(sourceColumnName);\n  const targetColumnIndex = order.indexOf(targetColumnName);\n  const newOrder = slice(order);\n\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n", "export const TABLE_DATA_TYPE = Symbol('data');\nexport const TABLE_NODATA_TYPE = Symbol('nodata');\nexport const TABLE_FLEX_TYPE = Symbol('flex');\n", "import { PureComputed, slice } from '@devexpress/dx-core';\nimport mergeSort from '../../utils/merge-sort';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_REORDERING_TYPE } from './constants';\nimport { OrderedColumnsComputed, DraftOrderComputed, TableRow } from '../../types';\n\nexport const orderedColumns: OrderedColumnsComputed = (\n  tableColumns = [], order,\n) => mergeSort(tableColumns, (a, b) => {\n  if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n\n  const aPos = order.indexOf(a.column.name);\n  const bPos = order.indexOf(b.column.name);\n  return aPos - bPos;\n});\n\nexport const tableHeaderRowsWithReordering: PureComputed<[TableRow[]]> = tableHeaderRows => [\n  ...tableHeaderRows,\n  {\n    key: TABLE_REORDERING_TYPE.toString(),\n    type: TABLE_REORDERING_TYPE,\n    height: 0,\n  },\n];\n\nexport const draftOrder: DraftOrderComputed = (order, sourceColumnIndex, targetColumnIndex) => {\n  if (sourceColumnIndex === -1\n    || targetColumnIndex === -1\n    || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  const result = slice(order);\n  const sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n\n  return result;\n};\n", "import { ColumnSizesFn, ValidValueFn, ConvertWidthFn, ColumnWidthFn } from '../../types';\n\nconst getColumnWidth: ColumnWidthFn = (\n  columnWidths, name, {\n    columnName, cachedWidths, shift, minColumnWidth, maxColumnWidth, columnExtensions = [],\n}) => {\n  const change = name === columnName ? shift : -shift;\n  const column  = columnWidths.find(elem => elem.columnName === name)!;\n  const extension = columnExtensions.find(elem => elem.columnName === name);\n  const width = typeof column.width === 'number'\n    ? column.width\n    : cachedWidths[name];\n  const minWidth = extension && extension.minWidth! >= 0\n    ? extension.minWidth\n    : minColumnWidth;\n  const maxWidth = extension && extension.maxWidth! >= 0\n    ? extension.maxWidth\n    : maxColumnWidth;\n  const size = Math.max(\n    minWidth!,\n    Math.min(width + change, maxWidth!),\n  );\n\n  return ({ width, size });\n};\n\nexport const getColumnSizes: ColumnSizesFn = (\n  columnWidths, payload) => {\n  const { columnName, nextColumnName, resizingMode, shift } = payload;\n  const { width, size } = getColumnWidth(columnWidths, columnName, payload);\n\n  if (resizingMode === 'nextColumn') {\n    const { width: nextWidth, size: nextSize } = getColumnWidth(\n      columnWidths, nextColumnName, payload,\n    );\n\n    if (size + nextSize !== width + nextWidth) {\n      const moreThanLimit = size + nextSize > width + nextWidth;\n      const columnExpand = shift > 0;\n      if (moreThanLimit !== columnExpand) {\n        return { size, nextSize: width + nextWidth - size };\n      }\n      return { size: width + nextWidth - nextSize, nextSize };\n    }\n    return { size, nextSize };\n  }\n\n  return { size };\n};\n\nexport const isValidValue: ValidValueFn = (value, validUnits) => {\n  const numb = parseInt(value, 10);\n  const unit = numb ? value.substr(numb.toString().length) : value;\n  const sizeIsAuto = isNaN(numb) && unit === 'auto';\n  const sizeIsValid = numb >= 0 && validUnits.some(validUnit => validUnit === unit);\n  return sizeIsAuto || sizeIsValid;\n};\n\nexport const convertWidth: ConvertWidthFn = (value) => {\n  if (typeof value === 'string') {\n    const numb = parseInt(value, 10);\n    if (value.substr(numb.toString().length).length > 0) {\n      return value;\n    }\n    return numb;\n  }\n  return value;\n};\n", "import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableColumn, SpecifyWidthsFn, TableColumnsWithWidthFn, ErrorFn } from '../../types';\nimport { isValidValue, convertWidth } from './helpers';\n\nconst VALID_UNITS = ['px', '%', 'em', 'rem', 'vm', 'vh', 'vmin', 'vmax', ''];\nconst NOT_FOR_WIDGET_UNITS = ['%'];\n/* tslint:disable max-line-length */\nconst COLUMN_RESIZING_ERROR = 'The columnWidths property of the TableColumnResizing plugin is given an invalid value.';\n\nconst specifyWidths: SpecifyWidthsFn = (tableColumns, widths, resizingMode, onError) => {\n  if (resizingMode !== 'widget' && resizingMode !== 'nextColumn') {\n    onError();\n  }\n  if (!widths.length) return tableColumns;\n  return tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        const columnName = tableColumn.column!.name;\n        const column = widths.find(el => el.columnName === columnName);\n        const width = column && column.width;\n        if (typeof width !== 'number') {\n          if (width === undefined) {\n            onError();\n          } else if (!isValidValue(width, VALID_UNITS)) {\n            onError();\n          } else if (resizingMode === 'widget' && isValidValue(width, NOT_FOR_WIDGET_UNITS)) {\n            onError();\n          }\n        } else if (width < 0) {\n          onError();\n        }\n        if (width === undefined) {\n          acc.push(tableColumn);\n        } else {\n          acc.push({ ...tableColumn, width: convertWidth(width) });\n        }\n      } else {\n        acc.push(tableColumn);\n      }\n      return acc;\n    }, [] as TableColumn[]);\n};\n\nexport const tableColumnsWithWidths: TableColumnsWithWidthFn = (\n  tableColumns, columnWidths, resizingMode,\n) => specifyWidths(tableColumns, columnWidths, resizingMode, throwError);\n\nexport const tableColumnsWithDraftWidths: TableColumnsWithWidthFn = (\n  tableColumns, draftColumnWidths, resizingMode,\n) => specifyWidths(tableColumns, draftColumnWidths, resizingMode, () => {});\n\nconst throwError: ErrorFn = () => {\n  throw new Error(COLUMN_RESIZING_ERROR);\n};\n", "import { slice } from '@devexpress/dx-core';\nimport { ColumnWidthReducer } from '../../types';\nimport { getColumnSizes } from './helpers';\n\nexport const changeTableColumnWidth: ColumnWidthReducer = (state, payload) => {\n  const { columnWidths } = state;\n  const { columnName, nextColumnName, resizingMode } = payload;\n  const nextColumnWidth = slice(columnWidths);\n  const index = nextColumnWidth.findIndex(elem => elem.columnName === columnName);\n  const nextIndex = nextColumnWidth.findIndex(elem => elem.columnName === nextColumnName);\n  const { size, nextSize } = getColumnSizes(columnWidths, payload);\n\n  nextColumnWidth.splice(index, 1, { columnName, width: size });\n  if (resizingMode === 'nextColumn') {\n    nextColumnWidth.splice(nextIndex, 1, { columnName: nextColumnName, width: nextSize });\n  }\n  return {\n    columnWidths: nextColumnWidth,\n  };\n};\n\nexport const draftTableColumnWidth: ColumnWidthReducer = (state, payload) => {\n  const { columnWidths } = state;\n  const { columnName, nextColumnName, resizingMode } = payload;\n  const { size, nextSize } = getColumnSizes(columnWidths, payload);\n\n  if (resizingMode === 'nextColumn') {\n    return { draftColumnWidths: [\n      { columnName, width: size }, { columnName: nextColumnName, width: nextSize! },\n    ] };\n  }\n  return { draftColumnWidths: [{ columnName, width: size }] };\n};\n\nexport const cancelTableColumnWidthDraft = () => ({\n  draftColumnWidths: [],\n});\n", "export const TABLE_EDIT_COMMAND_TYPE = Symbol('editCommand');\n", "export const TABLE_ADDED_TYPE = Symbol('added');\nexport const TABLE_EDIT_TYPE = Symbol('edit');\n", "export const TABLE_HEADING_TYPE = Symbol('heading');\n", "import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from '../table-edit-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\nimport { IsSpecificCellFn } from '../../types';\n\nexport const isHeadingEditCommandsTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\nexport const isEditCommandsTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE\n  || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\nimport { TableColumn } from '../../types';\nimport { convertWidth } from '../table-column-resizing/helpers';\n\nexport const tableColumnsWithEditing: PureComputed<[TableColumn[], number | string]> = (\n  tableColumns, width,\n) => [\n  { width: convertWidth(width),\n    key: TABLE_EDIT_COMMAND_TYPE.toString(), type: TABLE_EDIT_COMMAND_TYPE },\n  ...tableColumns];\n", "import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { IsSpecificRowFn, IsSpecificCellFn } from '../../types';\n\nexport const isEditTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE)\n  && tableColumn.type === TABLE_DATA_TYPE;\nexport const isAddedTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_ADDED_TYPE;\nexport const isEditTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_EDIT_TYPE;\n", "import { slice } from '@devexpress/dx-core';\nimport { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableRowsWithEditingFn } from '../../types';\n\nexport const tableRowsWithEditing: TableRowsWithEditingFn = (\n  tableRows, editingRowIds, addedRows, rowHeight,\n) => {\n  const rowIds = new Set(editingRowIds);\n  const editedTableRows = tableRows\n    .map(tableRow => (\n      tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId!)\n        ? {\n          ...tableRow,\n          type: TABLE_EDIT_TYPE,\n          height: rowHeight,\n        }\n        : tableRow\n    ));\n\n  const addedTableRows = addedRows\n    .map((row, rowIndex) => ({\n      row,\n      key: `${TABLE_ADDED_TYPE.toString()}_${rowIndex}`,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n    }));\n\n  return [\n    ...slice(addedTableRows).reverse(),\n    ...editedTableRows,\n  ];\n};\n", "import { TableRowsWithEditingCellsFn, TableColumnsWithEditingCellsFn } from '../../types';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const rowsWithEditingCells: TableRowsWithEditingCellsFn = (\n  tableBodyRows, editingCells,\n) => tableBodyRows.map((row) => {\n  const { rowId, type } = row;\n  if (\n    rowId !== undefined &&\n    type === TABLE_DATA_TYPE &&\n    editingCells.some(elem => elem.rowId === rowId)\n  ) {\n    return {\n      ...row,\n      hasEditCell: true,\n    };\n  }\n  return row;\n});\n\nexport const columnsWithEditingCells: TableColumnsWithEditingCellsFn = (\n  tableColumns, editingCells,\n) => tableColumns.map((tableColumn) => {\n  const columnName = tableColumn.column ? tableColumn.column.name : undefined;\n  if (columnName !== undefined && editingCells.some(elem => elem.columnName === columnName)) {\n    return {\n      ...tableColumn,\n      hasEditCell: true,\n    };\n  }\n  return tableColumn;\n});\n", "export const TABLE_FILTER_TYPE = Symbol('filter');\nexport const DEFAULT_FILTER_OPERATIONS = [\n  'contains',\n  'notContains',\n  'startsWith',\n  'endsWith',\n  'equal',\n  'notEqual',\n];\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_FILTER_TYPE, DEFAULT_FILTER_OPERATIONS } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  IsSpecificCellFn, IsSpecificRowFn, FilterOperation, GetAvailableFilterOperationsFn,\n  GetSelectedFilterOperationFn,\n} from '../../types';\n\nexport const isFilterTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isFilterTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_FILTER_TYPE;\n\nexport const getColumnFilterOperations: PureComputed<\n  [GetAvailableFilterOperationsFn, string],\n  FilterOperation[]\n> = (\n  getAvailableFilterOperations, columnName,\n) => (getAvailableFilterOperations && getAvailableFilterOperations(columnName))\n  || DEFAULT_FILTER_OPERATIONS;\n\nexport const isFilterValueEmpty = (value: any) => value === undefined || !String(value).length;\n\nexport const getSelectedFilterOperation: GetSelectedFilterOperationFn = (\n  filterOperations, columnName, columnFilter, columnFilterOperations,\n) => {\n  if (columnFilter && columnFilter.operation) {\n    return columnFilter.operation;\n  }\n  if (filterOperations[columnName]) {\n    return filterOperations[columnName];\n  }\n  return columnFilterOperations[0];\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_FILTER_TYPE } from './constants';\nimport { TableRow } from '../../types';\n\nexport const tableHeaderRowsWithFilter: PureComputed<[TableRow[], number]> = (\n  headerRows, rowHeight,\n) => [\n  ...headerRows,\n  { key: TABLE_FILTER_TYPE.toString(), type: TABLE_FILTER_TYPE, height: rowHeight }];\n", "export const TABLE_GROUP_TYPE = Symbol('group');\n", "import { PureComputed } from '@devexpress/dx-core';\nimport {\n  GetVisibleBoundaryWithFixedFn, VisibleBoundary, GetVisibleBoundaryFn, GetSpanBoundaryFn,\n  CollapseBoundariesFn, GetColumnsSizeFn, GetCollapsedColumnsFn, CollapsedColumn,\n  GetCollapsedAndStubRowsFn, GetCollapsedCellsFn, GetCollapsedGridFn, GetColumnWidthFn,\n  TableColumn,\n  CollapsedCell,\n  GetColumnWidthGetterFn,\n  GetCollapsedGridsFn,\n  CollapsedGrid,\n  GetSpecificRenderBoundaryFn,\n  GetRenderBoundaryFn,\n  GetRowsVisibleBoundaryFn,\n  TableRow,\n} from '../types';\nimport { TABLE_FLEX_TYPE, intervalUtil } from '..';\n\nexport const TABLE_STUB_TYPE = Symbol('stub');\n\nexport const getVisibleBoundaryWithFixed: GetVisibleBoundaryWithFixedFn = (\n  visibleBoundary, items,\n) => items.reduce((acc, item, index) => {\n  if (item.fixed && (index < visibleBoundary[0] || index > visibleBoundary[1])) {\n    acc.push([index, index]);\n  }\n  return acc;\n}, [visibleBoundary] as [VisibleBoundary]);\n\nexport const getVisibleBoundary: GetVisibleBoundaryFn = (\n  items, viewportStart, viewportSize, getItemSize, offset = 0, itemSize = 0,\n) => {\n  let start: number | null = null;\n  let end: number | null = null;\n  let index = 0;\n  let beforePosition = offset * itemSize;\n\n  const viewportEnd = viewportStart + viewportSize;\n  while (end === null && index < items.length) {\n    const item = items[index];\n    const afterPosition = beforePosition + getItemSize(item)!;\n    const isVisible = (beforePosition >= viewportStart && beforePosition < viewportEnd)\n      || (afterPosition > viewportStart && afterPosition <= viewportEnd)\n      || (beforePosition < viewportStart && afterPosition > viewportEnd);\n    if (isVisible && start === null) {\n      start = index;\n    }\n    if (!isVisible && start !== null) {\n      end = index - 1;\n      break;\n    }\n    index += 1;\n    beforePosition = afterPosition;\n  }\n  if (start !== null && end === null) {\n    end = index - 1;\n  }\n\n  start = start === null ? 0 : start;\n  end = end === null ? 0 : end;\n\n  return [start + offset, end + offset];\n};\n\nexport const getRenderBoundary: GetRenderBoundaryFn = (itemsCount, visibleBoundary, overscan) => {\n  let [start, end] = visibleBoundary;\n  start = Math.max(0, start - overscan);\n  end = Math.min(itemsCount - 1, end + overscan);\n\n  return [start, end];\n};\n\nexport const getColumnBoundaries: PureComputed<\n  [TableColumn[], number, number, GetColumnWidthFn], VisibleBoundary[]\n> = (columns, left, width, getColumnWidth) => (\n  getVisibleBoundaryWithFixed(\n    getColumnsRenderBoundary(\n      columns.length,\n      getVisibleBoundary(columns, left, width, getColumnWidth, 0),\n    ),\n    columns,\n  )\n);\nexport const getRowsVisibleBoundary: GetRowsVisibleBoundaryFn = (\n  rows, top, height, getRowHeight, offset, rowHeight, isDataRemote,\n) => {\n  const beforePosition = offset * rowHeight;\n  const noVisibleRowsLoaded = rowHeight > 0 &&\n    beforePosition + rows.length * rowHeight < top ||\n    top < beforePosition;\n\n  let boundaries;\n  if (isDataRemote && noVisibleRowsLoaded) {\n    const topIndex = Math.round(top / rowHeight);\n    boundaries = [topIndex, topIndex];\n  } else {\n    boundaries = getVisibleBoundary(rows, top, height, getRowHeight, offset, rowHeight);\n  }\n\n  return boundaries;\n};\n\nexport const getColumnsRenderBoundary: GetSpecificRenderBoundaryFn = (\n  columnCount, visibleBoundary,\n) => getRenderBoundary(columnCount, visibleBoundary, 1);\n\nexport const getRowsRenderBoundary: GetSpecificRenderBoundaryFn = (\n  rowsCount, visibleBoundary,\n) => getRenderBoundary(rowsCount, visibleBoundary, 3);\n\nexport const getSpanBoundary: GetSpanBoundaryFn = (\n  items, visibleBoundaries, getItemSpan,\n) => visibleBoundaries\n  .map((visibleBoundary) => {\n    const endIndex = Math.min(visibleBoundary[1], items.length - 1);\n    let end = endIndex;\n    let start = visibleBoundary[0] <= end ? visibleBoundary[0] : 0;\n\n    for (let index = 0; index <= endIndex; index += 1) {\n      const span = getItemSpan(items[index]);\n      if (index < visibleBoundary[0] && index + span > visibleBoundary[0]) {\n        start = index;\n      }\n      if (index + (span - 1) > visibleBoundary[1]) {\n        end = index + (span - 1);\n      }\n    }\n    return [start, end] as VisibleBoundary;\n  });\n\nexport const collapseBoundaries: CollapseBoundariesFn = (\n  itemsCount, visibleBoundaries, spanBoundaries,\n) => {\n  const breakpoints = new Set([0, itemsCount]);\n  spanBoundaries.forEach(rowBoundaries => rowBoundaries\n    .forEach((boundary) => {\n      breakpoints.add(boundary[0]);\n      // next interval starts after span end point\n      breakpoints.add(Math.min(boundary[1] + 1, itemsCount));\n    }));\n\n  visibleBoundaries\n    .filter(boundary => boundary.every(bound => 0 <= bound && bound < itemsCount))\n    .forEach((boundary) => {\n      for (let point = boundary[0]; point <= boundary[1]; point += 1) {\n        breakpoints.add(point);\n      }\n      if (boundary[1] + 1 < itemsCount) {\n        // close last visible point\n        breakpoints.add(boundary[1] + 1);\n      }\n    });\n\n  const bp = [...breakpoints].sort((a, b) => a - b);\n  const bounds: any[] = [];\n  for (let i = 0; i < bp.length - 1; i += 1) {\n    bounds.push([\n      bp[i],\n      bp[i + 1] - 1,\n    ]);\n  }\n\n  return bounds;\n};\n\nconst getColumnsSize: GetColumnsSizeFn = (columns, startIndex, endIndex, getColumnSize) => {\n  let size = 0;\n  for (let i = startIndex; i <= endIndex; i += 1) {\n    size += getColumnSize(columns[i], 0) || 0;\n  }\n  return size;\n};\n\nexport const getCollapsedColumns: GetCollapsedColumnsFn = (\n  columns, visibleBoundaries, boundaries, getColumnWidth,\n) => {\n  const collapsedColumns: CollapsedColumn[] = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundaries.reduce((acc, visibleBoundary) => (\n      acc || (visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1])\n    ), false);\n\n    if (isVisible) {\n      const column = columns[boundary[0]];\n      collapsedColumns.push({\n        ...column,\n        width: getColumnWidth(column) as number,\n      });\n    } else {\n      collapsedColumns.push({\n        key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n        type: TABLE_STUB_TYPE,\n        width: getColumnsSize(columns, boundary[0], boundary[1], getColumnWidth),\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedRows: GetCollapsedAndStubRowsFn = (\n  rows, visibleBoundary, boundaries, getRowHeight, getCells, offset,\n) => {\n  const collapsedRows: any[] = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    if (isVisible) {\n      const row = rows[boundary[0] - offset];\n      collapsedRows.push({\n        row,\n        cells: getCells(row),\n      });\n    } else {\n      const row = {} as any;\n      collapsedRows.push({\n        row: {\n          key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n          type: TABLE_STUB_TYPE,\n          height: getColumnsSize(rows, boundary[0], boundary[1], getRowHeight),\n        },\n        cells: getCells(row),\n      });\n    }\n  });\n  return collapsedRows;\n};\n\nexport const getCollapsedCells: GetCollapsedCellsFn = (\n  columns, spanBoundaries, boundaries, getColSpan,\n) => {\n  const collapsedCells: CollapsedCell[] = [];\n  let index = 0;\n  while (index < boundaries.length) {\n    const boundary = boundaries[index];\n    const isSpan = spanBoundaries.reduce((acc, spanBoundary) => (\n      acc || (spanBoundary[0] <= boundary[0] && boundary[1] <= spanBoundary[1])), false);\n    if (isSpan) {\n      const column = columns[boundary[0]];\n      const realColSpan = getColSpan(column);\n      if (realColSpan + index - 1 !== columns.length) {\n        const realColSpanEnd = (realColSpan + boundary[0]) - 1;\n        const colSpanEnd = boundaries.findIndex(\n          colSpanBoundary => colSpanBoundary[0]\n          <= realColSpanEnd && realColSpanEnd\n          <= colSpanBoundary[1],\n        );\n        collapsedCells.push({\n          column,\n          colSpan: (colSpanEnd - index) + 1,\n        });\n      } else {\n        collapsedCells.push({\n          column,\n          colSpan: realColSpan,\n        });\n      }\n      index += 1;\n    } else {\n      collapsedCells.push({\n        column: {\n          key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n          type: TABLE_STUB_TYPE,\n        },\n        colSpan: 1,\n      });\n      index += 1;\n    }\n  }\n  return collapsedCells;\n};\n\nexport const getCollapsedGrid: GetCollapsedGridFn = ({\n  rows,\n  columns,\n  rowsVisibleBoundary,\n  columnsVisibleBoundary,\n  getColumnWidth,\n  getRowHeight,\n  getColSpan,\n  totalRowCount,\n  offset,\n}) => {\n  if (!columns.length) {\n    return {\n      columns: [],\n      rows: [],\n    };\n  }\n\n  const boundaries = rowsVisibleBoundary || [0, rows.length - 1 || 1];\n\n  const getSpanBoundaryByRow = (row: TableRow) => getSpanBoundary(\n    columns,\n    columnsVisibleBoundary,\n    column => getColSpan(row, column),\n  );\n\n  const rowSpanBoundaries = rows\n    .slice(boundaries[0], boundaries[1] + 1)\n    .map(row => getSpanBoundaryByRow(row));\n  const columnBoundaries = collapseBoundaries(\n    columns.length,\n    columnsVisibleBoundary,\n    rowSpanBoundaries,\n  );\n\n  const rowBoundaries = collapseBoundaries(totalRowCount!, [boundaries], []);\n\n  return {\n    columns: getCollapsedColumns(\n      columns,\n      columnsVisibleBoundary,\n      columnBoundaries,\n      getColumnWidth,\n    ),\n    rows: getCollapsedRows(\n      rows,\n      boundaries,\n      rowBoundaries,\n      getRowHeight,\n      row => getCollapsedCells(\n        columns,\n        getSpanBoundaryByRow(row),\n        columnBoundaries,\n        column => getColSpan(row, column),\n      ),\n      offset,\n    ),\n  };\n};\n\nexport const getColumnWidthGetter: GetColumnWidthGetterFn = (\n  tableColumns, tableWidth, minColumnWidth,\n) => {\n  const colsHavingWidth = tableColumns.filter(col => typeof col.width === 'number');\n  const columnsWidth = colsHavingWidth.reduce((acc, col) => (acc + (col.width as number)!), 0);\n  const autoWidth = (tableWidth - columnsWidth) / (tableColumns.length - colsHavingWidth.length);\n  const autoColWidth = Math.max(autoWidth, minColumnWidth!);\n\n  return column => (column.type === TABLE_FLEX_TYPE\n    ? null\n    : typeof column.width === 'number' ? column.width : autoColWidth);\n};\n\nexport const getCollapsedGrids: GetCollapsedGridsFn = ({\n    headerRows = [],\n    bodyRows = [],\n    footerRows = [],\n    columns,\n    loadedRowsStart,\n    totalRowCount,\n    getCellColSpan,\n    viewport,\n    getRowHeight,\n    getColumnWidth,\n  },\n) => {\n  const getColSpan = (\n    tableRow: any, tableColumn: any,\n  ) => getCellColSpan!({ tableRow, tableColumn, tableColumns: columns });\n\n  const getCollapsedGridBlock: PureComputed<\n    [any[], any[]?, number?, number?], CollapsedGrid\n  > = (\n    rows, rowsVisibleBoundary, rowCount = rows.length, offset = 0,\n  ) => getCollapsedGrid({\n    rows,\n    columns,\n    rowsVisibleBoundary,\n    columnsVisibleBoundary: viewport.columns,\n    getColumnWidth,\n    getRowHeight,\n    getColSpan,\n    totalRowCount: rowCount,\n    offset,\n  });\n\n  const headerGrid = getCollapsedGridBlock(\n    headerRows, getRowsRenderBoundary(headerRows.length, viewport.headerRows),\n  );\n  const bodyGrid = getCollapsedGridBlock(\n    bodyRows,\n    adjustedRenderRowBounds(\n      viewport.rows, bodyRows.length, loadedRowsStart,\n    ),\n    totalRowCount || 1,\n    loadedRowsStart,\n  );\n\n  const footerGrid = getCollapsedGridBlock(\n    footerRows, getRowsRenderBoundary(footerRows.length, viewport.footerRows),\n  );\n\n  return {\n    headerGrid,\n    bodyGrid,\n    footerGrid,\n  };\n};\n\nconst adjustedRenderRowBounds: PureComputed<[VisibleBoundary, number, number], number[]> = (\n  visibleBounds, rowCount, loadedRowsStart,\n) => {\n  const renderRowBoundaries = getRowsRenderBoundary(\n    loadedRowsStart + rowCount, visibleBounds,\n  );\n  const adjustedInterval = intervalUtil.intersect(\n    { start: renderRowBoundaries[0], end: renderRowBoundaries[1] },\n    { start: loadedRowsStart, end: loadedRowsStart + rowCount },\n  );\n  return [adjustedInterval.start, adjustedInterval.end];\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_GROUP_TYPE } from './constants';\nimport { TableRow, TableColumn, IsSpecificCellFn, Grouping, GroupSummaryItem } from '../../types';\nimport { TABLE_STUB_TYPE } from '../../utils/virtual-table';\nimport { TABLE_DATA_TYPE, TABLE_FLEX_TYPE } from '../table/constants';\n\ntype IsGroupIndentCellFn = PureComputed<[TableRow, TableColumn, Grouping[]], boolean>;\n\nconst getGroupIndexByColumn: PureComputed<[Grouping[], TableColumn], number> = (\n  grouping, tableColumn,\n) => grouping.findIndex(\n  columnGrouping => !!tableColumn.column && columnGrouping.columnName === tableColumn.column.name,\n);\n\nconst isIndentCell: IsGroupIndentCellFn = (\n    tableRow,\n    tableColumn,\n    grouping,\n  ) => {\n  if (tableColumn.column && tableRow.row.groupedBy === tableColumn.column.name) return false;\n  const rowGroupIndex = grouping.findIndex(\n    columnGrouping => columnGrouping.columnName === tableRow.row.groupedBy,\n  );\n  const columnGroupIndex = getGroupIndexByColumn(grouping, tableColumn);\n\n  return columnGroupIndex < rowGroupIndex;\n};\n\nexport const isGroupTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => !!(tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableColumn.column\n  && tableColumn.column.name === tableRow.row.groupedBy);\n\nexport const isGroupIndentTableCell: IsGroupIndentCellFn = (\n  tableRow, tableColumn, grouping,\n) => (\n  tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE &&\n  isIndentCell(tableRow, tableColumn, grouping)\n);\n\nexport const isGroupIndentStubTableCell: IsGroupIndentCellFn = (\n  tableRow, tableColumn, grouping,\n) => (\n  (tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_STUB_TYPE &&\n    isIndentCell(tableRow, tableColumn, grouping))\n);\n\nexport const isGroupTableRow = (tableRow: TableRow) => tableRow.type === TABLE_GROUP_TYPE;\n\nexport const isGroupRowOrdinaryCell: IsSpecificCellFn = (tableRow, tableColumn) => (\n  isGroupTableRow(tableRow) && !isGroupTableCell(tableRow, tableColumn)\n);\n\nconst columnHasGroupRowSummary: PureComputed<[TableColumn, GroupSummaryItem[]], boolean> = (\n  tableColumn, groupSummaryItems,\n) => (\n  !!(groupSummaryItems && groupSummaryItems\n    .some(item => (\n      (!item.showInGroupFooter && item.alignByColumn)\n        && item.columnName === (tableColumn.column && tableColumn.column.name)\n    )))\n);\n\nexport const isRowSummaryCell: PureComputed<\n  [TableRow, TableColumn, Grouping[], GroupSummaryItem[]], boolean\n> = (\n  tableRow, tableColumn, grouping, groupSummaryItems,\n) => (\n  columnHasGroupRowSummary(tableColumn, groupSummaryItems)\n  && !isGroupIndentTableCell(tableRow, tableColumn, grouping)\n);\n\nexport const isPreviousCellContainSummary: PureComputed<\n  [TableRow, TableColumn, TableColumn[], Grouping[], GroupSummaryItem[]], boolean\n> = (\n  tableRow, tableColumn, tableColumns, grouping, groupSummaryItems,\n) => {\n  const columnIndex = tableColumns.indexOf(tableColumn);\n  return columnIndex > 0 && isRowSummaryCell(\n    tableRow, tableColumns[columnIndex - 1], grouping, groupSummaryItems,\n  );\n};\n\nexport const calculateGroupCellIndent: PureComputed<[TableColumn, Grouping[], number], number> = (\n  tableColumn, grouping, indentWidth,\n) => (\n  indentWidth * getGroupIndexByColumn(grouping, tableColumn)\n);\n\nexport const sortAndSpliceColumns: PureComputed<[TableColumn[], number]> = (\n  tableColumns, firstVisibleColumnIndex,\n) => {\n  const groupColumns = tableColumns.filter(col => col.type === TABLE_GROUP_TYPE);\n  const dataColumns = tableColumns.filter(col => col.type === TABLE_DATA_TYPE);\n  const otherColumns = tableColumns.filter(\n    col =>\n      col.type !== TABLE_DATA_TYPE &&\n      col.type !== TABLE_GROUP_TYPE &&\n      col.type !== TABLE_FLEX_TYPE,\n  );\n\n  if (firstVisibleColumnIndex) {\n    const firstGroupIndex = tableColumns.indexOf(groupColumns[0]);\n    otherColumns.splice(0, Math.min(firstVisibleColumnIndex, firstGroupIndex));\n  }\n\n  return [...groupColumns, ...otherColumns, ...dataColumns];\n};\n", "import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_GROUP_TYPE } from './constants';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  TableColumn, TableRow, IsSpecificRowFn,\n  TableColumnsWithDraftGroupingFn,\n  TableColumnsWithGroupingFn,\n  GroupCellColSpanGetter,\n  GroupSummaryChainsFn,\n  SummaryItem,\n} from '../../types';\nimport { sortAndSpliceColumns } from './helpers';\n\nconst tableColumnsWithDraftGrouping: TableColumnsWithDraftGroupingFn = (\n  tableColumns, grouping, draftGrouping, showColumnWhenGrouped,\n) => tableColumns\n  .reduce((acc, tableColumn) => {\n    if (tableColumn.type !== TABLE_DATA_TYPE) {\n      acc.push(tableColumn);\n      return acc;\n    }\n\n    const columnName = tableColumn.column && tableColumn.column.name || '';\n    const columnGroupingExists = grouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n    const columnDraftGroupingExists = draftGrouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n\n    if ((!columnGroupingExists && !columnDraftGroupingExists)\n        || showColumnWhenGrouped(columnName)) {\n      acc.push(tableColumn);\n    } else if ((!columnGroupingExists && columnDraftGroupingExists)\n        || (columnGroupingExists && !columnDraftGroupingExists)) {\n      acc.push({\n        ...tableColumn,\n        draft: true,\n      });\n    }\n    return acc;\n  // tslint:disable-next-line: prefer-array-literal\n  }, [] as Array<TableColumn & { draft?: boolean }>);\n\nexport const tableColumnsWithGrouping: TableColumnsWithGroupingFn = (\n  columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGrouped,\n) => [\n  ...grouping.map((columnGrouping) => {\n    const groupedColumn = columns.find(column => column.name === columnGrouping.columnName);\n    return {\n      key: `${TABLE_GROUP_TYPE.toString()}_${groupedColumn!.name}`,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth,\n    };\n  }),\n  ...tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped),\n];\n\nexport const tableRowsWithGrouping: PureComputed<[TableRow[], IsSpecificRowFn]> = (\n  tableRows, isGroupRow,\n) => tableRows.map((tableRow) => {\n  if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n    return tableRow;\n  }\n  return {\n    ...tableRow,\n    key: `${TABLE_GROUP_TYPE.toString()}_${tableRow.row.compoundKey}`,\n    type: TABLE_GROUP_TYPE,\n  };\n});\n\nconst isRowLevelSummary: PureComputed<[SummaryItem[], string], boolean> = (\n  groupSummaryItems, colName,\n) => (\n  groupSummaryItems.some((item: any) => (\n    !item.showInGroupFooter && item.alignByColumn && item.columnName === colName),\n  )\n);\n\nconst groupSummaryChains: GroupSummaryChainsFn = (\n  tableRow,\n  tableColumns,\n  groupSummaryItems,\n  firstVisibleColumnIndex,\n) => {\n  let captionStarted = false;\n  return sortAndSpliceColumns(tableColumns, firstVisibleColumnIndex)\n    .reduce((acc, col) => {\n      const colName = (col.column && col.column.name) as string;\n      const colKey = col.key;\n      const isStartOfGroupCaption = col.type === TABLE_GROUP_TYPE\n        && tableRow.row.groupedBy === colName;\n      const isIndentColumn = col.type === TABLE_GROUP_TYPE\n        && tableRow.row.groupedBy !== colName && !captionStarted;\n\n      if (isStartOfGroupCaption) {\n        captionStarted = true;\n      }\n\n      if (isStartOfGroupCaption || isIndentColumn) {\n        acc.push([colKey]);\n      } else if (groupSummaryItems && isRowLevelSummary(groupSummaryItems, colName)) {\n        acc.push([colKey]);\n        acc.push([]);\n      } else {\n        acc[acc.length - 1].push(colKey);\n      }\n      return acc;\n    }, [[]] as string[][]);\n};\n\nexport const tableGroupCellColSpanGetter: GroupCellColSpanGetter = (\n  getTableCellColSpan, groupSummaryItems, firstVisibleColumnIndex,\n) => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n\n  if (tableRow.type === TABLE_GROUP_TYPE) {\n    const colKey = tableColumn.key;\n    const chains = groupSummaryChains(\n      tableRow, tableColumns, groupSummaryItems, firstVisibleColumnIndex,\n    );\n    const chain = chains.find(ch => ch[0] === colKey);\n\n    if (chain) {\n      return chain.length;\n    }\n  }\n  return getTableCellColSpan(params);\n};\n", "import { TABLE_HEADING_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  IsSpecificCellFn, IsSpecificRowFn, HeaderColumnChain,\n  SplitHeaderColumnChainsFn, FindChainByColumnIndexFn,\n  GenerateChainsFn,\n  NextColumnNameFn,\n  GetNextColumnNameFn,\n} from '../../types';\n\nexport const isHeadingTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isHeadingTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_HEADING_TYPE\n);\n\nexport const findChainByColumnIndex: FindChainByColumnIndexFn = (chains, columnIndex) => (\n  chains.find(chain => (\n    chain.start <= columnIndex && columnIndex < chain.start + chain.columns.length\n  ))!\n);\n\nexport const splitHeaderColumnChains: SplitHeaderColumnChainsFn = (\n  tableColumnChains, tableColumns, shouldSplitChain, extendChainProps,\n) => (\n  tableColumnChains.map((row, rowIndex) => row\n    .reduce((acc, chain) => {\n      let currentChain: any = null;\n      chain.columns.forEach((col) => {\n        const column = tableColumns.find(c => c.key === col.key);\n        const isNewGroup = shouldSplitChain(currentChain, column!, rowIndex);\n\n        if (isNewGroup) {\n          const start = currentChain\n            ? (currentChain.start + currentChain.columns.length)\n            : chain.start;\n\n          acc.push({\n            ...chain,\n            ...extendChainProps(column!),\n            start,\n            columns: [],\n          });\n          currentChain = acc[acc.length - 1];\n        }\n\n        currentChain.columns.push(column);\n      });\n\n      return acc;\n    }, [] as HeaderColumnChain[]))\n);\n\nexport const generateSimpleChains: GenerateChainsFn = (rows, columns) => (\n  rows.map(() => ([{\n    columns,\n    start: 0,\n  }]))\n);\n\nconst nextColumnName: NextColumnNameFn = (tableColumns , index) => {\n  const isNextColumnHasName = index < tableColumns.length - 1 && tableColumns[index + 1].column;\n  return isNextColumnHasName\n    ? tableColumns[index + 1].column!.name\n    : undefined;\n};\n\nexport const getNextColumnName: GetNextColumnNameFn = (tableColumns, columnName) => {\n  const index = tableColumns.findIndex(elem =>\n    elem.column && elem.column.name === columnName,\n  );\n  return index >= 0\n    ? nextColumnName(tableColumns, index)\n    : undefined;\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_HEADING_TYPE } from './constants';\nimport { TableRow } from '../../types';\n\nexport const tableRowsWithHeading: PureComputed<[TableRow[]]> = headerRows => [\n  { key: TABLE_HEADING_TYPE.toString(), type: TABLE_HEADING_TYPE },\n  ...headerRows];\n", "export const TABLE_BAND_TYPE = Symbol('band');\nexport const BAND_GROUP_CELL = 'bandGroupCell';\nexport const BAND_HEADER_CELL = 'bandHeaderCell';\nexport const BAND_EMPTY_CELL = 'bandEmptyCell';\nexport const BAND_DUPLICATE_RENDER = 'bandDuplicateRender';\nexport const BAND_FILL_LEVEL_CELL = 'bandFillLevelCell';\n", "import {\n  TABLE_BAND_TYPE, BAND_GROUP_CELL, BAND_HEADER_CELL, BAND_EMPTY_CELL,\n  BAND_DUPLICATE_RENDER, BAND_FILL_LEVEL_CELL,\n} from './constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { findChainByColumnIndex } from '../table-header-row/helpers';\nimport {\n  IsSpecificRowFn, GetColumnBandMetaFn, GetBandComponentFn, CalculateBandFn,\n} from '../../types';\nimport { TABLE_STUB_TYPE } from '../../utils/virtual-table';\n\nexport const isBandedTableRow: IsSpecificRowFn = tableRow => (tableRow.type === TABLE_BAND_TYPE);\nexport const isBandedOrHeaderRow: IsSpecificRowFn = tableRow => isBandedTableRow(tableRow)\n  || tableRow.type === TABLE_HEADING_TYPE;\nexport const isNoDataColumn = (columnType: symbol) => columnType !== TABLE_DATA_TYPE;\n\nexport const getColumnMeta: GetColumnBandMetaFn = (\n  columnName, bands, tableRowLevel, key = '',\n  level = 0, title = null, result = null,\n) => bands.reduce((acc, band) => {\n  if (band.columnName === columnName) {\n    return { ...acc, title, level, key };\n  }\n  if (band.children !== undefined) {\n    const rowLevelPassed = level > tableRowLevel;\n    const bandTitle = rowLevelPassed ? title : band.title;\n    const bandKey = rowLevelPassed ? key : `${key}_${bandTitle}`;\n\n    return getColumnMeta(\n      columnName,\n      band.children,\n      tableRowLevel,\n      bandKey,\n      level + 1,\n      bandTitle,\n      acc,\n    );\n  }\n  return acc;\n}, result || { level, title, key: title });\n\nexport const calculateBand: CalculateBandFn = (visibleBound, headerChain) => {\n  if (visibleBound) {\n    const bandStart = Math.max(visibleBound[0], headerChain.start);\n\n    const bandEnd = Math.min(\n      visibleBound[1] + 1,\n      headerChain.start + headerChain.columns.length,\n    );\n\n    return [bandStart, bandEnd];\n  }\n\n  return [headerChain.start, headerChain.start + headerChain.columns.length];\n};\n\nexport const getBandComponent: GetBandComponentFn = (\n  { tableColumn: currentTableColumn, tableRow, rowSpan },\n  tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains,\n  columnVisibleIntervals, bandLevelsVisibility,\n) => {\n  if (rowSpan) return { type: BAND_DUPLICATE_RENDER, payload: null };\n\n  const maxLevel = tableHeaderRows.filter(column => column.type === TABLE_BAND_TYPE).length + 1;\n  const { level } = tableRow;\n  const currentRowLevel = level === undefined\n    ? maxLevel - 1 : level;\n  const currentColumnMeta = currentTableColumn.type === TABLE_DATA_TYPE\n    ? getColumnMeta(currentTableColumn.column!.name, columnBands, currentRowLevel)\n    : { level: 0, title: '' };\n\n  const currentColumnIndex = tableColumns\n    .findIndex(column => column.key === currentTableColumn.key);\n\n  const levelsCount = bandLevelsVisibility.length;\n  const visibleLevelsCount = bandLevelsVisibility.filter(Boolean).length;\n\n  if (currentColumnMeta.level < currentRowLevel) {\n    const shouldFillLevel = currentRowLevel > 0 && visibleLevelsCount < levelsCount\n      && !bandLevelsVisibility[currentRowLevel] && currentTableColumn.type === TABLE_STUB_TYPE;\n\n    if (shouldFillLevel) {\n      return { type: BAND_FILL_LEVEL_CELL, payload: null };\n    }\n    return { type: BAND_EMPTY_CELL, payload: null };\n  }\n\n  const previousTableColumn = tableColumns[currentColumnIndex - 1];\n  let beforeBorder = false;\n  if (currentColumnIndex > 0 && currentTableColumn.type === TABLE_DATA_TYPE\n    && isNoDataColumn(previousTableColumn.type)) {\n    beforeBorder = true;\n  }\n\n  const isStubColumn = currentTableColumn.type === TABLE_STUB_TYPE;\n  const isColumnVisible = currentColumnIndex >= 0;\n\n  if (currentColumnMeta.level === currentRowLevel) {\n    if (isStubColumn) {\n      const cellRowSpan = visibleLevelsCount < levelsCount\n        ? visibleLevelsCount || 1\n        : maxLevel;\n\n      return {\n        type: BAND_FILL_LEVEL_CELL,\n        payload: {\n          rowSpan: cellRowSpan,\n        },\n      };\n    }\n\n    if (isColumnVisible) {\n      return {\n        type: BAND_HEADER_CELL,\n        payload: {\n          tableRow: tableHeaderRows.find(row => row.type === TABLE_HEADING_TYPE),\n          rowSpan: maxLevel - currentRowLevel,\n          ...beforeBorder && { beforeBorder },\n        },\n      };\n    }\n  }\n\n  if (!isColumnVisible) return { type: BAND_EMPTY_CELL, payload: null };\n\n  const currentColumnChain = findChainByColumnIndex(\n    tableHeaderColumnChains[currentRowLevel],\n    currentColumnIndex,\n  );\n  const columnVisibleBoundary = columnVisibleIntervals.find(([start, end]) => (\n    start <= currentColumnIndex && currentColumnIndex <= end\n  ));\n\n  const [bandStart, bandEnd] = calculateBand(columnVisibleBoundary, currentColumnChain);\n\n  if (bandStart < currentColumnIndex) {\n    return { type: null, payload: null };\n  }\n\n  return {\n    type: BAND_GROUP_CELL,\n    payload: {\n      colSpan: bandEnd - bandStart,\n      value: currentColumnMeta.title!,\n      column: currentColumnMeta,\n      ...beforeBorder && { beforeBorder },\n    },\n  };\n};\n", "import { intervalUtil } from './utils';\nimport {\n  VirtualRows, Row, MergeRowsFn, CalculateRequestedRangeFn,\n  Interval, GridViewport, GetRequestMeta, CorrectRangeFn,\n} from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const emptyVirtualRows: VirtualRows = {\n  skip: Number.POSITIVE_INFINITY,\n  rows: [],\n};\n\nconst pluckSubarray: PureComputed<[Row[], ...number[]]> = (source, sourceStart, left, right) => (\n  source.slice(left - sourceStart, right - sourceStart)\n);\n\nexport const mergeRows: MergeRowsFn = (\n  rowsInterval, cacheInterval, rows, cacheRows, rowsStart, cacheStart,\n) => {\n  const breakpoints = [\n    rowsInterval.start, rowsInterval.end,\n    cacheInterval.start, cacheInterval.end,\n  ]\n    .filter(i => 0 <= i && i < Number.POSITIVE_INFINITY)\n    .sort((a, b) => a - b);\n\n  let result: Row[] = [];\n  if (breakpoints.length > 1) {\n    for (let i = 0; i < breakpoints.length - 1; i += 1) {\n      const left = breakpoints[i];\n      const right = breakpoints[i + 1];\n      const chunk = rowsInterval.start <= left && right <= rowsInterval.end\n        ? pluckSubarray(rows, rowsStart, left, right) // rows have higher priority\n        : pluckSubarray(cacheRows, cacheStart, left, right);\n\n      result = result.concat(chunk);\n    }\n  }\n\n  return {\n    skip: breakpoints[0],\n    rows: result,\n  };\n};\n\nconst correctRequestedRange: CorrectRangeFn = (calculatedRange, referenceIndex, pageSize) => {\n  const { start, end } = calculatedRange;\n\n  if (start - referenceIndex > pageSize / 2) {\n    return { start: start - pageSize, end: start };\n  }\n  return { start, end };\n};\n\nexport const calculateRequestedRange: CalculateRequestedRangeFn = (\n  virtualRows, newRange, pageSize, referenceIndex, isInfiniteScroll,\n) => {\n  const loadedInterval = intervalUtil.getRowsInterval(virtualRows);\n  const isAdjacentPage = Math.abs(loadedInterval.start - newRange.start) < 2 * pageSize;\n  if (isAdjacentPage) {\n    const calculatedRange = intervalUtil.difference(newRange, loadedInterval);\n    if (isInfiniteScroll && calculatedRange !== intervalUtil.empty) {\n      return correctRequestedRange(calculatedRange, referenceIndex, pageSize);\n    }\n    return calculatedRange;\n  }\n\n  // load 3 pages at once because a missing page will be loaded anyway\n  return newRange;\n};\n\nexport const rowToPageIndex: PureComputed<[number, number]> = (\n  rowIndex, pageSize,\n) => Math.floor(rowIndex / pageSize);\n\nexport const recalculateBounds: PureComputed<[number, number, number], Interval> = (\n  middleIndex, pageSize, totalCount,\n) => {\n  const currentPageIndex = rowToPageIndex(middleIndex, pageSize);\n\n  const prevPageIndex = currentPageIndex - 1;\n  const nextPageIndex = currentPageIndex + 2;\n  const start = Math.max(0, prevPageIndex * pageSize);\n  const end = Math.min(nextPageIndex * pageSize, totalCount);\n\n  return {\n    start,\n    end,\n  };\n};\n\nexport const trimRowsToInterval: PureComputed<[VirtualRows, Interval]> = (\n  virtualRows, targetInterval,\n) => {\n  const rowsInterval = intervalUtil.getRowsInterval(virtualRows);\n  const intersection = intervalUtil.intersect(rowsInterval, targetInterval);\n  if (intervalUtil.empty === intersection) {\n    return emptyVirtualRows;\n  }\n\n  const rows = pluckSubarray(\n    virtualRows.rows, virtualRows.skip, intersection.start, intersection.end,\n  );\n\n  return {\n    rows,\n    skip: intersection.start,\n  };\n};\n\nexport const getAvailableRowCount: PureComputed<[boolean, number, number, number], number> = (\n  isInfiniteScroll, newRowCount, lastRowCount, totalRowCount,\n) => {\n  return (isInfiniteScroll\n    ? Math.min(\n        Math.max(newRowCount, lastRowCount),\n        totalRowCount)\n    : totalRowCount\n  );\n};\n\nexport const getForceReloadInterval: PureComputed<[VirtualRows, number, number], Interval> = (\n  virtualRows, pageSize, totalRowCount,\n) => {\n  const { start, end: intervalEnd } = intervalUtil.getRowsInterval(virtualRows);\n  const end = Math.min(\n    Math.max(start + pageSize * 2, intervalEnd),\n    Math.max(start + pageSize * 2, totalRowCount),\n  );\n  return {\n    start,\n    end,\n  };\n};\n\nexport const getRequestMeta: GetRequestMeta = (\n  referenceIndex, virtualRows, pageSize, totalRowCount, forceReload, isInfiniteScroll,\n) => {\n  const actualBounds = forceReload\n    ? getForceReloadInterval(virtualRows, pageSize!, totalRowCount)\n    : recalculateBounds(referenceIndex, pageSize!, totalRowCount);\n  const requestedRange = forceReload\n    ? actualBounds\n    : calculateRequestedRange(\n        virtualRows, actualBounds, pageSize!, referenceIndex, isInfiniteScroll,\n      );\n\n  return { requestedRange, actualBounds };\n};\n\nexport const needFetchMorePages: PureComputed<[VirtualRows, number, number], boolean> = (\n  virtualRows, referenceIndex,  pageSize,\n) => {\n  const { start, end } = intervalUtil.getRowsInterval(virtualRows);\n  const loadCount = end - start;\n  const topTriggerIndex = start > 0 ? start + pageSize : 0;\n  const bottomTriggerIndex = Math.max(topTriggerIndex + pageSize, end - pageSize * 1.5);\n\n  if (loadCount <= 0) {\n    return false;\n  }\n\n  return (referenceIndex < topTriggerIndex || bottomTriggerIndex < referenceIndex);\n};\n\nexport const getReferenceIndex: PureComputed<[GridViewport], number> = (\n  { rows: [top, bottom] },\n) => (\n  (top + bottom) / 2\n);\n\nexport const shouldSendRequest: PureComputed<[Interval, number, number], boolean> = (\n  { start, end }, requestedPageIndex, requestedEndIndex,\n) => {\n  const loadCount = (end - start);\n  return (start !== requestedPageIndex || end !== requestedEndIndex) && loadCount > 0;\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { emptyVirtualRows } from './helpers';\nimport { Interval, VirtualRows } from '../../types';\n\nconst empty: Interval = {\n  start: Number.POSITIVE_INFINITY,\n  end: Number.NEGATIVE_INFINITY,\n};\n\nconst getRowsInterval: PureComputed<[VirtualRows], Interval> = r => (\n  r === emptyVirtualRows\n    ? empty\n    : {\n      start: r.skip,\n      end: r.skip + r.rows.length,\n    }\n);\n\nconst getLength = (a: Interval) => a.end - a.start;\n\nconst intersect = (a: Interval, b: Interval) => {\n  if (a.end < b.start || b.end < a.start) {\n    return empty;\n  }\n\n  return {\n    start: Math.max(a.start, b.start),\n    end: Math.min(a.end, b.end),\n  };\n};\n\nconst difference = (a: Interval, b: Interval) => {\n  if (empty === intervalUtil.intersect(a, b)) {\n    return a;\n  }\n\n  if (b.end < a.end) {\n    return {\n      start: b.end,\n      end: a.end,\n    };\n  }\n  if (a.start < b.start) {\n    return {\n      start: a.start,\n      end: b.start,\n    };\n  }\n  return empty;\n};\n\nexport const intervalUtil = {\n  empty,\n\n  getRowsInterval,\n  getLength,\n\n  intersect,\n  difference,\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_BAND_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { getColumnMeta } from './helpers';\nimport { splitHeaderColumnChains, generateSimpleChains } from '../table-header-row/helpers';\nimport {\n  ColumnBands, GetHeaderColumnChainsFn, ShouldSplitChainFn,\n  GetMaxNestedLevelFn, TableRow, TableColumn, HeaderColumnChainRows,\n  BandLevels, BandColumnChainExtension, HeaderColumnChain, VisibleBoundary, GridViewport,\n} from '../../types';\nimport { intervalUtil } from '../virtual-table-state/utils';\n\nexport const tableRowsWithBands: PureComputed<\n  [TableRow[], ColumnBands[], TableColumn[]]\n> = (\n  tableHeaderRows, columnBands, tableColumns,\n) => {\n  const tableDataColumns = tableColumns.filter(column => column.type === TABLE_DATA_TYPE);\n  const getMaxNestedLevel: GetMaxNestedLevelFn = (bands, level = 0, result = null) => (\n    bands.reduce((acc, column) => {\n      if (column.children !== undefined) {\n        return getMaxNestedLevel(column.children, level + 1, acc);\n      }\n      const isDataColumn = tableDataColumns.findIndex(\n        dataColumn => !!dataColumn.column && dataColumn.column.name === column.columnName,\n      ) > -1;\n      if (level > acc.level && isDataColumn) {\n        return { ...acc, level };\n      }\n      return acc;\n    }, result || { level: 0 })\n  );\n\n  const tableBandHeaders = Array.from({\n    length: getMaxNestedLevel(columnBands as ColumnBands[], 0).level,\n  })\n    .map((row, index) => ({\n      key: `${TABLE_BAND_TYPE.toString()}_${index}`,\n      type: TABLE_BAND_TYPE,\n      level: index,\n    }));\n  return [...tableBandHeaders, ...tableHeaderRows];\n};\n\nexport const tableHeaderColumnChainsWithBands: GetHeaderColumnChainsFn<\n  TableRow[], TableColumn[], ColumnBands[]\n> = (\n  tableHeaderRows, tableColumns, bands,\n) => {\n  const chains = generateSimpleChains(tableHeaderRows, tableColumns);\n  const maxBandRowIndex = tableHeaderRows\n    .filter(row => row.type === TABLE_BAND_TYPE)\n    .length;\n  const rawBandChains = chains.slice(0, maxBandRowIndex);\n\n  let currentBand: any = null;\n  const shouldSplitChain: ShouldSplitChainFn = (chain, column, rowIndex) => {\n    if (rowIndex > maxBandRowIndex) return false;\n\n    const columnName = column.column && column.column.name || '';\n    currentBand = getColumnMeta(columnName, bands, rowIndex);\n    return !chain\n      || (chain as any).key !== currentBand.key;\n  };\n  const extendChainProps = () => ({\n    bandTitle: currentBand?.title,\n    key: currentBand?.key,\n  });\n\n  const bandChains = splitHeaderColumnChains(\n    rawBandChains,\n    tableColumns,\n    shouldSplitChain,\n    extendChainProps,\n  );\n\n  return [...bandChains, ...chains.slice(maxBandRowIndex)];\n};\n\nconst getBandLevel: PureComputed<[ColumnBands[], string, number?], number> = (\n  bands, bandTitle, level = 0,\n) => {\n  for (const band of bands) {\n    if (band.title === bandTitle) {\n      return level;\n    }\n    if (band.children !== undefined) {\n      const result = getBandLevel(band.children, bandTitle, level + 1);\n      if (result >= 0) return result;\n    }\n  }\n  return -1;\n};\n\nconst getBandLevels = (columnsBands: readonly ColumnBands[], levels = {}, level = 0) => {\n  columnsBands.forEach((band) => {\n    if (band.title) {\n      levels[band.title] = level;\n    }\n    if (band.children) {\n      getBandLevels(band.children, levels, level + 1);\n    }\n  });\n  return levels;\n};\n\nexport const columnBandLevels: PureComputed<[ColumnBands[]], BandLevels> = columnsBands => (\n  getBandLevels(columnsBands)\n);\n\nexport const bandLevelsVisibility: PureComputed<\n  [VisibleBoundary[], HeaderColumnChainRows<BandColumnChainExtension>, BandLevels],\n  boolean[]\n> = (columnIntervals, tableHeaderColumnChains, bandLevels) => {\n  const rowsWithBands = tableHeaderColumnChains\n    .filter(r => r.filter(ch => !!ch.bandTitle).length);\n\n  const visibleIntervals = columnIntervals.map(([start, end]) => ({ start, end }));\n\n  const isBandChainVisible = (chain: HeaderColumnChain) => (\n    visibleIntervals.some(interval => (\n      intervalUtil.intersect(\n        interval,\n        { start: chain.start, end: chain.start + chain.columns.length - 1 },\n      ) !== intervalUtil.empty\n    ),\n  ));\n\n  const getVisibleBandsByLevel = (level: number) => (\n    // Note: a visible band level always matches with it's row\n    rowsWithBands[level]\n    ? rowsWithBands[level].filter(chain => (\n        bandLevels[chain.bandTitle] === level && isBandChainVisible(chain)\n      ))\n    : []\n  );\n\n  return rowsWithBands.reduce((acc, _, index) => {\n    const rowBands = getVisibleBandsByLevel(index);\n    return [...acc, !!rowBands.length];\n  }, [] as boolean[]);\n};\n\nexport const columnVisibleIntervals: PureComputed<\n  [GridViewport, TableColumn[]],\n  VisibleBoundary[]\n> = (\n  viewport, tableColumns,\n) => (\n  viewport ? viewport.columns : [[0, tableColumns.length]]\n);\n", "import { toggle } from '../../utils/common-reducers';\nimport { ToggleRowFieldReducer } from '../../types';\n\nexport const toggleDetailRowExpanded: ToggleRowFieldReducer = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n", "export const TABLE_DETAIL_TYPE = Symbol('detail');\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { IsSpecificCellFn, IsSpecificRowFn, TableColumn, RowId } from '../../types';\n\nexport const isDetailRowExpanded: PureComputed<[RowId[], RowId], boolean> = (\n  expandedDetailRowIds, rowId,\n) => expandedDetailRowIds.indexOf(rowId) > -1;\n\nexport const isDetailToggleTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\n\nexport const isDetailTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_DETAIL_TYPE;\n\nexport const isDetailTableCell: PureComputed<[TableColumn, TableColumn[]], boolean> = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn) === 0;\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableRow, TableColumn, CellColSpanGetter } from '../../types';\n\nexport const tableRowsWithExpandedDetail: PureComputed<[TableRow[], number[], number]> = (\n  tableRows, expandedDetailRowIds, rowHeight,\n) => {\n  let result = tableRows;\n  expandedDetailRowIds\n    .forEach((expandedRowId) => {\n      const rowIndex = result.findIndex(\n        tableRow => tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId,\n      );\n      if (rowIndex === -1) return;\n      const insertIndex = rowIndex + 1;\n      const { row, rowId } = result[rowIndex];\n      result = [\n        ...result.slice(0, insertIndex),\n        {\n          rowId,\n          row,\n          key: `${TABLE_DETAIL_TYPE.toString()}_${rowId}`,\n          type: TABLE_DETAIL_TYPE,\n          height: rowHeight,\n        },\n        ...result.slice(insertIndex),\n      ];\n    });\n  return result;\n};\n\nexport const tableColumnsWithDetail: PureComputed<[TableColumn[], number]> = (\n  tableColumns, toggleColumnWidth,\n) => [\n  { key: TABLE_DETAIL_TYPE.toString(), type: TABLE_DETAIL_TYPE, width: toggleColumnWidth },\n  ...tableColumns,\n];\n\nexport const tableDetailCellColSpanGetter: CellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_DETAIL_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return getTableCellColSpan(params);\n};\n", "export const TABLE_SELECT_TYPE = Symbol('select');\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_SELECT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { IsSpecificCellFn, TableRow } from '../../types';\n\nexport const isSelectTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isSelectAllTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n\nexport const isRowHighlighted: PureComputed<[boolean, any[], TableRow, any[]?], boolean> = (\n  highlightRow, selection, tableRow, focused,\n) => {\n  const highlightion = selection ? selection.concat(focused || []) : focused;\n  return !!(highlightRow && highlightion && highlightion.includes(tableRow.rowId));\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_SELECT_TYPE } from './constants';\nimport { TableColumn } from '../../types';\n\nexport const tableColumnsWithSelection: PureComputed<[TableColumn[], number, boolean|undefined]> = (\n  tableColumns, selectionColumnWidth, showSelectionColumn,\n) => {\n  if (showSelectionColumn) {\n    return [\n      { key: TABLE_SELECT_TYPE.toString(), type: TABLE_SELECT_TYPE, width: selectionColumnWidth },\n      ...tableColumns,\n    ];\n  }\n  return tableColumns;\n};\n", "import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport {\n  IsSpecificCellFn, IsSpecificRowFn, TableRow, TableColumn, CheckColumnExtensionsFn,\n} from '../../types';\nimport { TABLE_STUB_TYPE } from '../../utils/virtual-table';\nimport { isValidValue } from '../table-column-resizing/helpers';\n\nconst VALID_UNITS = ['px', '%', 'em', 'rem', 'vm', 'vh', 'vmin', 'vmax', ''];\nconst TABLE_ERROR = 'The columnExtension property of the Table plugin is given an invalid value.';\n\nexport const isDataTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isHeaderStubTableCell: IsSpecificCellFn<TableRow, TableRow[]> = (\n  tableRow, headerRows,\n) => headerRows.indexOf(tableRow) > -1;\nexport const isDataTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_DATA_TYPE;\nexport const isNoDataTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_NODATA_TYPE;\nexport const isNoDataTableCell: IsSpecificCellFn<TableColumn, TableColumn[]> = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn as any) === 0;\nexport const isStubTableCell: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_STUB_TYPE\n);\n\nexport const checkTableColumnExtensions: CheckColumnExtensionsFn = (columnExtensions) => {\n  if (columnExtensions) {\n    columnExtensions.map((column) => {\n      const { width } = column;\n      if (typeof width === 'string') {\n        if (!isValidValue(width, VALID_UNITS)) {\n          throw new Error(TABLE_ERROR);\n        }\n      }\n    });\n  }\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport {\n  GridColumnExtension, GetColumnExtensionValueGetterFn,\n} from '../types';\n\nexport const getColumnExtension: PureComputed<\n  [GridColumnExtension[] | undefined, string], GridColumnExtension\n> = (columnExtensions, columnName) => {\n  if (!columnExtensions) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {} as GridColumnExtension;\n  }\n  const columnExtension = columnExtensions.find(extension => extension.columnName === columnName);\n  if (!columnExtension) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {} as GridColumnExtension;\n  }\n  return columnExtension;\n};\n\nexport const getColumnExtensionValueGetter: GetColumnExtensionValueGetterFn = (\n  columnExtensions, extensionName, defaultValue,\n) => (columnName) => {\n  if (columnExtensions) {\n    const columnExtension = getColumnExtension(columnExtensions, columnName);\n    const extensionValue = columnExtension[extensionName];\n    return extensionValue !== undefined ? extensionValue : defaultValue;\n  }\n  return defaultValue;\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport { getColumnExtension } from '../../utils/column-extension';\nimport { GridColumnExtension, GetCellColSpanFn } from './../../types/table.types';\nimport { Row, GetRowIdFn } from '../../types';\nimport { convertWidth } from '../table-column-resizing/helpers';\n\nexport const tableColumnsWithDataRows: PureComputed<[any[], GridColumnExtension[]]> = (\n  columns, columnExtensions,\n) => columns.map((column) => {\n  const { name } = column;\n  const columnExtension = getColumnExtension(columnExtensions as GridColumnExtension[], name);\n  const width = convertWidth(columnExtension.width!);\n  return {\n    column,\n    key: `${TABLE_DATA_TYPE.toString()}_${name}`,\n    type: TABLE_DATA_TYPE,\n    width,\n    align: columnExtension.align,\n    wordWrapEnabled: columnExtension.wordWrapEnabled,\n  };\n});\n\nexport const tableRowsWithDataRows: PureComputed<[Row[], GetRowIdFn, number]> = (\n  rows, getRowId, isRemoteRowsLoading,\n) => (\n  !rows.length && !isRemoteRowsLoading\n    ? [{ key: TABLE_NODATA_TYPE.toString(), type: TABLE_NODATA_TYPE }]\n    : rows.map((row, dataIndex) => {\n      const rowId = getRowId(row);\n      return {\n        row,\n        // dataIndex,\n        rowId,\n        type: TABLE_DATA_TYPE,\n        key: `${TABLE_DATA_TYPE.toString()}_${rowId}`,\n      };\n    }));\n\nexport const tableCellColSpanGetter: GetCellColSpanFn = (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_NODATA_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return 1;\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableColumn } from '../../types';\n\nexport const visibleTableColumns: PureComputed<[TableColumn[], string[]]> = (\n  tableColumns = [], hiddenColumnNames,\n) => tableColumns.filter(tableColumn => tableColumn.type !== TABLE_DATA_TYPE\n    || hiddenColumnNames.indexOf(tableColumn.column!.name) === -1);\n", "import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableColumn } from '../../types';\n\nexport const tableDataColumnsExist = (tableColumns: TableColumn[]) => tableColumns.some(\n  column => column.type === TABLE_DATA_TYPE,\n);\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { Column } from '../../types/grid-core.types';\nimport { ColumnChooserItem } from '../../types';\n\nexport const columnChooserItems: PureComputed<[Column[], string[]], ColumnChooserItem[]> = (\n  columns, hiddenColumnNames,\n) => columns.map(column => ({\n  column,\n  hidden: hiddenColumnNames.indexOf(column.name) !== -1,\n}));\n", "import { PureReducer } from '@devexpress/dx-core';\n\nexport const toggleColumn: PureReducer<string[], string> = (\n  hiddenColumnNames, columnName,\n) => (\n  hiddenColumnNames.indexOf(columnName) === -1\n    ? [...hiddenColumnNames, columnName]\n    : hiddenColumnNames.filter(hiddenColumn => hiddenColumn !== columnName)\n);\n", "import { toggle } from '../../utils/common-reducers';\nimport { ToggleRowFieldReducer } from '../../types';\n\nexport const toggleRowExpanded: ToggleRowFieldReducer = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n", "export const GRID_TREE_NODE_TYPE = Symbol('treeNode');\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { GRID_TREE_NODE_TYPE } from './constants';\nimport {\n  RowsWithTreeMetaMap, RowsWithCollapsedRowsMetaMap, IsSpecificTreeRowGetter, GetRowIdFn,\n  GetRowLevelKeyFn, GetCollapsedRowsFn, CustomTreeRowsWithMetaComputed,\n  UnwrapRowsComputed, GetTreeRowLevelGetter, ExpandedTreeRowsFn, Row,\n} from '../../types';\n\nexport const customTreeRowsWithMeta: CustomTreeRowsWithMetaComputed = (\n  rows, getChildRows,\n) => {\n  const rowsToProcess = [{ row: null, level: -1 }] as Row[];\n  const treeRows = [] as { row: Row, level: number, leaf: boolean }[];\n\n  while (rowsToProcess?.length) {\n    const { row: currentRow, level } = rowsToProcess.shift()!;\n    const rowIndex = treeRows.findIndex(({ row }) => row === currentRow);\n    const nestedRows = getChildRows(currentRow, rows as Row[])?.map(\n      (childRow: Row) => ({\n        row: childRow,\n        level: level + 1,\n        leaf: !getChildRows(childRow, rows as Row[]),\n      }),\n    );\n\n    if (nestedRows) {\n      if (rowIndex > -1) {\n        treeRows.splice(rowIndex + 1, 0, ...nestedRows);\n      } else {\n        treeRows.push(...nestedRows);\n      }\n      rowsToProcess.push(...nestedRows);\n    }\n  }\n\n  const result = treeRows.reduce((acc, { row, level, leaf }) => {\n    acc.rows.push(row);\n    acc.treeMeta.push([row, { level, leaf }]);\n\n    return acc;\n  }, { rows: [] as Row[], treeMeta: [] as any[] });\n\n  return {\n    rows: result.rows,\n    treeMeta: new Map(result.treeMeta),\n  };\n};\n\nexport const customTreeRowIdGetter: PureComputed<[GetRowIdFn, RowsWithTreeMetaMap]> = (\n  getRowId, { rows, treeMeta },\n) => {\n  const firstNestedRowIndex = rows.findIndex(row => treeMeta.get(row)!.level > 0);\n  if (firstNestedRowIndex === -1 || getRowId(rows[firstNestedRowIndex]) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .map((row, rowIndex) => [row, rowIndex] as [any, any]));\n  return row => map.get(row);\n};\n\nexport const customTreeRowLevelKeyGetter: PureComputed<\n  [GetRowLevelKeyFn, RowsWithTreeMetaMap]\n> = (\n  getRowLevelKey, { treeMeta },\n) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  if (rowMeta !== undefined) {\n    return `${GRID_TREE_NODE_TYPE.toString()}_${rowMeta.level}`;\n  }\n  return getRowLevelKey && getRowLevelKey();\n};\n\nexport const expandedTreeRows: ExpandedTreeRowsFn = (\n  { rows, treeMeta }, getRowId, expandedRowIds,\n) => {\n  const expandedRowIdsSet = new Set(expandedRowIds);\n\n  let currentExpanded = true;\n  let currentLevel = 0;\n\n  const collapsedRowsMeta = new Map();\n  const resultRows: object[] = [];\n\n  rows.forEach((row) => {\n    const rowMeta = treeMeta.get(row);\n    const level = rowMeta && rowMeta.level;\n    if (level === undefined && currentExpanded) {\n      resultRows.push(row);\n    } else if (!currentExpanded && (level === undefined || level > currentLevel)) {\n      const lastRow = resultRows[resultRows.length - 1];\n      let collapsedItems = collapsedRowsMeta.get(lastRow);\n      if (!collapsedItems) {\n        collapsedItems = [];\n        collapsedRowsMeta.set(lastRow, collapsedItems);\n      }\n      collapsedItems.push(row);\n    } else {\n      currentExpanded = expandedRowIdsSet.has(getRowId(row));\n      currentLevel = level!;\n\n      resultRows.push(row);\n    }\n  });\n\n  return {\n    treeMeta,\n    collapsedRowsMeta,\n    rows: resultRows,\n  };\n};\n\nexport const collapsedTreeRowsGetter: PureComputed<\n  [GetCollapsedRowsFn, RowsWithCollapsedRowsMetaMap]\n> = (\n  getCollapsedRows, { collapsedRowsMeta },\n) => row => collapsedRowsMeta.get(row) || (getCollapsedRows && getCollapsedRows(row));\n\nexport const isTreeRowLeafGetter: IsSpecificTreeRowGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return rowMeta && rowMeta.leaf;\n};\n\nexport const getTreeRowLevelGetter: GetTreeRowLevelGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return (rowMeta && rowMeta.level) as number;\n};\n\nexport const unwrappedCustomTreeRows: UnwrapRowsComputed = ({ rows }) => rows;\n", "import { TABLE_DATA_TYPE } from '../table/constants';\nimport { IsSpecificCellFn, TableRow, TableColumn } from '../../types';\n\nexport const isTreeTableCell: IsSpecificCellFn<TableRow, TableColumn, string> = (\n  tableRow, tableColumn, forColumnName,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE\n  && tableColumn.column!.name === forColumnName;\n", "export const changeSearchValue = (\n  prevSearchValue: string, searchValue: string,\n) => searchValue;\n", "import { SearchFilterExpressionFn, FilterExpression } from '../../types';\n\nexport const searchFilterExpression: SearchFilterExpressionFn = (\n  searchValue, columns, filterExpression,\n) => {\n  const filters = columns.map(({ name }) => ({ columnName: name, value: searchValue }));\n  const selfFilterExpression: FilterExpression = { filters, operator: 'or' };\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n  return {\n    operator: 'and',\n    filters: [filterExpression as FilterExpression, selfFilterExpression],\n  };\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { GetAvailableFilterOperationsFn, FilterOperation } from '../../types';\n\nexport const getAvailableFilterOperationsGetter: PureComputed<\n  [GetAvailableFilterOperationsFn, FilterOperation[], string[]]\n> = (\n  getAvailableFilterOperations,\n  availableFilterOperations,\n  columnNames,\n) => columnName => (columnNames.indexOf(columnName) > -1 && availableFilterOperations)\n// tslint:disable-next-line: max-line-length\n    || (typeof getAvailableFilterOperations === 'function' && getAvailableFilterOperations(columnName))\n    || undefined;\n", "export const FIXED_COLUMN_LEFT_SIDE = 'left';\nexport const FIXED_COLUMN_RIGHT_SIDE = 'right';\nexport const TABLE_FIXED_TYPE = Symbol('fixed');\n", "import { slice } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  FIXED_COLUMN_LEFT_SIDE, TABLE_FIXED_TYPE,\n} from './constants';\nimport { findChainByColumnIndex } from '../table-header-row/helpers';\nimport {\n  GetFixedColumnKeysFn, IsSpecificRowFn, CalculatePositionFn, CalculateFixedColumnPropsFn,\n} from '../../types';\n\nexport const getFixedColumnKeys: GetFixedColumnKeysFn = (tableColumns, fixedNames) => tableColumns\n  .filter(tableColumn => (\n    (tableColumn.type === TABLE_DATA_TYPE && fixedNames.indexOf(tableColumn.column!.name) !== -1)\n    || fixedNames.indexOf(tableColumn.type) !== -1\n  ))\n  .map(({ key }) => key);\n\nexport const isFixedTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_FIXED_TYPE;\n\nconst calculatePosition: CalculatePositionFn = (array, index, tableColumnDimensions) => (\n  index === 0\n    ? 0\n    : array\n      .slice(0, index)\n      .reduce((acc, target) => acc + tableColumnDimensions[target] || 0, 0)\n);\n\nexport const calculateFixedColumnProps: CalculateFixedColumnPropsFn = (\n  { tableColumn },\n  { leftColumns, rightColumns },\n  tableColumns,\n  tableColumnDimensions,\n  tableHeaderColumnChains,\n) => {\n  const side = tableColumn.fixed!;\n  const targetArray = side === FIXED_COLUMN_LEFT_SIDE\n    ? getFixedColumnKeys(tableColumns, leftColumns)\n    : slice(getFixedColumnKeys(tableColumns, rightColumns)).reverse();\n\n  const index = tableColumns.findIndex(({ key }) => key === tableColumn.key);\n  const fixedIndex = targetArray.indexOf(tableColumn.key);\n  const columnChain = findChainByColumnIndex(tableHeaderColumnChains[0], index)!;\n\n  const showLeftDivider = columnChain.start === index && index !== 0;\n  const showRightDivider = columnChain.start + columnChain.columns.length - 1 === index\n    && index < tableColumns.length - 1;\n\n  const position = calculatePosition(targetArray, fixedIndex, tableColumnDimensions);\n\n  return {\n    showRightDivider,\n    showLeftDivider,\n    position,\n    side,\n  };\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { FIXED_COLUMN_LEFT_SIDE, FIXED_COLUMN_RIGHT_SIDE, TABLE_FIXED_TYPE } from './constants';\nimport { splitHeaderColumnChains, generateSimpleChains } from '../table-header-row/helpers';\nimport {\n  FixedColumnName, TableColumn, FixedColumnSide, TableRow, HeaderColumnChainRows,\n  ShouldSplitChainFn,\n} from '../../types';\n\nexport const tableColumnsWithFixed: PureComputed<\n  [TableColumn[], FixedColumnName[], FixedColumnName[]]\n> = (\n  tableColumns, leftColumns, rightColumns,\n) => tableColumns\n  .map((tableColumn) => {\n    let fixed!: FixedColumnSide;\n    if ((tableColumn.type === TABLE_DATA_TYPE\n      && leftColumns.indexOf(tableColumn.column!.name) !== -1)\n      || leftColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_LEFT_SIDE;\n    }\n    if ((tableColumn.type === TABLE_DATA_TYPE\n      && rightColumns.indexOf(tableColumn.column!.name) !== -1)\n      || rightColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_RIGHT_SIDE;\n    }\n    return fixed ? { ...tableColumn, fixed } : tableColumn;\n  });\n\nexport const tableHeaderRowsWithFixed: PureComputed<[TableRow[]]> = tableHeaderRows => [\n  ...tableHeaderRows,\n  { key: TABLE_FIXED_TYPE.toString(), type: TABLE_FIXED_TYPE, height: 0 },\n];\n\nexport const tableHeaderColumnChainsWithFixed: PureComputed<\n  [HeaderColumnChainRows, TableRow[], TableColumn[]]\n> = (\n  tableHeaderColumnChains, tableHeaderRows, tableColumns,\n) => {\n  const chains = tableHeaderColumnChains\n    || generateSimpleChains(tableHeaderRows, tableColumns);\n\n  const shouldSplitChain: ShouldSplitChainFn = (currentGroup, column) => (\n    !currentGroup || (currentGroup as any).fixed !== column.fixed\n  );\n  const extendChainProps = (column: TableColumn) => ({\n    fixed: column.fixed,\n  });\n  return splitHeaderColumnChains(\n    chains,\n    tableColumns,\n    shouldSplitChain,\n    extendChainProps,\n  );\n};\n", "import {\n  SummaryValue, SummaryCalculator,\n  DefaultSummaryCalculators,\n  Row,\n  TotalSummaryValuesFn,\n  GroupSummaryValuesFn,\n  TreeSummaryValuesFn,\n  RowsSummaryValuesFn,\n  ExpandRowsFn,\n  TableRow,\n  GroupLevel,\n} from '../../types';\n\nconst defaultSummaryCalculators: DefaultSummaryCalculators = {\n  count: rows => rows.length,\n  sum: (rows, getValue) => rows.reduce((acc, row) => acc + getValue(row), 0),\n  max: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.max(acc, getValue(row)), -Infinity)\n    : null),\n  min: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.min(acc, getValue(row)), Infinity)\n    : null),\n  avg: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => acc + getValue(row), 0) / rows.length\n    : null),\n};\n\nexport const defaultSummaryCalculator: SummaryCalculator = (type, rows, getValue) => {\n  const summaryCalculator = defaultSummaryCalculators[type];\n  if (!summaryCalculator) {\n    throw new Error(`The summary type '${type}' is not defined`);\n  }\n  return summaryCalculator(rows, getValue);\n};\n\nconst rowsSummary: RowsSummaryValuesFn = (\n  rows, summaryItems, getCellValue, calculator,\n) => summaryItems\n  .reduce((acc, { type, columnName }) => {\n    const getValue = (row: Row) => getCellValue(row, columnName);\n    acc.push(calculator(type, rows as any[], getValue));\n    return acc;\n  }, [] as SummaryValue[]);\n\nconst expandRows: ExpandRowsFn = (\n  rows, getRowLevelKey, getCollapsedRows, isGroupRow, includeGroupRow = false,\n) => {\n  const shouldIncludeRow = includeGroupRow || !isGroupRow\n    ? () => true\n    : (row: TableRow) => !isGroupRow(row);\n\n  return rows\n    .reduce((acc, row) => {\n      if (getRowLevelKey && getRowLevelKey(row)) {\n        if (shouldIncludeRow(row)) {\n          acc.push(row);\n        }\n        const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n        if (collapsedRows) {\n          acc.push(...collapsedRows);\n        }\n        return acc;\n      }\n      acc.push(row);\n      return acc;\n    }, [] as TableRow[]);\n};\n\nexport const totalSummaryValues: TotalSummaryValuesFn = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getCollapsedRows,\n  calculator = defaultSummaryCalculator,\n) => {\n  const plainRows = expandRows(rows, getRowLevelKey, getCollapsedRows, isGroupRow);\n  return rowsSummary(plainRows, summaryItems, getCellValue, calculator);\n};\n\nexport const groupSummaryValues: GroupSummaryValuesFn = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getCollapsedRows,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels: GroupLevel[] = [];\n  const getLevelIndex = (levelKey: string) => (\n    levels.findIndex(level => level.levelKey === levelKey)\n  );\n  const summaries = {};\n\n  const anyRowLevelSummaryExist = summaryItems.some(item => (\n    !(item as any).showInGroupFooter\n  ));\n  const expandedRows = anyRowLevelSummaryExist\n    ? expandRows(rows, getRowLevelKey, getCollapsedRows, isGroupRow, true)\n    : rows;\n\n  expandedRows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n    let levelIndex = getLevelIndex(levelKey);\n    if (levelIndex > -1) {\n      levels.forEach((level) => {\n        summaries[level.row.compoundKey] = rowsSummary(\n          level.rows, summaryItems, getCellValue, calculator,\n        );\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (isGroupRow!(row)) {\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n      levelIndex = getLevelIndex(levelKey);\n    }\n    // when row level summary exists, these rows had already been expanded earlier\n    const isCollapsedNestedGroupRow = collapsedRows && levelIndex > 0 && !anyRowLevelSummaryExist;\n    const rowsToAppend = !levelKey ? [row] : collapsedRows;\n    if (!levelKey || isCollapsedNestedGroupRow) {\n      levels.forEach((level) => {\n        level.rows.push(...rowsToAppend);\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    summaries[level.row.compoundKey] = rowsSummary(\n      level.rows, summaryItems, getCellValue, calculator,\n    );\n  });\n  return summaries;\n};\n\nexport const treeSummaryValues: TreeSummaryValuesFn = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels: any[] = [];\n  const summaries = {};\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (!levelKey) {\n      levels[levels.length - 1].rows.push(row);\n      return;\n    }\n    const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach((level) => {\n        if (level.rows.length) {\n          summaries[getRowId(level.row)] = rowsSummary(\n            level.rows, summaryItems, getCellValue, calculator,\n          );\n        }\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (!isGroupRow || !isGroupRow(row)) {\n      if (levels.length) {\n        levels[levels.length - 1].rows.push(row);\n      }\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    if (level.rows.length) {\n      summaries[getRowId(level.row)] = rowsSummary(\n        level.rows, summaryItems, getCellValue, calculator,\n      );\n    }\n  });\n  return summaries;\n};\n", "export const TABLE_TOTAL_SUMMARY_TYPE = Symbol('totalSummary');\nexport const TABLE_GROUP_SUMMARY_TYPE = Symbol('groupSummary');\nexport const TABLE_TREE_SUMMARY_TYPE = Symbol('treeSummary');\n\nexport const defaultFormatlessSummaries = ['count'];\n", "import { PureComputed } from '@devexpress/dx-core';\nimport {\n  TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE,\n} from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  GetColumnSummariesFn, IsSpecificCellFn, IsSpecificRowFn, SummaryItem,\n  GetGroupInlineSummariesFn, ColumnInlineSummaries, GroupSummaryItem,\n} from '../../types';\n\nexport const isTotalSummaryTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TOTAL_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isGroupSummaryTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_GROUP_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTreeSummaryTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TREE_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTotalSummaryTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_TOTAL_SUMMARY_TYPE\n);\nexport const isGroupSummaryTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_GROUP_SUMMARY_TYPE\n);\nexport const isTreeSummaryTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_TREE_SUMMARY_TYPE\n);\n\nexport const getColumnSummaries: GetColumnSummariesFn = (\n  summaryItems, columnName, summaryValues, predicate = () => true,\n) => summaryItems\n  .map((item, index) => [item, index] as [SummaryItem, number])\n  .filter(([item]) => item.columnName === columnName && predicate(item))\n  .map(([item, index]) => ({\n    type: item.type,\n    value: summaryValues[index],\n  }));\n\nexport const isFooterSummary: PureComputed<[SummaryItem], boolean> = summaryItem => (\n  (summaryItem as GroupSummaryItem).showInGroupFooter!\n);\nexport const isInlineGroupCaptionSummary: PureComputed<[SummaryItem], boolean> = summaryItem => (\n  !((summaryItem as GroupSummaryItem).showInGroupFooter ||\n  (summaryItem as GroupSummaryItem).alignByColumn)\n);\nexport const groupFooterSummaryExists: PureComputed<[GroupSummaryItem[]], boolean> =\n  groupSummaryItems => groupSummaryItems?.some(isFooterSummary);\n\nexport const getGroupInlineSummaries: GetGroupInlineSummariesFn = (\n  summaryItems, columns, summaryValues,\n) => {\n  if (!summaryItems.some(isInlineGroupCaptionSummary)) {\n    return [];\n  }\n\n  return columns.reduce((acc, column) => {\n    const colName = column.name;\n    const summaries = getColumnSummaries(\n      summaryItems, colName, summaryValues, isInlineGroupCaptionSummary,\n    );\n    if (summaries.length) {\n      acc.push({\n        column,\n        summaries,\n      });\n    }\n\n    return acc;\n  }, [] as ColumnInlineSummaries[]);\n};\n", "import { PureComputed } from '@devexpress/dx-core';\nimport {\n  TABLE_TOTAL_SUMMARY_TYPE,\n  TABLE_GROUP_SUMMARY_TYPE,\n  TABLE_TREE_SUMMARY_TYPE,\n} from './constants';\nimport {\n  TableRow, RowLevel, TableRowsWithSummariesFn,\n} from '../../types';\nimport { groupFooterSummaryExists } from './helpers';\n\nexport const tableRowsWithTotalSummaries: PureComputed<[TableRow[]]> = footerRows => [\n  { key: TABLE_TOTAL_SUMMARY_TYPE.toString(), type: TABLE_TOTAL_SUMMARY_TYPE },\n  ...footerRows,\n];\n\nexport const tableRowsWithSummaries: TableRowsWithSummariesFn = (\n  tableRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId,\n) => {\n  const hasGroupFooterSummary = groupFooterSummaryExists(groupSummaryItems);\n  if (!getRowLevelKey || !(hasGroupFooterSummary || treeSummaryItems.length)) return tableRows;\n\n  const result: TableRow[] = [];\n  const closeLevel = (level: RowLevel) => {\n    if (!level.opened) return;\n    if (hasGroupFooterSummary && isGroupRow && isGroupRow(level.row)) {\n      const { compoundKey } = level.row;\n      result.push({\n        key: `${TABLE_GROUP_SUMMARY_TYPE.toString()}_${compoundKey}`,\n        type: TABLE_GROUP_SUMMARY_TYPE,\n        row: level.row,\n      });\n    } else if (treeSummaryItems.length) {\n      const rowId = getRowId(level.row);\n      result.push({\n        key: `${TABLE_TREE_SUMMARY_TYPE.toString()}_${rowId}`,\n        type: TABLE_TREE_SUMMARY_TYPE,\n        row: level.row,\n      });\n    }\n  };\n\n  let levels: RowLevel[] = [];\n  tableRows.forEach((tableRow) => {\n    const { row } = tableRow;\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n      if (levelIndex > -1) {\n        levels.slice(levelIndex).reverse().forEach(closeLevel);\n        levels = levels.slice(0, levelIndex);\n      }\n      if (!isGroupRow || !isGroupRow(row)) {\n        levels = levels.map(level => ({\n          ...level,\n          opened: true,\n        }));\n      }\n      levels.push({\n        levelKey,\n        row,\n        opened: false,\n      });\n    } else {\n      levels = levels.map(level => ({\n        ...level,\n        opened: true,\n      }));\n    }\n    result.push(tableRow);\n  });\n  levels.slice().reverse().forEach(closeLevel);\n\n  return result;\n};\n", "import { GroupSummaryItem } from '../../types';\n\nexport const prepareGroupSummaryItems = (items: GroupSummaryItem[]) => (\n  !!items\n    ? items.map(item => ({\n      ...item,\n      showInGroupFooter: (\n        item.showInGroupFooter === undefined && !item.alignByColumn\n      )\n        ? true\n        : item.showInGroupFooter,\n    }))\n    : items\n);\n", "import { ReadonlyObject, PureComputed } from '@devexpress/dx-core';\nimport {\n  TABLE_FILTER_TYPE, TABLE_HEADING_TYPE, TABLE_DATA_TYPE, TABLE_BAND_TYPE,\n  TABLE_TOTAL_SUMMARY_TYPE, TABLE_STUB_TYPE,\n  TABLE_GROUP_TYPE,\n} from '@devexpress/dx-grid-core';\nimport {\n    GetNextFocusedElementFn, FocusedElement, TableColumn, TableRow,\n    GetElementFn, GetElementPrevNextPartFn, Elements, RowId, GetInnerElementsFn,\n    OnFocusedCellChangeFn, ScrollToColumnFn, GetNextPrevPartFn,\n    GetNextPrevCellFromBodyFn, GetPrevCellFromHeadingFn, GetNextCellFromHeadingFn,\n    GetCellNextPrevPartFn, FocusedElementWScrolling, InlineEditing,\n} from '../../types';\n\nconst HEADING_TYPE = TABLE_HEADING_TYPE.toString();\nconst FILTER_TYPE = TABLE_FILTER_TYPE.toString();\nconst DATA_TYPE = TABLE_DATA_TYPE.toString();\nconst BAND_TYPE = TABLE_BAND_TYPE.toString();\nconst TOTAL_SUMMARY_TYPE = TABLE_TOTAL_SUMMARY_TYPE.toString();\nconst STUB_TYPE = TABLE_STUB_TYPE.toString();\nconst GROUP_TYPE = TABLE_GROUP_TYPE.toString();\n\nconst tableParts = [HEADING_TYPE, FILTER_TYPE, DATA_TYPE, TOTAL_SUMMARY_TYPE];\n\nconst getIndex: PureComputed<[TableColumn[] | TableRow [], string], number> = (arr, key) => {\n  return arr.findIndex((el: TableColumn | TableRow) => {\n    return el.key === key;\n  });\n};\n\nconst isSpanInput: PureComputed<[any[]], boolean> = (innerElements) => {\n  return innerElements[0].tagName === 'SPAN' ||\n  innerElements[0].tagName === 'INPUT' && innerElements[0].type === 'text';\n};\n\nconst isDefined = (value: any): value is boolean => {\n  return value !== undefined;\n};\n\nconst hasInsideElements: PureComputed<[any[], number?], boolean> = (\n  innerElements, focusedElementIndex,\n) => {\n  if ((innerElements.length && focusedElementIndex === undefined) ||\n  (isDefined(focusedElementIndex) && focusedElementIndex < innerElements.length - 1)) {\n    if (innerElements.length === 1 && focusedElementIndex === undefined) {\n      return !isSpanInput(innerElements);\n    }\n    return true;\n  }\n  return false;\n};\n\nconst getIndexInnerElement: PureComputed<[\n  Elements, string, string, number,\n], number | undefined> = (\n  elements, rowKey, columnKey, direction,\n) => {\n  const innerElements = getInnerElements(elements, rowKey, columnKey);\n  const index = direction > 0 ? 0 : innerElements.length - 1;\n\n  return cellEmptyOrHasSpanAndInput(elements, rowKey, columnKey) ? undefined : index;\n};\n\nconst getNextPrevClosestColumnKey: PureComputed<\n  [TableColumn[], number, string, Elements, number], string | undefined\n> = (tableColumns, columnIndex, rowKey, elements, direction) => {\n  let columnKey;\n  if (direction > 0) {\n    for (let i = columnIndex; i <= tableColumns.length - 1; i += 1) {\n      if (elements[rowKey][tableColumns[i].key]) {\n        columnKey = tableColumns[i].key;\n        break;\n      }\n    }\n  } else {\n    for (let i = columnIndex; i >= 0; i -= 1) {\n      if (elements[rowKey][tableColumns[i].key]) {\n        columnKey = tableColumns[i].key;\n        break;\n      }\n    }\n  }\n  return columnKey;\n};\n\nconst shouldBeScrolled = (\n  elements: ReadonlyObject<Elements>, key1: string, key2: string,\n  scrollToColumn?: ScrollToColumnFn,\n): scrollToColumn is ScrollToColumnFn => {\n  if (scrollToColumn && !elements[key1][key2]) {\n    return Object.keys(elements[key1]).some((column) => {\n      return column.includes(STUB_TYPE);\n    });\n  }\n  return false;\n};\n\nconst convertPart: PureComputed<\n  [string, Elements, TableRow[]], string | void\n> = (part, elements, tableBodyRows) => {\n  if (part === DATA_TYPE && elements[tableBodyRows[0].key]) {\n    return DATA_TYPE;\n  }\n  if (elements[part]) {\n    return part;\n  }\n  return;\n};\n\nconst getLastPart: PureComputed<\n  [Elements, TableRow[], number?], string | void\n> = (elements, tableBodyRows, partIndex) => {\n  let index = partIndex || tableParts.length;\n  let part;\n\n  do {\n    index = index - 1;\n    part = convertPart(tableParts[index], elements, tableBodyRows);\n  } while (index > 0 && !part);\n\n  return part;\n};\n\nconst getRowKey: PureComputed<[string, string, string?]> = (part, key, headerRowKey) => {\n  if (headerRowKey && part === HEADING_TYPE) {\n    return headerRowKey;\n  }\n  return part === DATA_TYPE ? key : part;\n};\n\nconst getPrevPart: GetNextPrevPartFn = (\n  focusedElement, elements, tableBodyRows,\n) => {\n  const index = tableParts.findIndex((p) => {\n    return p === focusedElement.part;\n  });\n  if (index === 0) {\n    return;\n  }\n  return getLastPart(elements, tableBodyRows, index);\n};\n\nconst getNextPart: GetNextPrevPartFn = (\n  focusedElement, elements, tableBodyRows,\n) => {\n  const index = tableParts.findIndex((p) => {\n    return p === focusedElement.part;\n  });\n  if (index === tableParts.length - 1) {\n    return;\n  }\n  const part = tableParts.find((p, i) => {\n    if (i > index) {\n      return convertPart(p, elements, tableBodyRows);\n    }\n    return false;\n  });\n  return part;\n};\n\nconst getCellNextPart: GetElementPrevNextPartFn = (\n  focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn,\n) => {\n  const part = getNextPart(focusedElement, elements, tableBodyRows);\n  if (!part) {\n    return {};\n  }\n\n  const rowKey = getRowKey(part, tableBodyRows[0].key);\n  const columnKey = tableColumns[0].key;\n  if (shouldBeScrolled(elements, rowKey, columnKey, scrollToColumn)) {\n    return {\n      element: {\n        rowKey,\n        columnKey,\n        part,\n      },\n      scrolling: 'left',\n    };\n  }\n  return {\n    element: {\n      rowKey,\n      columnKey,\n      index: getIndexInnerElement(elements, rowKey, columnKey, 1),\n      part,\n    },\n  };\n};\n\nconst getCellPrevPart: GetElementPrevNextPartFn = (\n  focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn,\n) => {\n  const part = getPrevPart(focusedElement, elements, tableBodyRows);\n  if (!part) {\n    return {};\n  }\n\n  const rowKey = getRowKey(part, tableBodyRows[tableBodyRows.length - 1].key);\n  const columnKeyIndex = tableColumns.length - 1;\n  const columnKey = tableColumns[columnKeyIndex].key;\n  if (shouldBeScrolled(elements, rowKey, columnKey, scrollToColumn)) {\n    return {\n      element: {\n        rowKey,\n        columnKey,\n        part,\n      },\n      scrolling: 'right',\n    };\n  }\n  const nextColumnKey = getNextPrevClosestColumnKey(tableColumns, columnKeyIndex,\n    rowKey, elements, -1);\n  return {\n    element: nextColumnKey ? {\n      rowKey,\n      columnKey: nextColumnKey,\n      index: getIndexInnerElement(elements, rowKey, nextColumnKey, -1),\n      part,\n    } : undefined,\n  };\n};\n\nconst getPrevCellFromBody: GetNextPrevCellFromBodyFn = (\n  columnIndex, rowIndex, tableColumns, tableBodyRows, focusedElement, elements,\n  scrollToColumn,\n) => {\n  let prevRowKey = focusedElement.rowKey;\n  let prevColumnKey;\n  if (columnIndex === 0 && rowIndex === 0) {\n    return getCellPrevPart(focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn);\n  }\n  if (columnIndex === 0) {\n    prevRowKey = tableBodyRows[rowIndex - 1].key;\n    if (prevRowKey.includes(GROUP_TYPE)) {\n      prevColumnKey = getNextPrevClosestColumnKey(\n        tableColumns, tableColumns.length - 1, prevRowKey, elements, -1,\n      );\n    } else {\n      prevColumnKey = tableColumns[tableColumns.length - 1].key;\n    }\n    if (prevColumnKey && shouldBeScrolled(elements, prevRowKey, prevColumnKey, scrollToColumn)) {\n      return {\n        element: {\n          rowKey: prevRowKey,\n          columnKey: prevColumnKey,\n          part: focusedElement.part,\n        },\n        scrolling: 'right',\n      };\n    }\n  } else {\n    prevColumnKey = getNextPrevClosestColumnKey(\n      tableColumns, columnIndex - 1, prevRowKey, elements, -1,\n    );\n  }\n\n  return {\n    element: prevColumnKey ? {\n      rowKey: prevRowKey,\n      columnKey: prevColumnKey,\n      index: getIndexInnerElement(elements, prevRowKey, prevColumnKey, -1),\n      part: focusedElement.part,\n    } : undefined,\n  };\n};\n\nconst getPrevCellFromHeading: GetPrevCellFromHeadingFn = (\n  tableHeaderRows, tableColumns, columnIndex,\n  { rowKey, part }, elements,\n) => {\n  let prevColumnKey;\n  let prevRowKey;\n  const headIndex = getIndex(tableHeaderRows, rowKey);\n  prevColumnKey = getNextPrevClosestColumnKey(tableColumns, columnIndex - 1, rowKey, elements, -1);\n  if (prevColumnKey) {\n    return {\n      element: {\n        columnKey: prevColumnKey,\n        rowKey,\n        part,\n        index: getIndexInnerElement(elements, rowKey, prevColumnKey, -1),\n      },\n    };\n  }\n  if (headIndex > 0) {\n    let abort = false;\n    for (let i = headIndex - 1; i >= 0 && !abort; i -= 1) {\n      for (let j = tableColumns.length - 1; j >= 0; j -= 1) {\n        if (elements[tableHeaderRows[i].key][tableColumns[j].key]) {\n          prevColumnKey = tableColumns[j].key;\n          prevRowKey = tableHeaderRows[i].key;\n          abort = true;\n          break;\n        }\n      }\n    }\n    if (prevColumnKey && prevRowKey) {\n      return {\n        element: {\n          columnKey: prevColumnKey,\n          rowKey: prevRowKey,\n          part,\n          index: getIndexInnerElement(elements, prevRowKey, prevColumnKey, -1),\n        },\n      };\n    }\n  }\n\n  return {};\n};\n\nconst getPrevElement: GetElementFn = (\n  focusedElement, tableBodyRows, tableColumns, tableHeaderRows, elements, scrollToColumn,\n) => {\n  const columnIndex = getIndex(tableColumns, focusedElement.columnKey);\n  const rowIndex = getIndex(tableBodyRows, focusedElement.rowKey);\n\n  if (isDefined(focusedElement.index) && focusedElement.index > 0) {\n    return { element: { ...focusedElement, index: focusedElement.index - 1 } };\n  }\n\n  if (focusedElement.part === DATA_TYPE) {\n    return getPrevCellFromBody(columnIndex, rowIndex, tableColumns,\n      tableBodyRows, focusedElement, elements, scrollToColumn);\n  }\n\n  if (focusedElement.part === HEADING_TYPE) {\n    const cell = getPrevCellFromHeading(tableHeaderRows, tableColumns, columnIndex,\n      focusedElement, elements);\n    if (cell.element) {\n      return {\n        element: {\n          ...cell.element,\n          index: getIndexInnerElement(elements, cell.element.rowKey, cell.element.columnKey, -1),\n        },\n      };\n    }\n    return { element: cell.element };\n  }\n\n  if (columnIndex === 0) {\n    return getCellPrevPart(focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn);\n  }\n  const rowKey = focusedElement.part;\n  const columnKey = tableColumns[columnIndex - 1].key;\n  return {\n    element: {\n      rowKey,\n      columnKey,\n      index: getIndexInnerElement(elements, rowKey, columnKey, -1),\n      part: focusedElement.part,\n    },\n  };\n};\n\nconst getNextCellFromBody: GetNextPrevCellFromBodyFn = (\n  columnIndex, rowIndex, tableColumns,\n  tableBodyRows, focusedElement, elements, scrollToColumn,\n) => {\n  let nextRowKey = focusedElement.rowKey;\n  let nextColumnKey;\n\n  if (columnIndex === tableColumns.length - 1 && rowIndex === tableBodyRows.length - 1) {\n    return getCellNextPart(focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn);\n  }\n  if (columnIndex === tableColumns.length - 1) {\n    nextRowKey = tableBodyRows[rowIndex + 1].key;\n    nextColumnKey = tableColumns[0].key;\n    if (shouldBeScrolled(elements, nextRowKey, nextColumnKey, scrollToColumn)) {\n      return {\n        element: {\n          rowKey: nextRowKey,\n          columnKey: nextColumnKey,\n          part: focusedElement.part,\n        },\n        scrolling: 'left',\n      };\n    }\n  } else {\n    nextColumnKey = getNextPrevClosestColumnKey(\n      tableColumns, columnIndex + 1, nextRowKey, elements, 1,\n    );\n    if (!nextColumnKey) {\n      if (rowIndex === tableBodyRows.length - 1) {\n        return getCellNextPart(\n          focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn,\n        );\n      }\n      nextRowKey = tableBodyRows[rowIndex + 1].key;\n      nextColumnKey = tableColumns[0].key;\n    }\n  }\n\n  return {\n    element: {\n      rowKey: nextRowKey,\n      columnKey: nextColumnKey,\n      index: getIndexInnerElement(elements, nextRowKey, nextColumnKey, 1),\n      part: focusedElement.part,\n    },\n  };\n};\n\nconst getNextCellFromHeading: GetNextCellFromHeadingFn = (\n  tableHeaderRows, tableBodyRows, tableColumns,\n  columnIndex, focusedElement, elements,\n  scrollToColumn,\n) => {\n  const headIndex = getIndex(tableHeaderRows, focusedElement.rowKey);\n  let nextRowKey;\n  let nextColumnKey = getNextPrevClosestColumnKey(\n    tableColumns, columnIndex + 1, focusedElement.rowKey, elements, 1,\n  );\n  if (nextColumnKey) {\n    return {\n      element: {\n        columnKey: nextColumnKey,\n        rowKey: focusedElement.rowKey,\n        part: focusedElement.part,\n        index: getIndexInnerElement(elements, focusedElement.rowKey, nextColumnKey, 1),\n      },\n    };\n  }\n  if (headIndex !== tableHeaderRows.length - 1) {\n    let abort = false;\n    for (let i = headIndex + 1; i <= tableHeaderRows.length - 1 && !abort; i += 1) {\n      for (let j = 0; j <= tableColumns.length - 1; j += 1) {\n        if (elements[tableHeaderRows[i].key][tableColumns[j].key]) {\n          nextColumnKey = tableColumns[j].key;\n          nextRowKey = tableHeaderRows[i].key;\n          abort = true;\n          break;\n        }\n      }\n    }\n    if (nextColumnKey && nextRowKey) {\n      return {\n        element: {\n          columnKey: nextColumnKey,\n          rowKey: nextRowKey,\n          part: focusedElement.part,\n          index: getIndexInnerElement(elements, nextRowKey, nextColumnKey, 1),\n        },\n      };\n    }\n  }\n\n  return getCellNextPart(focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn);\n};\n\nconst getNextElement: GetElementFn = (\n  focusedElement, tableBodyRows, tableColumns, tableHeaderRows, elements, scrollToColumn,\n) => {\n  const innerElements = getInnerElements(elements, focusedElement.rowKey, focusedElement.columnKey);\n  const columnIndex = getIndex(tableColumns, focusedElement.columnKey);\n  const rowIndex = getIndex(tableBodyRows, focusedElement.rowKey);\n\n  if (hasInsideElements(innerElements, focusedElement.index)) {\n    return {\n      element: {\n        ...focusedElement,\n        index: !isDefined(focusedElement.index) ? 0 : focusedElement.index + 1,\n      },\n    };\n  }\n\n  if (focusedElement.part === DATA_TYPE) {\n    return getNextCellFromBody(columnIndex, rowIndex, tableColumns,\n      tableBodyRows, focusedElement, elements, scrollToColumn);\n  }\n\n  if (focusedElement.part === HEADING_TYPE) {\n    return getNextCellFromHeading(tableHeaderRows, tableBodyRows, tableColumns, columnIndex,\n      focusedElement, elements, scrollToColumn);\n  }\n\n  if (columnIndex === tableColumns.length - 1) {\n    return getCellNextPart(focusedElement, elements, tableBodyRows, tableColumns, scrollToColumn);\n  }\n\n  const rowKey = focusedElement.rowKey;\n  const columnKey = tableColumns[columnIndex + 1].key;\n  return {\n    element: {\n      rowKey,\n      columnKey,\n      part: focusedElement.part,\n      index: getIndexInnerElement(elements, rowKey, columnKey, 1),\n    },\n  };\n};\n\nconst hasCellInput: PureComputed<[any], boolean> = (innerElements) => {\n  return innerElements.length ? innerElements[0].tagName === 'INPUT' : false;\n};\n\nconst cellEmptyOrHasSpanAndInput: PureComputed<[\n  Elements, string, string\n], boolean> = (elements, key1, key2) => {\n  const innerElements = getInnerElements(elements, key1, key2);\n  if (innerElements.length) {\n    return isSpanInput(innerElements);\n  }\n  return true;\n};\n\nconst getCellRightLeft: PureComputed<[number, FocusedElement, TableColumn[], Elements],\nFocusedElement | undefined> = (\n  direction, focusedElement, tableColumns, elements,\n) => {\n  if (focusedElement.part !== DATA_TYPE) {\n    return;\n  }\n  const columnIndex = getIndex(tableColumns, focusedElement.columnKey);\n  if (tableColumns[columnIndex + direction]) {\n    const columnKey = getNextPrevClosestColumnKey(\n      tableColumns, columnIndex + direction, focusedElement.rowKey, elements, direction,\n    );\n    if (columnKey) {\n      return {\n        rowKey: focusedElement.rowKey,\n        columnKey,\n        part: focusedElement.part,\n      };\n    }\n  }\n  return;\n};\n\nconst getFirstCell: PureComputed<\n  [Elements, TableRow[], TableColumn[], TableRow[], ScrollToColumnFn?, boolean?],\n  FocusedElementWScrolling\n> = (\n  elements, tableBodyRows, tableColumns, tableHeaderRows, scrollToColumn, withInnerElements,\n) => {\n  const part = tableParts.find((p) => {\n    return convertPart(p, elements, tableBodyRows);\n  });\n  if (!part) {\n    return {};\n  }\n  const rowKey = getRowKey(part, tableBodyRows[0].key, tableHeaderRows[0].key);\n  const columnKey = tableColumns[0].key;\n  if (shouldBeScrolled(elements, rowKey, columnKey, scrollToColumn)) {\n    return {\n      element: {\n        rowKey,\n        columnKey,\n        part,\n      },\n      scrolling: 'left',\n    };\n  }\n\n  return {\n    element: {\n      rowKey,\n      columnKey,\n      index: withInnerElements ? getIndexInnerElement(elements, rowKey, columnKey, 1) : undefined,\n      part,\n    },\n  };\n};\n\nconst getLastCell: PureComputed<[Elements, TableRow[], TableColumn[]], FocusedElementWScrolling> = (\n  elements, tableBodyRows, tableColumns,\n) => {\n  const part = getLastPart(elements, tableBodyRows);\n  if (!part) {\n    return {};\n  }\n\n  const rowKey = getRowKey(part, tableBodyRows[tableBodyRows.length - 1].key);\n  const columnKey = getNextPrevClosestColumnKey(\n    tableColumns, tableColumns.length - 1, rowKey, elements, -1,\n  );\n\n  return {\n    element: columnKey ? {\n      rowKey,\n      columnKey,\n      index: getIndexInnerElement(elements, rowKey, columnKey, 1),\n      part,\n    } : undefined,\n  };\n};\n\nconst getToolbarPagingElements: PureComputed<[Elements]> = (elements) => {\n  return {\n    toolbarElements: elements.toolbar && getInnerElements(elements, 'toolbar', 'none'),\n    pagingElements: elements.paging && getInnerElements(elements, 'paging', 'none')\n    .filter((el: any) => {\n      return !el.hasAttribute('disabled') && el.getAttribute('tabindex') !== '-1';\n    }),\n  };\n};\n\nconst getFirstCellInLastPart: PureComputed<[\n  Elements, TableRow[], TableColumn[], ScrollToColumnFn?, boolean?\n], FocusedElementWScrolling> = (\n  elements, tableBodyRows, tableColumns, scrollToColumn, withInnerElements,\n) => {\n  const lastPart = getLastPart(elements, tableBodyRows);\n  if (lastPart) {\n    const columnKey = tableColumns[0].key;\n    const rowKey = getRowKey(lastPart, tableBodyRows[0].key);\n    if (shouldBeScrolled(elements, rowKey, columnKey, scrollToColumn)) {\n      return {\n        element: {\n          rowKey,\n          columnKey,\n          part: lastPart,\n        },\n        scrolling: 'left',\n      };\n    }\n    return {\n      element: {\n        columnKey,\n        rowKey,\n        index: withInnerElements ? getIndexInnerElement(elements, rowKey, columnKey, 1) : undefined,\n        part: lastPart,\n      },\n    };\n  }\n  return {};\n};\n\nconst applyEnterAction: PureComputed<[\n  Elements, InlineEditing, TableColumn[], TableRow[], FocusedElement?\n], FocusedElement | undefined> = (\n  elements, { commitChangedRows, stopEditCells, startEditCells },\n  tableColumns, tableBodyRows, focusedElement,\n) => {\n  if (!focusedElement) {\n    return;\n  }\n  const innerElements = getInnerElements(elements, focusedElement.rowKey, focusedElement.columnKey);\n  const columnIndex = getIndex(tableColumns, focusedElement.columnKey);\n  const rowIndex = getIndex(tableBodyRows, focusedElement.rowKey);\n\n  if (focusedElement.part === DATA_TYPE && commitChangedRows) {\n    if (focusedElement.index === 0) {\n      commitChangedRows({ rowIds: [tableBodyRows[rowIndex].rowId] });\n      stopEditCells!({\n        editingCells: [{\n          rowId: tableBodyRows[rowIndex].rowId,\n          columnName: tableColumns[columnIndex].column!.name,\n        }],\n      });\n      return {\n        part: focusedElement.part,\n        columnKey: focusedElement.columnKey,\n        rowKey: focusedElement.rowKey,\n      };\n    }\n    startEditCells!({\n      editingCells: [{\n        rowId: tableBodyRows[rowIndex].rowId,\n        columnName: tableColumns[columnIndex].column!.name,\n      }],\n    });\n    return {\n      part: focusedElement.part,\n      columnKey: focusedElement.columnKey,\n      rowKey: focusedElement.rowKey,\n      index: 0,\n    };\n\n  }\n  if (!isDefined(focusedElement.index) && innerElements.length && isSpanInput(innerElements)) {\n    if (innerElements[0].tagName === 'SPAN') {\n      innerElements[0].click();\n    }\n    return {\n      part: focusedElement.part,\n      columnKey: focusedElement.columnKey,\n      rowKey: focusedElement.rowKey,\n      index: 0,\n    };\n  }\n\n  if (focusedElement.index === 0 && hasCellInput(innerElements)) {\n    return {\n      part: focusedElement.part,\n      columnKey: focusedElement.columnKey,\n      rowKey: focusedElement.rowKey,\n    };\n  }\n\n  return;\n};\n\nconst applyEscapeAction: PureComputed<[\n  Elements, InlineEditing, TableColumn[], TableRow[], FocusedElement?\n], FocusedElement | undefined> = (\n  elements, { cancelChangedRows, stopEditCells }, tableColumns, tableBodyRows, focusedElement,\n) => {\n  if (!focusedElement) {\n    return;\n  }\n  const innerElements = getInnerElements(elements, focusedElement.rowKey, focusedElement.columnKey);\n  const columnIndex = getIndex(tableColumns, focusedElement.columnKey);\n  const rowIndex = getIndex(tableBodyRows, focusedElement.rowKey);\n\n  if (focusedElement.index === 0 && hasCellInput(innerElements)) {\n    if (focusedElement.part === DATA_TYPE && cancelChangedRows) {\n      cancelChangedRows({\n        rowIds: [tableBodyRows[rowIndex].rowId],\n      });\n      stopEditCells!({\n        editingCells: [{\n          rowId: tableBodyRows[rowIndex].rowId,\n          columnName: tableColumns[columnIndex].column!.name,\n        }],\n      });\n    }\n    return {\n      part: focusedElement.part,\n      columnKey: focusedElement.columnKey,\n      rowKey: focusedElement.rowKey,\n    };\n  }\n  return;\n};\n\nconst actionOnCheckbox: PureComputed<[Elements, FocusedElement?], void> = (\n  elements, focusedElement,\n) => {\n  if (!focusedElement || isDefined(focusedElement.index)) {\n    return;\n  }\n\n  const el = getInnerElements(elements, focusedElement.rowKey, focusedElement.columnKey, 'input')\n  .filter((element: any) => {\n    return element.type === 'checkbox';\n  });\n  if (el[0]) {\n    el[0].click();\n  }\n};\n\nconst actionOnTreeMode: PureComputed<[Elements, RowId[], number, FocusedElement], void> = (\n  elements, expandedRowIds, direction, focusedElement,\n) => {\n  if (!focusedElement || isDefined(focusedElement.index) || !expandedRowIds) {\n    return;\n  }\n  const el = getInnerElements(\n    elements, focusedElement.rowKey, focusedElement.columnKey, 'button, i',\n  );\n  const index = getIndexFromKey(focusedElement.rowKey);\n  if (direction > 0 && expandedRowIds.indexOf(index) === -1 ||\n  direction < 0 && expandedRowIds.indexOf(index) > -1) {\n    if (el[0]) {\n      el[0].click();\n    }\n  }\n};\n\nexport const getInnerElements: GetInnerElementsFn = (\n  elements, key1, key2, query = '[tabIndex], input, button, a',\n) => {\n  return Array.from(elements[key1][key2][0].current.querySelectorAll(query)).filter((el: any) => {\n    return !el.hasAttribute('disabled') && el.getAttribute('tabindex') !== '-1';\n  });\n};\n\nconst getCellTopBottom: PureComputed<[number, FocusedElement, TableRow[], TableColumn[], Elements],\nFocusedElement | undefined> = (\n  direction, focusedElement, tableBodyRows, tableColumns, elements,\n) => {\n  if (focusedElement.part !== DATA_TYPE) {\n    return;\n  }\n  const columnIndex = getIndex(tableColumns, focusedElement.columnKey);\n  const rowIndex = getIndex(tableBodyRows, focusedElement.rowKey);\n  if (tableBodyRows[rowIndex + direction]) {\n    const columnKey = getNextPrevClosestColumnKey(\n      tableColumns, columnIndex, tableBodyRows[rowIndex + direction].key, elements, -1,\n    );\n    if (columnKey) {\n      return {\n        rowKey: tableBodyRows[rowIndex + direction].key,\n        columnKey,\n        part: focusedElement.part,\n      };\n    }\n  }\n  return;\n};\n\nconst isCtrlMetaKey = (event: any) => {\n  return event.ctrlKey || event.metaKey;\n};\n\nconst getIndexFromKey = (key: string) => {\n  const array = key.split('_');\n  return Number(array[array.length - 1]);\n};\n\nconst getCellNextPrevPart: GetCellNextPrevPartFn = (focusedElement, elements,\n  tableBodyRows, tableColumns, direction,\n  scrollToColumn) => {\n  const part = direction > 0 ? getNextPart(focusedElement, elements, tableBodyRows) :\n  getPrevPart(focusedElement, elements, tableBodyRows);\n  if (part) {\n    const rowKey = getRowKey(part, tableBodyRows[0].key);\n    const columnKey = tableColumns[0].key;\n    return {\n      element: {\n        part,\n        rowKey,\n        columnKey,\n      },\n      scrolling: shouldBeScrolled(elements, rowKey, columnKey, scrollToColumn) ? 'left' : undefined,\n    };\n  }\n\n  return {};\n};\n\nconst applyFocusOnToolbarPaging: PureComputed<\n  [Elements, number], void\n> = (elements, direction) => {\n  if (direction > 0 && elements.paging) {\n    getInnerElements(elements, 'paging', 'none')[0].focus();\n  }\n  if (direction < 0 && elements.toolbar) {\n    getInnerElements(elements, 'toolbar', 'none')[0].focus();\n  }\n};\n\nexport const getClosestCellByRow: PureComputed<\n  [TableRow[], FocusedElement, Elements], FocusedElement\n> = (\n  tableBodyRows, focusedElement, elements,\n) => {\n  const currentIndex = getIndexFromKey(focusedElement.rowKey);\n  const bodyRow = tableBodyRows.find((row) => {\n    return getIndexFromKey(row.key) > currentIndex;\n  });\n  const rowKey = bodyRow ? bodyRow.key : tableBodyRows[tableBodyRows.length - 1].key;\n  const columnKey = focusedElement.columnKey;\n  return {\n    rowKey,\n    columnKey,\n    part: focusedElement.part,\n    index: getIndexInnerElement(elements, rowKey, columnKey, 1),\n  };\n};\n\nexport const getNextFocusedCell: GetNextFocusedElementFn = (\n  tableColumns, tableBodyRows, tableHeaderRows,\n  expandedRowIds, elements, event, inlineEditing, focusedElement,\n  scrollToColumn,\n) => {\n  if (!focusedElement) {\n    const { toolbarElements, pagingElements } = getToolbarPagingElements(elements);\n    const hasFocus = (innerElements: readonly any[]) => {\n      return innerElements.some((el: any) => {\n        return event.target === el;\n      });\n    };\n    if (isCtrlMetaKey(event)) {\n      if (event.key === 'ArrowDown' &&\n      (toolbarElements && hasFocus(toolbarElements) || !toolbarElements)) {\n        return getFirstCell(elements, tableBodyRows, tableColumns,\n          tableHeaderRows, scrollToColumn);\n      }\n      if (event.key === 'ArrowUp' &&\n      (pagingElements && hasFocus(pagingElements) || !pagingElements)) {\n        return getFirstCellInLastPart(elements, tableBodyRows, tableColumns, scrollToColumn);\n      }\n    } else if (event.key === 'Tab') {\n      if (toolbarElements && event.target === toolbarElements[toolbarElements.length - 1] &&\n         !event.shiftKey) {\n        return getFirstCell(elements, tableBodyRows, tableColumns,\n          tableHeaderRows, scrollToColumn, true);\n      }\n      if (pagingElements && event.target === pagingElements[0] && event.shiftKey) {\n        if (scrollToColumn) {\n          return getFirstCellInLastPart(elements, tableBodyRows,\n            tableColumns, scrollToColumn, true);\n        }\n        return getLastCell(elements, tableBodyRows, tableColumns);\n      }\n      const { element } = !event.shiftKey ? getFirstCell(elements, tableBodyRows, tableColumns,\n        tableHeaderRows, undefined, true) :\n        getLastCell(elements, tableBodyRows, tableColumns);\n\n      if (element &&\n        event.target === elements[element.rowKey][element.columnKey][0].current) {\n        return { element };\n      }\n    }\n    return {};\n  }\n  let cell;\n  switch (event.key) {\n    case 'Enter':\n      cell = {\n        element: applyEnterAction(elements, inlineEditing, tableColumns,\n          tableBodyRows, focusedElement),\n      };\n      break;\n    case 'Escape':\n      cell = {\n        element: applyEscapeAction(elements, inlineEditing, tableColumns,\n          tableBodyRows, focusedElement),\n      };\n      break;\n    case ' ':\n      actionOnCheckbox(elements, focusedElement);\n      break;\n    case 'Tab':\n      if (event.shiftKey) {\n        cell = getPrevElement(focusedElement, tableBodyRows, tableColumns,\n          tableHeaderRows, elements, scrollToColumn);\n      } else {\n        cell = getNextElement(focusedElement, tableBodyRows, tableColumns,\n          tableHeaderRows, elements, scrollToColumn);\n      }\n      break;\n    case 'ArrowUp':\n      if (isCtrlMetaKey(event)) {\n        cell = getCellNextPrevPart(focusedElement, elements, tableBodyRows,\n          tableColumns, -1, scrollToColumn);\n        if (!cell.element) {\n          applyFocusOnToolbarPaging(elements, -1);\n        }\n      } else {\n        cell = {\n          element: getCellTopBottom(-1, focusedElement, tableBodyRows, tableColumns, elements),\n        };\n      }\n      break;\n    case 'ArrowDown':\n      if (isCtrlMetaKey(event)) {\n        cell = getCellNextPrevPart(focusedElement, elements, tableBodyRows,\n          tableColumns, 1, scrollToColumn);\n        if (!cell.element) {\n          applyFocusOnToolbarPaging(elements, 1);\n        }\n      } else {\n        cell = {\n          element: getCellTopBottom(1, focusedElement, tableBodyRows, tableColumns, elements),\n        };\n      }\n      break;\n    case 'ArrowLeft':\n      if (isCtrlMetaKey(event)) {\n        actionOnTreeMode(elements, expandedRowIds, -1, focusedElement);\n      } else {\n        cell = { element: getCellRightLeft(-1, focusedElement, tableColumns, elements) };\n      }\n      break;\n    case 'ArrowRight':\n      if (isCtrlMetaKey(event)) {\n        actionOnTreeMode(elements, expandedRowIds, 1, focusedElement);\n      } else {\n        cell = { element: getCellRightLeft(1, focusedElement, tableColumns, elements) };\n      }\n      break;\n  }\n  return cell || {};\n};\n\nexport const getPart = (key: string): string => {\n  if (tableParts.find(t => t === key)) {\n    return key;\n  }\n  if (key.includes(BAND_TYPE)) {\n    return HEADING_TYPE;\n  }\n  return DATA_TYPE;\n};\n\nexport const getIndexToFocus: PureComputed<[\n  string, string, Elements, any, InlineEditing, string,\n], number | undefined> = (\n  key1, key2, elements, event, { startEditCells }, part,\n) => {\n  if (startEditCells && part === DATA_TYPE) {\n    return 0;\n  }\n  const innerElements = getInnerElements(elements, key1, key2);\n  const index = innerElements.findIndex((el) => {\n    return event.target === el;\n  });\n  return index !== -1 ? index : undefined;\n};\n\nexport const filterHeaderRows = (tableHeaderRows: TableRow[]) => {\n  return tableHeaderRows.filter(row =>\n    row.key.includes(BAND_TYPE) || row.key.includes(HEADING_TYPE));\n};\n\nexport const isRowFocused: PureComputed<[TableRow, string?], boolean> = (\n  tableRow, focusedRowKey,\n) => {\n  if (focusedRowKey) {\n    return tableRow.key === focusedRowKey;\n  }\n  return false;\n};\n\nexport const isCellExist: PureComputed<[Elements, FocusedElement], boolean> = (\n  elements, focusedElement,\n) => {\n  return !!(elements[focusedElement.rowKey] &&\n    elements[focusedElement.rowKey][focusedElement.columnKey]);\n};\n\nexport const isTabArrowUpDown = (event: any): boolean => {\n  return event.key === 'Tab' || isCtrlMetaKey(event) && (event.key === 'ArrowDown' || event.key === 'ArrowUp');\n};\n\nexport const focus: PureComputed<\n  [Elements, FocusedElement?,\n  FocusedElement?, OnFocusedCellChangeFn?], void\n> = (\n  elements, focusedElement, prevFocusedElement, onFocusedCellChange,\n) => {\n  if (!focusedElement || !elements[focusedElement.rowKey] ||\n      !elements[focusedElement.rowKey][focusedElement.columnKey]) {\n    return;\n  }\n  const el = focusedElement.index === undefined ?\n  elements[focusedElement.rowKey][focusedElement.columnKey][0] :\n  getInnerElements(elements, focusedElement.rowKey, focusedElement.columnKey)[focusedElement.index];\n\n  if (el) {\n    el.focus ? el.focus() : el.current.focus();\n    if (onFocusedCellChange &&\n        (prevFocusedElement?.rowKey !== focusedElement.rowKey ||\n          prevFocusedElement?.columnKey !== focusedElement.columnKey)) {\n      onFocusedCellChange({\n        rowKey: focusedElement.rowKey, columnKey: focusedElement.columnKey,\n      });\n    }\n  }\n};\n\nexport const isCellFocused: PureComputed<[\n  TableRow, TableColumn, FocusedElement?\n], boolean> = (row, column, focusedElement) => {\n  if (!focusedElement || isDefined(focusedElement.index)) {\n    return false;\n  }\n  return focusedElement.rowKey === row.key && focusedElement.columnKey === column.key;\n};\n", "import {\n    FocusedElement, TableRow,\n} from '../../types';\n\nexport const getFocusing = (tableBodyRows: TableRow[], focusedElement?: FocusedElement) => {\n  if (!focusedElement) {\n    return [];\n  }\n  const focusedRow = tableBodyRows.find((row) => {\n    return row.key === focusedElement.rowKey;\n  });\n  return focusedRow ? [focusedRow.rowId] : [];\n};\n", "import { GetTargetColumnGeometriesFn, GetNodeGeometriesFn } from '../types';\n\nexport const getTargetColumnGeometries: GetTargetColumnGeometriesFn = (\n  columnGeometries, sourceIndex,\n) => {\n  const sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n  const getWidthDifference = (index: number) => columnGeometries[index].right\n                                      - columnGeometries[index].left\n                                      - sourceWidth;\n\n  return columnGeometries\n    .map(({\n      top, right, bottom, left,\n    }, targetIndex) => {\n      let leftBorder = left;\n      if (targetIndex > 0 && targetIndex <= sourceIndex) {\n        leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n      }\n      if (targetIndex > sourceIndex) {\n        leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n      }\n      let rightBorder = right;\n      if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n        rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n      }\n      if (targetIndex < sourceIndex) {\n        rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n      }\n\n      return {\n        top,\n        bottom,\n        right: rightBorder,\n        left: leftBorder,\n      };\n    });\n};\n\nexport const getCellGeometries: GetNodeGeometriesFn = (node) => {\n  const { left, right, width } = node.getBoundingClientRect();\n  const styleLeft = parseInt(node.style.left?.toString().replace('px', ''), 10);\n  const styleRight = parseInt(node.style.right?.toString().replace('px', ''), 10);\n\n  if (!isNaN(styleLeft)) {\n    const calculatedLeft = Math.max(styleLeft, left);\n    return {\n      left: calculatedLeft,\n      right: calculatedLeft + width,\n      isFixed: true,\n    };\n  }\n\n  if (!isNaN(styleRight)) {\n    // NOTE: get tableContainer (parent of first DIV element) to calculate 'right' value\n    let tableContainer = node as HTMLElement | null;\n    while (tableContainer && tableContainer.nodeName !== 'DIV') {\n      tableContainer = tableContainer.parentNode as HTMLElement;\n    }\n    tableContainer = tableContainer?.parentNode as HTMLElement;\n\n    if (tableContainer) {\n      const { width: tableWidth } = tableContainer.getBoundingClientRect();\n      const calculatedRight = Math.min(tableWidth - styleRight, right);\n      return {\n        left: calculatedRight - width,\n        right: calculatedRight,\n        isFixed: true,\n      };\n    }\n  }\n\n  return { left, right };\n};\n", "import { easeOutCubic } from '@devexpress/dx-core';\nimport {\n  GetTableColumnGeometriesFn, GetTableTargetColumnIndexFn, ColumnAnimation,\n  GetColumnAnimationsFn, ColumnGeometry, FilterActiveAnimationsFn, EvalAnimationsFn,\n} from '../types';\n\nexport const getTableColumnGeometries: GetTableColumnGeometriesFn = (columns, tableWidth) => {\n  const columnWidths = columns\n    .map(column => column.width);\n\n  const freeSpace = tableWidth;\n  const restrictedSpace = columnWidths\n    .reduce(\n      (accum, width) => (accum as number)! + (typeof width === 'number' ? width : 0), 0) as number;\n  const freeSpacePortions = columnWidths\n    .reduce(\n      (accum, width) => (accum as number)! + (typeof width !== 'number' ? 1 : 0), 0) as number;\n  const freeSpacePortion = (freeSpace - restrictedSpace!) / freeSpacePortions!;\n\n  let lastRightPosition = 0;\n  return columnWidths\n    .map(width => (typeof width !== 'number' ? freeSpacePortion : width))\n    .map((width) => {\n      lastRightPosition += width;\n      return {\n        left: lastRightPosition - width,\n        right: lastRightPosition,\n      };\n    });\n};\n\nexport const getTableTargetColumnIndex: GetTableTargetColumnIndexFn = (\n  columnGeometries, offset,\n) => {\n  const indexes = columnGeometries.reduce((acc, { left, right }, index) => {\n    if (offset >= left && offset < right) {\n      acc.push(index);\n    }\n    return acc;\n  }, [] as number[]);\n\n  if (columnGeometries.some(({ left, right }) => left <= 0 && right <= 0)) {\n    if (indexes.some(index => columnGeometries[index].isFixed ||\n      columnGeometries[index].left <= 0 && columnGeometries[index].right <= 0)) {\n      return -1;\n    }\n  }\n\n  if (indexes.length === 2) {\n    return indexes.find(index => columnGeometries[index].isFixed)!;\n  }\n  if (indexes.length === 1) {\n    return indexes[0];\n  }\n  return -1;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst getAnimationProgress = (animation: ColumnAnimation) => (\n  new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n\nexport const getAnimations: GetColumnAnimationsFn = (\n  prevColumns,\n  nextColumns,\n  tableWidth,\n  prevAnimations,\n) => {\n  const resizing = prevColumns.map(column => column.key).join()\n    === nextColumns.map(column => column.key).join();\n\n  const prevColumnGeometries = new Map<string, ColumnGeometry>(\n    getTableColumnGeometries(prevColumns, tableWidth)\n      .map((geometry, index) => [prevColumns[index].key, geometry] as [string, ColumnGeometry])\n      .map(([key, geometry]) => {\n        const animation = prevAnimations.get(key);\n        if (!animation) return [key, geometry];\n        const progress = easeOutCubic(getAnimationProgress(animation));\n        const { to, from } = animation.left!;\n        const left = ((to - from) * progress) + from;\n        return [key, {\n          left,\n          right: geometry.right - (geometry.left - left),\n        }];\n      // tslint:disable-next-line:array-type\n      }) as [string, ColumnGeometry][],\n    );\n\n  const nextColumnGeometries = new Map(\n    getTableColumnGeometries(nextColumns, tableWidth)\n      // tslint:disable-next-line:array-type\n      .map((geometry, index) => [nextColumns[index].key, geometry]) as [string, ColumnGeometry][],\n  );\n\n  return new Map([...nextColumnGeometries.keys()]\n    .map((key) => {\n      const prev: any = prevColumnGeometries.get(key);\n      const next: any = nextColumnGeometries.get(key);\n\n      const result: ColumnAnimation = { startTime: new Date().getTime(), style: {} };\n      const takePrevColumnIntoAccount = !!prevAnimations.get(key) || (prev && !resizing);\n      if (Math.abs((takePrevColumnIntoAccount ? prev!.left : next!.left) - next!.left) > 1) {\n        result.left = { from: prev.left, to: next.left };\n      }\n      return [key, result] as [string, ColumnAnimation];\n    })\n    .filter((animation: [string, ColumnAnimation]) => animation[1].left));\n};\n\nexport const filterActiveAnimations: FilterActiveAnimationsFn = animations => new Map(\n  [...animations.entries()]\n    .filter(([, animation]) => getAnimationProgress(animation) < 1),\n);\n\nexport const evalAnimations: EvalAnimationsFn = animations => new Map([...animations.entries()]\n  .map(([key, animation]): [string, object] => {\n    const progress = easeOutCubic(getAnimationProgress(animation));\n    const result = { ...animation.style };\n    if (animation.left) {\n      const offset = (animation.left.to - animation.left.from) * (progress - 1);\n      (result as any).transform = `translateX(${offset}px)`;\n    }\n    return [key, result];\n  }));\n", "import { getTargetColumnGeometries } from './column-geometries';\nimport { TargetColumnGeometry, GetGroupCellTargetIndexFn } from '../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nconst isOnTheSameLine: PureComputed<[TargetColumnGeometry, number], boolean> = (geometry, y) => (\n  y >= geometry.top && y <= geometry.bottom\n);\n\nconst rectToObject = ({\n  top, right, bottom, left,\n}: TargetColumnGeometry) => ({\n  top, right, bottom, left,\n});\n\nconst collapseGapsBetweenItems: PureComputed<[TargetColumnGeometry[]]> = geometries => (\n  geometries.map((geometry, index) => {\n    if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n      return {\n        ...geometry,\n        right: geometries[index + 1].left,\n      };\n    }\n    return geometry;\n  }));\n\nexport const getGroupCellTargetIndex: GetGroupCellTargetIndexFn = (\n  geometries, sourceIndex, { x, y },\n) => {\n  if (geometries.length === 0) return 0;\n\n  const targetGeometries = sourceIndex !== -1\n    ? getTargetColumnGeometries(geometries, sourceIndex)\n    : geometries.map(rectToObject);\n\n  const targetIndex = collapseGapsBetweenItems(targetGeometries)\n    .findIndex((geometry, index) => {\n      const inVerticalBounds = isOnTheSameLine(geometry, y);\n      const inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n      const shouldGoFirst = index === 0 && x < geometry.left;\n      const shouldGoOnLineBreak = !inVerticalBounds\n        && !!geometries[index - 1]\n        && isOnTheSameLine(geometries[index - 1], y);\n\n      return (inVerticalBounds && inHorizontalBounds)\n        || shouldGoFirst\n        || shouldGoOnLineBreak;\n    });\n\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n", "import { PureComputed } from '@devexpress/dx-core';\n\ntype CompareFn = (...args: [any, any]) => boolean;\n/** @internal */\nexport const arraysEqual: PureComputed<[any[], any[], CompareFn?], boolean> = (\n  arrA, arrB, comparator = (a, b) => a === b,\n) => {\n  if (arrA.length !== arrB.length) {\n    return false;\n  }\n  for (let i = 0; i < arrA.length; i += 1) {\n    if (!comparator(arrA[i], arrB[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n", "import { GridViewport } from '../../types';\n\n/** @internal */\nexport const emptyViewport: GridViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600,\n};\n\nexport const TOP_POSITION = Symbol('top');\nexport const BOTTOM_POSITION = Symbol('bottom');\nexport const LEFT_POSITION = Symbol('left');\nexport const RIGHT_POSITION = Symbol('right');\n", "import {\n  getRowsVisibleBoundary, getColumnBoundaries,\n} from '../../utils/virtual-table';\nimport {\n  GetViewportFn,\n  CheckTableColumnWidths,\n  TableColumn,\n  GetScrollHeightByIndex,\n  GetScrollPosition,\n  GetTopRowId,\n  GetScrollLeft,\n} from '../../types';\nimport { arraysEqual } from './utils';\nimport { TOP_POSITION, BOTTOM_POSITION, LEFT_POSITION } from './constants';\n\nconst VALID_UNITS = ['px', ''];\n/* tslint:disable max-line-length */\nconst VIRTUAL_TABLE_ERROR = 'The columnExtension property of the VirtualTable plugin is given an invalid value.';\n\nexport const getViewport: GetViewportFn = (\n  state, getters, estimatedRowHeight, getRowHeight, getColumnWidth,\n) => {\n  const {\n    viewportTop, viewportLeft, containerWidth, containerHeight,\n  } = state;\n  const {\n    loadedRowsStart,\n    bodyRows: tableBodyRows,\n    columns: tableColumns,\n    headerRows: tableHeaderRows = [],\n    footerRows: tableFooterRows = [],\n    isDataRemote,\n    viewport,\n  } = getters;\n\n  const rows = getRowsVisibleBoundary(\n    tableBodyRows, viewportTop, containerHeight,\n    getRowHeight, loadedRowsStart, estimatedRowHeight, isDataRemote,\n  );\n  const headerRows = getRowsVisibleBoundary(\n    tableHeaderRows, 0, 0,\n    getRowHeight, 0, estimatedRowHeight, false,\n  );\n  const footerRows = getRowsVisibleBoundary(\n    tableFooterRows, 0, 0,\n    getRowHeight, 0, estimatedRowHeight, false,\n  );\n  const columns = getColumnBoundaries(\n    tableColumns, viewportLeft, containerWidth, getColumnWidth,\n  );\n\n  // NOTE: prevent unnecessary updates\n  // e.g. when rows changed but bounds remain the same.\n  let result = viewport;\n  if (viewportTop !== viewport.top) {\n    result = { ...result, top: viewportTop };\n  }\n  if (viewportLeft !== viewport.left) {\n    result = { ...result, left: viewportLeft };\n  }\n  if (containerWidth !== viewport.width) {\n    result = { ...result, width: containerWidth };\n  }\n  if (containerHeight !== viewport.height) {\n    result = { ...result, height: containerHeight };\n  }\n  if (!arraysEqual(rows, viewport.rows)) {\n    result = { ...result, rows };\n  }\n  if (!arraysEqual(headerRows, viewport.headerRows)) {\n    result = { ...result, headerRows };\n  }\n  if (!arraysEqual(footerRows, viewport.footerRows)) {\n    result = { ...result, footerRows };\n  }\n  if (!arraysEqual(columns, viewport.columns, arraysEqual)) {\n    result = { ...result, columns };\n  }\n\n  return result;\n};\n\nexport const checkColumnWidths: CheckTableColumnWidths = (tableColumns) => {\n  return tableColumns.reduce((acc, tableColumn) => {\n    const { width } = tableColumn;\n    if (typeof width === 'string') {\n      const numb = parseInt(width, 10);\n      const unit = numb ? width.substr(numb.toString().length) : width;\n      const isValidUnit = VALID_UNITS.some(validUnit => validUnit === unit);\n      if (!isValidUnit) {\n        throw new Error(VIRTUAL_TABLE_ERROR);\n      }\n      acc.push({ ...tableColumn, width: numb });\n    } else {\n      acc.push(tableColumn);\n    }\n    return acc;\n  }, []  as TableColumn[]);\n};\n\nexport const calculateScrollHeight: GetScrollHeightByIndex = (rowHeight, index) =>\n  index > -1 ? rowHeight * index : undefined;\n\nexport const getScrollTop: GetScrollPosition = (rows, rowsCount, rowId, rowHeight, isDataRemote) => {\n  if (rowId === TOP_POSITION) {\n    return 0;\n  }\n  if (rowId === BOTTOM_POSITION) {\n    return rowsCount * rowHeight;\n  }\n\n  const searchIndexRequired = !isDataRemote && rowId !== undefined;\n  const indexById = searchIndexRequired\n    ? rows.findIndex(row => row.rowId === rowId)\n    : undefined;\n\n  return calculateScrollHeight(\n    rowHeight,\n    indexById!,\n  );\n};\n\nexport const getScrollLeft: GetScrollLeft = (columnCount, columnWidth, columnId) => {\n  if (!columnId) {\n    return;\n  }\n  if (columnId === LEFT_POSITION) {\n    return 0;\n  }\n  return columnCount * columnWidth;\n};\n\nexport const getTopRowId: GetTopRowId = (viewport, tableBodyRows, isDataRemote) => {\n  const hasViewportRows = viewport && viewport.rows;\n  const hasBodyRows = tableBodyRows && tableBodyRows.length;\n  if (hasViewportRows && hasBodyRows && !isDataRemote) {\n    const index = viewport.rows[0];\n\n    return index < tableBodyRows.length ? tableBodyRows[index].rowId : undefined;\n  }\n\n  return undefined;\n};\n", "import { mergeRows } from './helpers';\nimport { intervalUtil } from './utils';\nimport { VirtualRowsWithCacheFn, PlainRowsFn, LoadedRowsStartFn } from '../../types';\n\nexport const virtualRowsWithCache: VirtualRowsWithCacheFn = (skip, rows, cache) => {\n  const rowsInterval = intervalUtil.getRowsInterval({ skip, rows });\n  const cacheInterval = intervalUtil.getRowsInterval(cache);\n\n  return mergeRows(rowsInterval, cacheInterval, rows, cache.rows, skip, cache.skip);\n};\n\nexport const plainRows: PlainRowsFn = (virtualRows, availableRowCount) => {\n  return virtualRows.rows.length > availableRowCount\n    ? virtualRows.rows.slice(0, availableRowCount)\n    : virtualRows.rows;\n};\n\nexport const loadedRowsStart: LoadedRowsStartFn = virtualRows => virtualRows.skip;\n", "export const ROOT_GROUP = '__root__';\nexport const DEFAULT_COLUMN_WIDTH = 150;\n", "// tslint:disable-next-line: no-submodule-imports\nimport * as Excel from 'exceljs';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  TableColumn, FindRangesFn, ExportRowsFn,\n  CloseSheetFn,\n  ExportSummaryItemsFn,\n  RemoveEmptyGroupsFn,\n} from '../../types';\nimport { ROOT_GROUP, DEFAULT_COLUMN_WIDTH } from './constants';\n\nexport const exportHeader = (worksheet: Excel.Worksheet, columns: TableColumn[]) => {\n  const cols = columns\n    .map(({ column, width }) => ({\n      width: (width as number || DEFAULT_COLUMN_WIDTH) / 8,\n      key: column?.name,\n    }));\n  worksheet.columns = cols;\n\n  const headerRow = columns.reduce((acc, { column: { name, title } = {} }) => ({\n    ...acc,\n    [name!]: title,\n  }), {});\n  worksheet.addRow(headerRow);\n\n  worksheet.views.push({\n    state: 'frozen', ySplit: worksheet.lastRow!.number,\n  });\n};\n\nexport const findRanges: FindRangesFn = (groupTree, compoundKey, level, maxLevel, result = []) => {\n  if (level !== maxLevel) {\n    const ranges = (groupTree[compoundKey] as string[]).reduce((acc, groupKey) => (\n      [...acc, ...findRanges(groupTree, groupKey, level + 1, maxLevel, result)]\n    ), [] as Array<number[]>);\n    return [...result, ...ranges];\n  }\n  return [...result, groupTree[compoundKey] as number[]];\n};\n\nexport const exportRows: ExportRowsFn = (\n  worksheet, allRows, dataColumns, columns, isGroupRow, outlineLevels,\n  rowsOffset, getCellValue, getCloseGroup, customizeCell,\n) => {\n  let currentLevel = 0;\n  let openGroups: any[] = [];\n  const closeGroup = getCloseGroup(rowsOffset);\n\n  allRows.forEach((row) => {\n    let excelRow;\n\n    if (isGroupRow && isGroupRow(row)) {\n      currentLevel = outlineLevels[row.groupedBy];\n\n      // close nested groups first\n      openGroups.slice(currentLevel).reverse().forEach(closeGroup);\n\n      openGroups = openGroups.slice(0, currentLevel);\n      openGroups[currentLevel] = { groupedBy: row.groupedBy, compoundKey: row.compoundKey };\n\n      // add group row\n      const title = dataColumns.find(({ name }) => name === row.groupedBy)?.title;\n      excelRow = { [columns[0].column!.name]: `${title}: ${row.value}` };\n\n      worksheet.addRow(excelRow);\n      const lastIndex = worksheet.lastRow!.number;\n\n      // merge into single cell\n      worksheet.mergeCells(lastIndex, 1, lastIndex, columns.length);\n      worksheet.lastRow!.getCell(1).font = { bold: true };\n\n      if (currentLevel > 0) {\n        worksheet.lastRow!.outlineLevel = currentLevel;\n      }\n      currentLevel += 1;\n    } else {\n      excelRow = columns.reduce((acc, { column }) => ({\n        ...acc,\n        ...(column ? { [column.name]: getCellValue(row, column.name) } : null),\n      }), {});\n      worksheet.addRow(excelRow);\n      worksheet.lastRow!.outlineLevel = currentLevel;\n    }\n\n    worksheet.lastRow!.eachCell((cell, colNumber) => {\n      customizeCell(cell, row, columns[colNumber - 1].column!);\n    });\n  });\n\n  openGroups.reverse().forEach(closeGroup);\n};\n\nexport const closeSheet: CloseSheetFn = (\n  worksheet, groupTree, maxGroupLevel, rowsOffset, totalSummaryItems, exportSummary,\n) => {\n  exportSummaryItems(\n    worksheet, groupTree, totalSummaryItems, ROOT_GROUP, -1,\n    rowsOffset, maxGroupLevel, exportSummary,\n  );\n};\n\nexport const normalizeRanges: PureComputed<[number[][], number]> = (ranges, offset) => (\n  ranges.map(range => range.map(index => + index + offset))\n);\n\nexport const exportSummaryItems: ExportSummaryItemsFn = (\n  worksheet, groupTree, summaryItems, groupKey, groupLevel,\n  rowsOffset, maxGroupLevel, exportSummary,\n) => {\n  if (!summaryItems) return;\n\n  worksheet.addRow({});\n\n  const ranges = normalizeRanges(\n    findRanges(groupTree, groupKey, groupLevel, maxGroupLevel),\n    rowsOffset,\n  );\n\n  summaryItems.forEach((s) => {\n    exportSummary(s, ranges);\n  });\n};\n\nexport const removeEmptyGroups: RemoveEmptyGroupsFn = (rows, grouping, isGroupRow) => {\n  if (!grouping) return rows;\n\n  const groupingColumns = grouping.map(({ columnName }) => columnName);\n  const result: any[] = [];\n  let groupChain: any[] = [];\n\n  rows.forEach((row) => {\n    if (isGroupRow(row)) {\n      const level = groupingColumns.indexOf(row.groupedBy);\n      if (level === groupChain.length) {\n        groupChain.push(row);\n      } else {\n        groupChain = [...groupChain.slice(0, level), row];\n      }\n    } else {\n      if (groupChain.length > 0) {\n        result.push(...groupChain);\n        groupChain = Array.from({ length: groupChain.length });\n      }\n      result.push(row);\n    }\n  });\n\n  return result.filter(row => !!row);\n};\n", "import {\n  OutlineLevelsFn, FilterSelectedRowsFn, GetRowsToExportFn, Row, BuildGroupTreeFn,\n  GetExportSummaryFn, GetCloseGroupFn, Grouping, RowId,\n} from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { ROOT_GROUP } from './constants';\nimport { exportSummaryItems, removeEmptyGroups } from './helpers';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const groupOutlineLevels: OutlineLevelsFn = grouping => (\n  grouping?.reduce((acc, { columnName }, index) => ({\n    ...acc,\n    [columnName]: index,\n  }), {}) || {}\n);\n\nconst filterSelectedRows: FilterSelectedRowsFn = (rows, selection, getRowId, isGroupRow) => {\n  const selectionSet = new Set<RowId>(selection);\n  return rows.filter(row => (\n    isGroupRow && isGroupRow(row)) || selectionSet.has(getRowId(row)),\n  );\n};\n\nexport const rowsToExport: GetRowsToExportFn = (\n  rows, selection, grouping, getCollapsedRows, getRowId, isGroupRow,\n) => {\n  const expandRows: PureComputed<[Row[]]> = collapsedRows => (\n    collapsedRows.reduce((acc, row) => (\n      [...acc, row, ...(expandRows(getCollapsedRows!(row) || []))]\n    ), [])\n  );\n\n  const expandedRows = getCollapsedRows ? expandRows(rows) : rows;\n\n  if (!selection) {\n    return expandedRows;\n  }\n\n  const filteredRows = filterSelectedRows(expandedRows, selection, getRowId, isGroupRow);\n  return removeEmptyGroups(filteredRows, grouping, isGroupRow);\n};\n\nexport const buildGroupTree: BuildGroupTreeFn = (\n  rows, outlineLevels, grouping, isGroupRow, groupSummaryItems,\n) => {\n  const groupTree = { [ROOT_GROUP]: [] as any[] };\n\n  if (!grouping?.length) {\n    groupTree[ROOT_GROUP] = [0, rows.length - 1];\n    return groupTree;\n  }\n\n  const maxLevel = Object.keys(outlineLevels).length - 1;\n  const groupSummaryExists = !!groupSummaryItems;\n  const parentChain = { '-1': ROOT_GROUP };\n  let lastDataIndex = 0;\n  let openGroup = '';\n  let index = 0;\n  let level = 0;\n  let prevLevel = 0;\n\n  rows.forEach((row) => {\n    const { groupedBy, compoundKey } = row;\n    if (isGroupRow(row)) {\n      level = outlineLevels[groupedBy];\n      groupTree[compoundKey] = [];\n      parentChain[level] = compoundKey;\n      if (level <= maxLevel) {\n        groupTree[parentChain[level - 1]].push(compoundKey);\n      }\n      if (level === maxLevel) {\n        if (openGroup) {\n          // close previous group\n          groupTree[openGroup].push(lastDataIndex);\n        }\n        openGroup = compoundKey;\n        if (groupSummaryExists && lastDataIndex > 0) {\n          index += 1;\n        }\n        groupTree[compoundKey].push(index + 1); // first row index\n      } else if (groupSummaryExists && level < prevLevel) {\n        // jump over summary rows\n        index += maxLevel - level;\n      }\n      prevLevel = level;\n    } else {\n      lastDataIndex = index;\n    }\n    index += 1;\n  });\n\n  if (openGroup) {\n    groupTree[openGroup].push(lastDataIndex);\n  }\n\n  return groupTree;\n};\n\nconst operations = {\n  count: 'COUNTA',\n};\nexport const exportSummaryGetter: GetExportSummaryFn = (\n  worksheet, tableColumns, customizeSummaryCell, defaultSummaryMessages,\n) => (\n  { columnName, type }, ranges,\n) => {\n  const { column } = tableColumns.find(({ column: dataColumn, type: columnType }) => (\n    columnType === TABLE_DATA_TYPE && dataColumn && dataColumn.name === columnName\n  )) || {};\n  // NOTE: column is hidden or the grid grouped by this column\n  if (!column) {\n    return;\n  }\n\n  const row = worksheet.lastRow!;\n  const letter = worksheet.getColumn(columnName).letter;\n  const operation = operations[type] || type.toUpperCase();\n  const rangesStr = ranges.map(range => (\n    range\n      .map(r => `${letter}${r}`)\n      .filter((val, index, arr) => arr.indexOf(val) === index)\n      .join(':')\n  )).join(',');\n\n  const cell = row.getCell(columnName);\n  cell.value = {\n    formula: `${operation}(${rangesStr})`,\n    date1904: false,\n  };\n  cell.numFmt = `\"${defaultSummaryMessages[type]}:\" 0`;\n\n  const summary = {\n    type,\n    ranges,\n  };\n  customizeSummaryCell(cell, column!, summary);\n};\n\nexport const closeGroupGetter: GetCloseGroupFn = (\n  worksheet, groupTree, outlineLevels, maxGroupLevel, groupSummaryItems, exportSummary,\n) => rowsOffset => (group) => {\n  const { groupedBy, compoundKey } = group;\n\n  exportSummaryItems(\n    worksheet, groupTree, groupSummaryItems, compoundKey, outlineLevels[groupedBy],\n    rowsOffset, maxGroupLevel, exportSummary,\n  );\n};\n\nexport const maximumGroupLevel: PureComputed<[Grouping[]], number> = grouping => (\n  (grouping || []).length - 1\n);\n", "import * as React from 'react';\nimport {\n  Getter, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping } from '@devexpress/dx-grid-core';\nimport { ShowColumnWhenGroupedGetterFn, TableColumnsWithGroupingProps } from '../../types';\n\nconst showColumnWhenGroupedGetter: ShowColumnWhenGroupedGetterFn = (\n  showColumnsWhenGrouped, columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\n/** @internal */\nexport const TableColumnsWithGrouping: React.FunctionComponent<\n  TableColumnsWithGroupingProps\n> = React.memo(({\n  indentColumnWidth, showColumnsWhenGrouped, columnExtensions,\n}) => {\n  const tableColumnsComputed = ({\n    columns, tableColumns, grouping, draftGrouping,\n  }: Getters) => tableColumnsWithGrouping(\n    columns,\n    tableColumns,\n    grouping,\n    draftGrouping,\n    indentColumnWidth!,\n    showColumnWhenGroupedGetter(showColumnsWhenGrouped!, columnExtensions),\n  );\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0,\n};\n", "import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\nimport { GridCoreGettersProps } from '../../types';\n\nexport const GridCoreGetters: React.FunctionComponent<GridCoreGettersProps> = React.memo(({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n}) => (\n  <Plugin>\n    <Getter name=\"rows\" value={rows} />\n    <Getter name=\"getRowId\" value={rowIdGetter(getRowId!, rows)} />\n    <Getter name=\"columns\" value={columns} />\n    <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue!, columns)} />\n  </Plugin>\n));\n", "import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithDataRows, checkTableColumnExtensions } from '@devexpress/dx-grid-core';\nimport { Table } from '../../types';\n\nexport const TableColumnsWithDataRowsGetter: React.FunctionComponent<\n  { columnExtensions?: Table.ColumnExtension[]; }\n> = React.memo(({ columnExtensions }) => {\n  const tableColumnsComputed = React.useCallback(\n    ({ columns }) => (\n      tableColumnsWithDataRows(columns, columnExtensions!)\n    ), [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n", "import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  visibleTableColumns,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumnsProps } from '../../types';\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames }: Getters,\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\n/** @internal */\nexport const VisibleTableColumns: React.FunctionComponent<\n  VisibleTableColumnsProps\n> = React.memo(({\n  hiddenColumnNames,\n}) => (\n  <Plugin>\n    <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n    <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n  </Plugin>\n));\n\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: [],\n};\n", "import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  orderedColumns,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumnsProps } from '../../types';\n\n/** @internal */\nexport const OrderedTableColumns: React.FunctionComponent<\n  OrderedTableColumnsProps\n> = ({\n  order,\n}) => {\n  const columnsComputed = (\n    { tableColumns }: Getters,\n  ) => orderedColumns(tableColumns, order!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={columnsComputed} />\n    </Plugin>\n  );\n};\n\nOrderedTableColumns.defaultProps = {\n  order: [],\n};\n", "import * as React from 'react';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { GridProps } from '../types';\nimport { GridCoreGetters } from './internal';\n\nexport class GridCore extends React.PureComponent<GridProps, any> {\n  rootRef: React.RefObject<HTMLTableElement>;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ref: {},\n    };\n    this.rootRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      ref: this.rootRef,\n    });\n  }\n\n  render() {\n    const {\n      rootComponent: Root,\n      ...restProps\n    } = this.props;\n    const { ref } = this.state;\n\n    return (\n      <Plugin>\n        <Getter name=\"skip\" value={0} />\n        <Getter name=\"loadedRowsStart\" value={0} />\n        <Getter name=\"rootRef\" value={ref} />\n        <GridCoreGetters {...restProps} />\n\n        <Template name=\"root\">\n          <Root rootRef={this.rootRef}>\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n", "import * as React from 'react';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { GridCore } from './plugins/grid-core';\nimport { GridProps } from './types';\n\nconst GridBase: React.SFC<GridProps> = ({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n  rootComponent,\n  children,\n}) => (\n  <PluginHost>\n    <GridCore\n      rows={rows}\n      columns={columns}\n      getRowId={getRowId}\n      getCellValue={getCellValue}\n      rootComponent={rootComponent}\n    />\n    {children}\n  </PluginHost>\n);\n\n/***\n * The Grid is a root container component designed to process and display data specified via\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\n * functionality  is implemented in several plugins specified as child components.\n * See the plugins concept for details.\n * */\nexport const Grid: React.ComponentType<GridProps> = GridBase;\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { columnChooserItems } from '@devexpress/dx-grid-core';\nimport { ColumnChooserState, ColumnChooserProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TableColumnVisibility' },\n  { name: 'Toolbar' },\n];\n\nclass ColumnChooserBase extends React.PureComponent<ColumnChooserProps, ColumnChooserState> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton',\n  };\n  button!: React.ReactInstance;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n    this.setButtonRef = this.setButtonRef.bind(this);\n  }\n\n  setButtonRef(button) {\n    this.button = button;\n  }\n\n  handleToggle() {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n    const { visible } = this.state;\n\n    return (\n      <Plugin\n        name=\"ColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {(\n              { columns, hiddenColumnNames, isColumnTogglingEnabled },\n              { toggleColumnVisibility },\n            ) => (\n              <React.Fragment>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                  active={visible}\n                />\n                <Overlay\n                  visible={visible}\n                  target={this.button}\n                  onHide={this.handleHide}\n                >\n                  <Container>\n                    {columnChooserItems(columns, hiddenColumnNames)\n                      .map((item) => {\n                        const { name: columnName } = item.column;\n                        const togglingEnabled = isColumnTogglingEnabled(columnName);\n                        return (\n                          <Item\n                            key={columnName}\n                            item={item}\n                            disabled={!togglingEnabled}\n                            onToggle={() => toggleColumnVisibility(columnName)}\n                          />\n                        );\n                      })}\n                  </Container>\n                </Overlay>\n              </React.Fragment>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\n * The column chooser lists columns with checkboxes that control a corresponding\n * column's visibility.\n * */\nexport const ColumnChooser: React.ComponentType<ColumnChooserProps> = ColumnChooserBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n  ChangeFilterPayload,\n} from '@devexpress/dx-grid-core';\nimport { FilteringStateProps, FilteringStateState } from '../types';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => (\n  getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue)\n);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue }: Getters,\n) => filterExpression(filters, filterExpressionValue);\n\nclass FilteringStateBase extends React.PureComponent<FilteringStateProps, FilteringStateState> {\n  static defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true,\n  };\n  changeColumnFilter: (payload: ChangeFilterPayload) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filters: props.filters || props.defaultFilters,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        filters: () => {\n          const { onFiltersChange } = this.props;\n          return onFiltersChange;\n        },\n      },\n    );\n\n    this.changeColumnFilter = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'filters', changeColumnFilter);\n  }\n\n  // tslint:disable-next-line:member-ordering\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      filters = prevState.filters,\n    } = nextProps;\n\n    return {\n      filters,\n    };\n  }\n\n  render() {\n    const { filters } = this.state;\n    const { columnExtensions, columnFilteringEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"FilteringState\"\n      >\n        <Getter name=\"filters\" value={filters} />\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the filtering state. */\nexport const FilteringState: React.ComponentType<FilteringStateProps> = FilteringStateBase;\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  filteredRows,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  getColumnExtension,\n  defaultFilterPredicate,\n  FilterPredicate,\n} from '@devexpress/dx-grid-core';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { IntegratedFilteringProps, DefaultPredicateFn } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState', optional: true },\n  { name: 'SearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }: Getters) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }: Getters) => unwrappedFilteredRows(rows);\n\nclass IntegratedFilteringBase extends React.PureComponent<IntegratedFilteringProps> {\n  static defaultPredicate: DefaultPredicateFn;\n\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnPredicate: PureComputed<\n      [string], FilterPredicate\n    > = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate!;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }: Getters) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={unwrappedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\n\nexport const IntegratedFiltering: React.ComponentType<IntegratedFilteringProps> & {\n  /***\n   * The built-in filter predicate.\n   * The `filter` parameter accepts an object containing the 'value' field.\n   **/\n  defaultPredicate: DefaultPredicateFn;\n} = IntegratedFilteringBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n  getColumnExtensionValueGetter,\n  startEditCells,\n  stopEditCells,\n} from '@devexpress/dx-grid-core';\nimport { EditingStateProps, EditingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nclass EditingStateBase extends React.PureComponent<EditingStateProps, EditingStateState> {\n  static defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultEditingCells: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: [],\n  };\n  startEditRows: (payload: any) => void;\n  stopEditRows: (payload: any) => void;\n  startEditCells: (payload: any) => void;\n  stopEditCells: (payload: any) => void;\n  changeRow: (payload: any) => void;\n  cancelChangedRows: (payload: any) => void;\n  commitChangedRows: ({ rowIds }: { rowIds: any; }) => void;\n  addRow: (payload: any) => void;\n  changeAddedRow: (payload: any) => void;\n  cancelAddedRows: (payload: any) => void;\n  commitAddedRows: ({ rowIds }: { rowIds: any; }) => void;\n  deleteRows: (payload: any) => void;\n  cancelDeletedRows: (payload: any) => void;\n  commitDeletedRows: ({ rowIds }: { rowIds: any; }) => void;\n\n  constructor(props) {\n    super(props);\n    const rowChanges = props.rowChanges || props.defaultRowChanges;\n    const addedRows = props.addedRows || props.defaultAddedRows;\n    const getRowChanges = () => {\n      const { rowChanges: stateRowChanges } = this.state;\n      return stateRowChanges;\n    };\n    const getAddedRows = () => {\n      const { addedRows: stateAddedRows } = this.state;\n      return stateAddedRows;\n    };\n\n    this.state = {\n      addedRows,\n      rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n      editingCells: props.editingCells || props.defaultEditingCells,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        editingRowIds: () => {\n          const { onEditingRowIdsChange } = this.props;\n          return onEditingRowIdsChange;\n        },\n        editingCells: () => {\n          const { onEditingCellsChange } = this.props;\n          return onEditingCellsChange;\n        },\n        addedRows: () => {\n          const { onAddedRowsChange } = this.props;\n          return onAddedRowsChange;\n        },\n        rowChanges: () => {\n          const { onRowChangesChange } = this.props;\n          return onRowChangesChange;\n        },\n        deletedRowIds: () => {\n          const { onDeletedRowIdsChange } = this.props;\n          return onDeletedRowIdsChange;\n        },\n      },\n    );\n\n    this.startEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', startEditRows);\n    this.stopEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', stopEditRows);\n\n    this.startEditCells = stateHelper.applyFieldReducer\n    .bind(stateHelper, 'editingCells', startEditCells);\n    this.stopEditCells = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingCells', stopEditCells);\n\n    this.changeRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', changeRow);\n    this.cancelChangedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', cancelChanges);\n    this.commitChangedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds),\n      });\n      this.cancelChangedRows({ rowIds });\n    };\n\n    this.addRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', addRow);\n    this.changeAddedRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', changeAddedRow);\n    this.cancelAddedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', cancelAddedRows);\n    this.commitAddedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds),\n      });\n      this.cancelAddedRows({ rowIds });\n    };\n\n    this.deleteRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', deleteRows);\n    this.cancelDeletedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    this.commitDeletedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({ deleted: rowIds });\n      this.cancelDeletedRows({ rowIds });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingRowIds = prevState.editingRowIds,\n      editingCells = prevState.editingCells,\n      rowChanges = prevState.rowChanges,\n      addedRows = prevState.addedRows,\n      deletedRowIds = prevState.deletedRowIds,\n    } = nextProps;\n\n    return {\n      editingRowIds,\n      editingCells,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    };\n  }\n\n  render() {\n    const { createRowChange, columnExtensions, columnEditingEnabled } = this.props;\n    const {\n      editingRowIds, editingCells, rowChanges, addedRows, deletedRowIds,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <Getter name=\"editingRowIds\" value={editingRowIds} />\n        <Action name=\"startEditRows\" action={this.startEditRows} />\n        <Action name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <Getter name=\"editingCells\" value={editingCells} />\n        <Action name=\"startEditCells\" action={this.startEditCells} />\n        <Action name=\"stopEditCells\" action={this.stopEditCells} />\n\n        <Getter name=\"rowChanges\" value={rowChanges} />\n        <Action name=\"changeRow\" action={this.changeRow} />\n        <Action name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <Action name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <Getter name=\"addedRows\" value={addedRows} />\n        <Action name=\"addRow\" action={this.addRow} />\n        <Action name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <Action name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <Action name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <Getter name=\"deletedRowIds\" value={deletedRowIds} />\n        <Action name=\"deleteRows\" action={this.deleteRows} />\n        <Action name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <Action name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <Getter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages grid rows' editing state. It arranges grid rows\n * by different lists depending on a row's state.\n * */\nexport const EditingState: React.ComponentType<EditingStateProps> = EditingStateBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\nimport { PagingStateProps, PagingStateState } from '../types';\n\nclass PagingStateBase extends React.PureComponent<PagingStateProps, PagingStateState> {\n  static defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0,\n  };\n  setCurrentPage: (payload: any) => void;\n  setPageSize: (payload: any) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        currentPage: () => {\n          const { onCurrentPageChange } = this.props;\n          return onCurrentPageChange;\n        },\n        pageSize: () => {\n          const { onPageSizeChange } = this.props;\n          return onPageSizeChange;\n        },\n      },\n    );\n\n    this.setCurrentPage = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentPage', setCurrentPage);\n    this.setPageSize = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'pageSize', setPageSize);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentPage = prevState.currentPage,\n      pageSize = prevState.pageSize,\n    } = nextProps;\n\n    return {\n      currentPage,\n      pageSize,\n    };\n  }\n\n  render() {\n    const { pageSize, currentPage } = this.state;\n\n    return (\n      <Plugin\n        name=\"PagingState\"\n      >\n        <Getter name=\"currentPage\" value={currentPage} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Action name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <Action name=\"setPageSize\" action={this.setPageSize} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the paging state. It controls the total page count depending on the\n * total row count and the specified page size, controls the currently selected page number\n * and changes it in response to the corresponding actions.\n * */\nexport const PagingState: React.ComponentType<PagingStateProps> = PagingStateBase;\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey }: Getters,\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }: Getters) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page }: Getters,\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }: Getters, { setCurrentPage }: Actions,\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedPagingBase extends React.PureComponent<IntegratedPagingProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <Getter name=\"totalCount\" computed={totalCountComputed} />\n        <Getter name=\"currentPage\" computed={currentPageComputed} />\n        <Getter name=\"rows\" computed={paginatedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that performs built-in data paging. It also changes the current page if the provided\n * one cannot be applied due to fewer available pages.\n * */\nexport const IntegratedPaging: React.ComponentType<IntegratedPagingProps> = IntegratedPagingBase;\n", "import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nclass CustomPagingBase extends React.PureComponent<CustomPagingProps> {\n  static defaultProps = {\n    totalCount: 0,\n  };\n\n  render() {\n    const { totalCount } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalCount\" value={totalCount} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows implementing a custom totalCount calculation logic. */\nexport const CustomPaging: React.ComponentType<CustomPagingProps> = CustomPagingBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper, ActionFn, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  draftColumnGrouping,\n  cancelColumnGroupingDraft,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n  ChangeGroupingPayload,\n  ToggleGroupPayload,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { GroupingStateProps, GroupingStateState } from '../types';\n\nconst dependencies = [\n  { name: 'SortingState', optional: true },\n];\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nclass GroupingStateBase extends React.PureComponent<GroupingStateProps, GroupingStateState> {\n  static defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true,\n  };\n  stateHelper: StateHelper;\n  draftColumnGrouping: ActionFn<ChangeGroupingPayload>;\n  toggleGroupExpanded: ActionFn<ToggleGroupPayload>;\n  cancelColumnGroupingDraft: ActionFn<void>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        grouping: () => {\n          const { onGroupingChange } = this.props;\n          return onGroupingChange;\n        },\n        expandedGroups: () => {\n          const { onExpandedGroupsChange } = this.props;\n          return onExpandedGroupsChange;\n        },\n      },\n    );\n\n    this.changeColumnGrouping = this.changeColumnGrouping.bind(this);\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n    this.draftColumnGrouping = this.stateHelper.applyReducer\n      .bind(this.stateHelper, draftColumnGrouping);\n    this.cancelColumnGroupingDraft = this.stateHelper.applyReducer\n      .bind(this.stateHelper, cancelColumnGroupingDraft);\n    this.changeColumnSorting = this.changeColumnSorting.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return {\n      grouping,\n      expandedGroups,\n    };\n  }\n\n  changeColumnSorting(\n    { columnName, keepOther, ...restParams }: ChangeSortingPayload,\n    { sorting }: Getters,\n    { changeColumnSorting }: Actions,\n  ) {\n    const { grouping } = this.state;\n    const groupingIndex = grouping\n      .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n    if (groupingIndex === -1) {\n      changeColumnSorting({\n        columnName,\n        keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n        ...restParams,\n      });\n      return false;\n    }\n\n    const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting({\n      columnName,\n      sortIndex,\n      keepOther: true,\n      ...restParams,\n    });\n    return false;\n  }\n\n  changeColumnGrouping(\n    { columnName, groupIndex }: ChangeGroupingPayload,\n    getters?: Getters,\n    actions?: Actions,\n  ) {\n    this.stateHelper.applyReducer(\n      changeColumnGrouping,\n      { columnName, groupIndex },\n      (nextState, state) => {\n        const { grouping } = nextState;\n        const { grouping: prevGrouping } = state;\n        const { sorting } = getters!;\n        const { changeColumnSorting } = actions!;\n\n        if (!sorting) return;\n\n        const columnSortingIndex = sorting\n          .findIndex(columnSorting => columnSorting.columnName === columnName);\n        const prevGroupingIndex = prevGrouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n        const groupingIndex = grouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n        if (columnSortingIndex === -1\n          || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n        const sortIndex = adjustSortIndex(\n          groupingIndex === -1 ? grouping.length : groupingIndex,\n          grouping,\n          sorting,\n        );\n\n        if (columnSortingIndex === sortIndex) return;\n\n        changeColumnSorting({\n          sortIndex,\n          keepOther: true,\n          ...sorting[columnSortingIndex],\n        });\n      },\n    );\n  }\n\n  render() {\n    const { grouping, draftGrouping, expandedGroups } = this.state;\n    const { columnExtensions, columnGroupingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingState\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"draftGrouping\" value={draftGrouping || grouping} />\n        <Getter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <Action name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <Action name=\"draftColumnGrouping\" action={this.draftColumnGrouping} />\n        <Action name=\"cancelColumnGroupingDraft\" action={this.cancelColumnGroupingDraft} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\n * information about expanded/collapsed groups.\n * */\nexport const GroupingState: React.ComponentType<GroupingStateProps> = GroupingStateBase;\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n\nclass IntegratedGroupingBase extends React.PureComponent<IntegratedGroupingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCriteria = columnName => (getColumnExtension(\n      columnExtensions, columnName,\n    ) as any).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue }: Getters,\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <Plugin\n        name=\"IntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\nexport const IntegratedGrouping: React.ComponentType<IntegratedGroupingProps> = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\nconst getRowIdComputed = ({ getRowId, rows }: Getters) => customGroupingRowIdGetter(getRowId, rows);\n\nclass CustomGroupingBase extends React.PureComponent<CustomGroupingProps> {\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this.props;\n    const groupedRowsComputed = (\n      { rows, grouping }: Getters,\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n\n    return (\n      <Plugin\n        name=\"CustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        {appliedGrouping && (\n          <Getter name=\"grouping\" value={appliedGrouping} />\n        )}\n        {appliedExpandedGroups && (\n          <Getter name=\"expandedGroups\" value={appliedExpandedGroups} />\n        )}\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\nexport const CustomGrouping: React.ComponentType<CustomGroupingProps> = CustomGroupingBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\nimport { SelectionStateProps, SelectionStateState } from '../types';\n\nclass SelectionStateBase extends React.PureComponent<SelectionStateProps, SelectionStateState> {\n  static defaultProps = {\n    defaultSelection: [],\n  };\n  toggleSelection: ActionFn<any>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selection: props.selection || props.defaultSelection,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        selection: () => {\n          const { onSelectionChange } = this.props;\n          return onSelectionChange;\n        },\n      },\n    );\n\n    this.toggleSelection = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'selection', toggleSelection);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      selection = prevState.selection,\n    } = nextProps;\n\n    return {\n      selection,\n    };\n  }\n\n  render() {\n    const { selection } = this.state;\n\n    return (\n      <Plugin\n        name=\"SelectionState\"\n      >\n        <Getter name=\"selection\" value={selection} />\n        <Action name=\"toggleSelection\" action={this.toggleSelection} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the selection state. */\nexport const SelectionState: React.ComponentType<SelectionStateProps> = SelectionStateBase;\n", "import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSelectionProps } from '../types';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow }: Getters,\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }: Getters) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }: Getters) => someSelected(rows, selection);\nconst selectAllAvailableComputed = (\n  { rows: { availableToSelect } }: Getters,\n) => !!availableToSelect.length;\n\nconst toggleSelectAll = (\n  state, { rows: { availableToSelect } }: Getters, { toggleSelection }: Actions,\n) => {\n  toggleSelection({ state, rowIds: availableToSelect });\n};\nconst unwrapRowsComputed = ({ rows }: Getters) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'SelectionState' },\n];\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedSelectionBase extends React.PureComponent<IntegratedSelectionProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <Getter name=\"allSelected\" computed={allSelectedComputed} />\n        <Getter name=\"someSelected\" computed={someSelectedComputed} />\n        <Getter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <Action name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <Getter name=\"rows\" computed={unwrapRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in selection. */\nexport const IntegratedSelection: React.ComponentType<IntegratedSelectionProps> = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { SortingStateProps, SortingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n\nclass SortingStateBase extends React.PureComponent<SortingStateProps, SortingStateState> {\n  static defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true,\n  };\n  changeColumnSorting: ActionFn<ChangeSortingPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sorting: props.sorting || props.defaultSorting,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        sorting: () => {\n          const { onSortingChange } = this.props;\n          return onSortingChange;\n        },\n      },\n    );\n\n    this.changeColumnSorting = stateHelper.applyReducer\n      .bind(stateHelper, (prevState, payload) => {\n        const { sorting = prevState.sorting } = this.props;\n        const persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n        const keepOther = calculateKeepOther(\n          prevState.sorting, payload.keepOther, persistentSortedColumns,\n        );\n        return changeColumnSorting(prevState, { ...payload, keepOther });\n      });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sorting = prevState.sorting,\n    } = nextProps;\n\n    return {\n      sorting,\n    };\n  }\n\n  render() {\n    const { sorting } = this.state;\n    const { columnExtensions, columnSortingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"SortingState\"\n      >\n        <Getter name=\"sorting\" value={sorting} />\n        <Getter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\nexport const SortingState: React.ComponentType<SortingStateProps> = SortingStateBase;\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\nimport { IntegratedSortingProps, IntegratedSorting as IntegratedSortingNs } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SortingState' },\n];\n\nclass IntegratedSortingBase extends React.PureComponent<IntegratedSortingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCompare = columnName => (\n      getColumnExtension(columnExtensions, columnName) as IntegratedSortingNs.ColumnExtension\n    ).compare!;\n\n    const rowsComputed = (\n      { rows, sorting, getCellValue, isGroupRow, getRowLevelKey }: Getters,\n    ) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <Plugin\n        name=\"IntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs built-in data sorting. */\nexport const IntegratedSorting: React.ComponentType<IntegratedSortingProps> = IntegratedSortingBase;\n", "import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n  TemplateConnector,\n  DragDropProvider as DragDropProviderCore,\n} from '@devexpress/dx-react-core';\nimport { DragDropProviderProps, DragDropProviderState } from '../types';\n\nconst getTargetColumns = (payload, columns) => payload\n  .filter(item => item.type === 'column')\n  .map(item => columns.find(column => column.name === item.columnName));\n\n// tslint:disable-next-line: max-line-length\nclass DragDropProviderBase extends React.PureComponent<DragDropProviderProps, DragDropProviderState> {\n  static components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column',\n  };\n  change: (object) => void;\n  bodyRef!: HTMLElement;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      payload: null,\n      clientOffset: null,\n    };\n\n    this.change = ({ payload, clientOffset }) => this.setState({ payload, clientOffset });\n  }\n\n  componentDidMount() {\n    this.bodyRef = document.body;\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      columnComponent: Column,\n    } = this.props;\n    const {\n      payload,\n      clientOffset,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n      >\n        <Getter name=\"draggingEnabled\" value />\n        <Template name=\"root\">\n          <DragDropProviderCore\n            onChange={this.change}\n          >\n            <TemplatePlaceholder />\n          </DragDropProviderCore>\n          {payload && (\n            <TemplateConnector>\n              {({ columns }) => (\n                createPortal(\n                  <Container\n                    clientOffset={clientOffset!}\n                  >\n                    {getTargetColumns(payload, columns)\n                      .map(column => (\n                        <Column\n                          key={column.name}\n                          column={column}\n                        />\n                      ))\n                    }\n                  </Container>,\n                  this.bodyRef,\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\nexport const DragDropProvider: React.ComponentType<DragDropProviderProps> = DragDropProviderBase;\n", "import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  PlaceholderWithRef,\n  TemplateConnector,\n  DropTarget,\n  withComponents,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_DATA_TYPE,\n  TABLE_REORDERING_TYPE,\n  changeColumnOrder,\n  getTableTargetColumnIndex,\n  tableHeaderRowsWithReordering,\n  draftOrder as draftOrderComputed,\n  TargetColumnGeometry,\n  TableColumn,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumns } from './internal/ordered-table-columns';\nimport {\n  Table as TableNS, CellDimensionsGetter, TableColumnReorderingProps,\n  DragOverArgs, TableColumnReorderingState,\n} from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'DragDropProvider', optional: true },\n];\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithReordering(tableHeaderRows);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnReorderingRaw extends React.PureComponent<TableColumnReorderingProps, TableColumnReorderingState> {\n  static defaultProps = {\n    defaultOrder: [],\n  };\n  static components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n  cellDimensionGetters: { [colName: string]: CellDimensionsGetter } = {};\n  cellDimensions: TargetColumnGeometry[] = [];\n  onOver: (arg: DragOverArgs) => void;\n  onLeave: () => void;\n  onDrop: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    };\n\n    this.onOver = this.handleOver.bind(this);\n    this.onLeave = this.handleLeave.bind(this);\n    this.onDrop = this.handleDrop.bind(this);\n  }\n\n  getState() {\n    const { order: orderState } = this.state;\n    const {\n      order = orderState,\n    } = this.props;\n    return {\n      ...this.state,\n      order,\n    };\n  }\n\n  getDraftOrder() {\n    const { order, sourceColumnIndex, targetColumnIndex } = this.getState();\n    return draftOrderComputed(order, sourceColumnIndex, targetColumnIndex);\n  }\n\n  getAvailableColumns() {\n    return this.getDraftOrder()\n      .filter(columnName => !!this.cellDimensionGetters[columnName]);\n  }\n\n  cacheCellDimensions() {\n    this.cellDimensions = (this.cellDimensions && this.cellDimensions.length)\n      ? this.cellDimensions\n      : this.getAvailableColumns()\n        .map(columnName => this.cellDimensionGetters[columnName]());\n  }\n\n  resetCellDimensions() {\n    this.cellDimensions = [];\n  }\n\n  ensureCellDimensionGetters(tableColumns: ReadonlyArray<TableColumn>) {\n    Object.keys(this.cellDimensionGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.cellDimensionGetters[columnName];\n        }\n      });\n  }\n\n// tslint:disable-next-line: max-line-length\n  storeCellDimensionsGetter(tableColumn: Readonly<TableColumn>, getter: CellDimensionsGetter, tableColumns: ReadonlyArray<TableColumn>) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column!.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  }\n\n  handleOver({ payload, clientOffset: { x } }: DragOverArgs) {\n    const sourceColumnName = payload[0].columnName;\n    const availableColumns = this.getAvailableColumns();\n    const relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n\n    if (relativeSourceColumnIndex === -1) return;\n\n    this.cacheCellDimensions();\n    const cellDimensions = this.cellDimensions;\n\n    const relativeTargetIndex = getTableTargetColumnIndex(cellDimensions, x);\n\n    if (relativeTargetIndex === -1) return;\n\n    const {\n      sourceColumnIndex: prevSourceColumnIndex,\n      targetColumnIndex: prevTargetColumnIndex,\n    } = this.getState();\n    const draftOrder = this.getDraftOrder();\n    const targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n\n    const sourceColumnIndex = prevSourceColumnIndex === -1\n      ? draftOrder.indexOf(sourceColumnName)\n      : prevSourceColumnIndex;\n\n    this.setState({\n      sourceColumnIndex,\n      targetColumnIndex,\n    });\n  }\n\n  handleLeave() {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    this.resetCellDimensions();\n  }\n\n  handleDrop() {\n    const { sourceColumnIndex, targetColumnIndex, order } = this.getState();\n    const { onOrderChange } = this.props;\n\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n\n    const nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex],\n    }) as string[];\n\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  }\n\n  render() {\n    const {\n      tableContainerComponent: Container,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    this.cellDimensionGetters = {};\n\n    return (\n      <Plugin\n        name=\"TableColumnReordering\"\n        dependencies={pluginDependencies}\n      >\n        <OrderedTableColumns order={this.getDraftOrder()} />\n\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ draggingEnabled }) => (\n                <Container\n                  {...params}\n                  onOver={this.onOver}\n                  onLeave={this.onLeave}\n                  onDrop={this.onDrop}\n                  draggingEnabled={draggingEnabled}\n                >\n                  <PlaceholderWithRef />\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <Row {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }: Getters) => (\n                <Cell\n                  {...params}\n                  getCellDimensions={getter => this.storeCellDimensionsGetter(\n                    params.tableColumn, getter, tableColumns,\n                  )}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nconst TableContainer = ({\n  onOver, onLeave, onDrop, children, draggingEnabled,\n}) => (\n  draggingEnabled ? (\n    <DropTarget\n      onOver={onOver}\n      onLeave={onLeave}\n      onDrop={onDrop}\n    >\n      {children}\n    </DropTarget>\n  ) : children\n);\n\n/** A plugin that manages the displayed columns' order. */\nexport const TableColumnReordering: React.ComponentType<TableColumnReorderingProps>\n  = withComponents({ TableContainer })(TableColumnReorderingRaw);\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  isDataTableCell,\n  isHeaderStubTableCell,\n  isDataTableRow,\n  TABLE_DATA_TYPE,\n  TABLE_NODATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableProps, Table as TableNS, TableLayoutProps } from '../types';\nimport { TableColumnsWithDataRowsGetter } from './internal/table-columns-getter';\n\nconst RowPlaceholder = React.forwardRef((props, ref) => (\n  <TemplatePlaceholder name=\"tableRow\" params={{ ...props, ref }} />\n));\nconst CellPlaceholder = props => <TemplatePlaceholder name=\"tableCell\" params={props} />;\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = ({ rows, getRowId, isDataLoading }: Getters) => (\n  tableRowsWithDataRows(rows, getRowId, isDataLoading)\n);\nconst tableFooterRows = [];\n\nconst defaultMessages = {\n  noData: 'No data',\n};\n\nclass TableBase extends React.PureComponent<TableProps> {\n  static COLUMN_TYPE = TABLE_DATA_TYPE;\n  static ROW_TYPE = TABLE_DATA_TYPE;\n  static NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell',\n  };\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      messages,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"Table\"\n      >\n        <Getter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" value={tableFooterRows} />\n        <TableColumnsWithDataRowsGetter columnExtensions={columnExtensions} />\n        <Getter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n\n        <Template name=\"body\">\n          <TemplatePlaceholder name=\"table\" />\n        </Template>\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({\n                tableHeaderRows: headerRows,\n                tableBodyRows: bodyRows,\n                tableFooterRows: footerRows,\n                tableColumns: columns,\n                getTableCellColSpan,\n              }) => (\n                <TemplatePlaceholder\n                  name=\"tableLayout\"\n                  params={{\n                    ...params,\n                    tableComponent,\n                    headComponent,\n                    bodyComponent,\n                    footerComponent,\n                    containerComponent,\n                    headerRows,\n                    bodyRows,\n                    footerRows,\n                    columns,\n                    rowComponent: RowPlaceholder,\n                    cellComponent: CellPlaceholder,\n                    getCellColSpan: getTableCellColSpan,\n                  }}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableLayout\">\n          {(params: TableLayoutProps) => (\n            <Layout {...params} />\n          )}\n        </Template>\n        <Template name=\"tableCell\">\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {(\n                { tableHeaderRows: headerRows },\n              ) => (isHeaderStubTableCell(params.tableRow, headerRows)\n                ? <StubHeaderCell {...params} />\n                : <StubCell {...params} />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ getCellValue }) => {\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(params.tableRow.row, columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row: params.tableRow.row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...params}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableRow\">\n          {(params: TableNS.RowProps) => (\n            <StubRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => <NoDataRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders Grid data as a table. This plugin enables you to customize\n * table rows and columns, and contains the Table Row and Table Cell components\n * that can be extended by other plugins\n * */\nexport const Table: React.ComponentType<TableProps> & {\n  /** The data column type's indentifier. */\n  COLUMN_TYPE: symbol;\n  /** The data row type's indentifier. */\n  ROW_TYPE: symbol;\n  /** The nodata row type's indentifier. */\n  NODATA_ROW_TYPE: symbol;\n} = TableBase;\n", "import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_SELECT_TYPE,\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport { TableSelectionProps, TableCellProps, TableRowProps } from '../types';\n\nclass TableSelectionBase extends React.PureComponent<TableSelectionProps> {\n  static defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n  };\n  static COLUMN_TYPE = TABLE_SELECT_TYPE;\n\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth, showSelectionColumn);\n\n    return (\n      <Plugin\n        name=\"TableSelection\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SelectionState' },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        {highlightRow && (\n          <Getter name=\"highlightSelectedRow\" value />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <Template\n            name=\"tableCell\"\n            predicate={({\n              tableRow, tableColumn,\n            }: any) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                  <HeaderCell\n                    {...params}\n                    disabled={!selectAllAvailable}\n                    allSelected={allSelected}\n                    someSelected={someSelected}\n                    onToggle={select => toggleSelectAll(select)}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {showSelectionColumn && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }: any) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                    selected={selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Row\n                    {...params}\n                    selectByRowClick={selectByRowClick}\n                    highlighted={isRowHighlighted(highlightRow!, selection, params.tableRow)}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\n * and highlighting the selected rows.\n * */\nexport const TableSelection: React.ComponentType<TableSelectionProps> & {\n  /** The selection column type's indentifier. */\n  COLUMN_TYPE: symbol;\n} = TableSelectionBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleDetailRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { RowDetailStateProps, RowDetailStateState } from '../types';\n\n// tslint:disable-next-line: max-line-length\nclass RowDetailStateBase extends React.PureComponent<RowDetailStateProps, RowDetailStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleDetailRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleDetailRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"RowDetailState\"\n      >\n        <Getter name=\"expandedDetailRowIds\" value={expandedRowIds} />\n        <Action name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for table row details. */\nexport const RowDetailState: React.ComponentType<RowDetailStateProps> = RowDetailStateBase;\n", "import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n  TABLE_DETAIL_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableRowDetailProps, TableCellProps, TableRowProps } from '../types';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan }: Getters,\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'RowDetailState' },\n  { name: 'Table' },\n];\n\nclass TableRowDetailBase extends React.PureComponent<TableRowDetailProps> {\n  static ROW_TYPE = TABLE_DETAIL_TYPE;\n  static COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  static defaultProps = {\n    contentComponent: () => null,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell',\n  };\n\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds }: Getters,\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ expandedDetailRowIds }, { toggleDetailRowExpanded }) => (\n                <ToggleCell\n                  {...params}\n                  row={params.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId!)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: params.tableRow.rowId })}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isDetailTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...params}\n                      row={params.tableRow.row}\n                    >\n                      {Content && <Content row={params.tableRow.row} />}\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders detail rows. */\nexport const TableRowDetail: React.ComponentType<TableRowDetailProps> & {\n  /** The detail column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The detail row type's indentifier. */\n  ROW_TYPE: symbol;\n} = TableRowDetailBase;\n", "export const defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count',\n};\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  defaultFormatlessSummaries, ColumnSummary,\n} from '@devexpress/dx-grid-core';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { TableSummaryContentProps, SummaryItemProps } from '../../types';\nimport { defaultSummaryMessages } from './constants';\n\nexport const TableSummaryContent: React.SFC<TableSummaryContentProps> = ({\n  column, columnSummaries, formatlessSummaryTypes,\n  itemComponent: Item,\n  messages,\n}) => {\n  const getMessage = getMessagesFormatter({ ...defaultSummaryMessages, ...messages });\n  const SummaryItem: React.SFC<SummaryItemProps> = ({ summary, children }) => (\n    <Item\n      getMessage={getMessage}\n      type={summary.type}\n      value={summary.value}\n    >\n      {children || String(summary.value)}\n    </Item>\n  );\n  const isFormatlessSummary = (summary: ColumnSummary) => (\n    summary.value === null\n    || formatlessSummaryTypes.includes(summary.type)\n    || defaultFormatlessSummaries.includes(summary.type)\n  );\n\n  return (\n    <React.Fragment>\n      {columnSummaries.map((summary) => {\n        if (isFormatlessSummary(summary)) {\n          return <SummaryItem key={summary.type} summary={summary} />;\n        }\n        return (\n          <TemplatePlaceholder\n            key={summary.type}\n            name=\"valueFormatter\"\n            params={{\n              column,\n              value: summary.value,\n            }}\n          >\n            {content => (\n              <SummaryItem summary={summary}>\n                {content}\n              </SummaryItem>\n            )}\n          </TemplatePlaceholder>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n", "import * as React from 'react';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { getGroupInlineSummaries } from '@devexpress/dx-grid-core';\nimport { GetInlineSummaryComponent, FlattenGroupInlineSummariesFn } from '../../types';\n\nconst getInlineSummaryComponent: GetInlineSummaryComponent = (\n  column, summary, formatlessSummaries,\n) => () => (\n  (summary.value === null || formatlessSummaries.includes(summary.type))\n    ? <>{summary.value}</>\n    : (\n      <TemplatePlaceholder\n        key={summary.type}\n        name=\"valueFormatter\"\n        params={{\n          column,\n          value: summary.value,\n        }}\n      >\n        {content => content || summary.value}\n      </TemplatePlaceholder>\n    )\n);\n\nexport const flattenGroupInlineSummaries: FlattenGroupInlineSummariesFn = (\n  columns, tableRow, groupSummaryItems, groupSummaryValues,\n  formatlessSummaries,\n) => (\n  getGroupInlineSummaries(\n    groupSummaryItems, columns,\n    groupSummaryValues[tableRow.row.compoundKey],\n  )\n    .map(colSummaries => ([\n      ...colSummaries.summaries.map(summary => ({\n        ...summary,\n        columnTitle: colSummaries.column.title,\n        messageKey: `${summary.type}Of`,\n        component: getInlineSummaryComponent(\n          colSummaries.column, summary, formatlessSummaries,\n        ),\n      })),\n    ]))\n    .reduce((acc, summaries) => acc.concat(summaries), [])\n);\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplatePlaceholder, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupTableCell,\n  isGroupIndentTableCell,\n  isGroupTableRow,\n  TABLE_GROUP_TYPE,\n  getColumnSummaries,\n  defaultFormatlessSummaries,\n  isPreviousCellContainSummary,\n  isRowSummaryCell,\n  isGroupRowOrdinaryCell,\n  calculateGroupCellIndent,\n  isGroupIndentStubTableCell,\n  GroupSummaryItem,\n  TABLE_FLEX_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnsWithGrouping } from './internal';\nimport {\n  TableGroupRowProps, TableCellProps, TableRowProps,\n} from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\nimport { flattenGroupInlineSummaries } from '../components/summary/group-summaries';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState', optional: true },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'TableSelection', optional: true },\n];\nconst side = 'left';\n\n/** @internal */\nexport const defaultMessages = {\n  countOf: 'Count: ',\n  sumOf: 'Sum of {columnTitle} is ',\n  maxOf: 'Max of {columnTitle} is ',\n  minOf: 'Min of {columnTitle} is ',\n  avgOf: 'Avg of {columnTitle} is ',\n};\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow }: Getters,\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan, groupSummaryItems, viewport }: Getters,\n) => {\n  const firstVisibleColumnIndex = viewport?.columns[0][0];\n  return tableGroupCellColSpanGetter(\n    getTableCellColSpan,\n    groupSummaryItems,\n    firstVisibleColumnIndex,\n  );\n};\n\nclass TableGroupRowBase extends React.PureComponent<TableGroupRowProps> {\n  static ROW_TYPE = TABLE_GROUP_TYPE;\n  static COLUMN_TYPE = TABLE_GROUP_TYPE;\n  static defaultProps = {\n    showColumnsWhenGrouped: false,\n    formatlessSummaryTypes: [],\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n    containerComponent: 'Container',\n    indentCellComponent: 'IndentCell',\n    inlineSummaryComponent: 'InlineSummary',\n    inlineSummaryItemComponent: 'InlineSummaryItem',\n    summaryCellComponent: 'SummaryCell',\n    summaryItemComponent: 'SummaryItem',\n    stubCellComponent: 'StubCell',\n  };\n\n  render() {\n    const {\n      cellComponent: GroupCell,\n      contentComponent: Content,\n      iconComponent: Icon,\n      rowComponent: GroupRow,\n      containerComponent: Container,\n      indentCellComponent: GroupIndentCell,\n      inlineSummaryComponent: InlineSummary,\n      inlineSummaryItemComponent: InlineSummaryItem,\n      summaryCellComponent: SummaryCell,\n      summaryItemComponent: SummaryItem,\n      stubCellComponent: StubCell,\n      indentColumnWidth,\n      contentCellPadding,\n      showColumnsWhenGrouped,\n      columnExtensions,\n      messages,\n      formatlessSummaryTypes,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"TableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <TableColumnsWithGrouping\n          columnExtensions={columnExtensions}\n          showColumnsWhenGrouped={showColumnsWhenGrouped}\n          indentColumnWidth={indentColumnWidth}\n        />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  grouping, expandedGroups, groupSummaryItems, groupSummaryValues, columns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n                  const formatlessSummaries = defaultFormatlessSummaries\n                    .concat(formatlessSummaryTypes!);\n\n                  const inlineSummaries = groupSummaryItems\n                    ? flattenGroupInlineSummaries(\n                      columns, params.tableRow, groupSummaryItems,\n                      groupSummaryValues, formatlessSummaries,\n                    ) : [];\n                  const cellIndent = calculateGroupCellIndent(\n                    params.tableColumn, grouping, indentColumnWidth,\n                  );\n                  const contentIndent = `calc(${cellIndent}px + ${contentCellPadding})`;\n\n                  return (\n                    <TemplatePlaceholder\n                      name=\"valueFormatter\"\n                      params={{\n                        column: params.tableColumn.column,\n                        value: params.tableRow.row.value,\n                      }}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...params}\n                          contentComponent={Content}\n                          iconComponent={Icon}\n                          containerComponent={Container}\n                          row={params.tableRow.row}\n                          column={params.tableColumn.column!}\n                          expanded={expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1}\n                          onToggle={\n                            () => toggleGroupExpanded({ groupKey: params.tableRow.row.compoundKey })\n                          }\n                          inlineSummaries={inlineSummaries}\n                          inlineSummaryComponent={InlineSummary}\n                          inlineSummaryItemComponent={InlineSummaryItem}\n                          getMessage={getMessage}\n                          position={contentIndent}\n                          side={side}\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </TemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  const fixedProps = {\n                    side,\n                    position: calculateGroupCellIndent(\n                      params.tableColumn, grouping, indentColumnWidth,\n                    ),\n                  };\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...params}\n                        {...fixedProps}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                      />\n                    );\n                  }\n                  return <TemplatePlaceholder params={fixedProps} />;\n                }\n                if (isGroupIndentStubTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  return <TemplatePlaceholder params={params} />;\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({\n            tableRow, tableColumn,\n          }: any) => (isGroupRowOrdinaryCell(tableRow, tableColumn))}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  groupSummaryItems, groupSummaryValues, grouping, tableColumns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                const { tableColumn, tableRow } = params;\n                const onToggle = () => toggleGroupExpanded({ groupKey: tableRow.row.compoundKey });\n\n                if (isRowSummaryCell(tableRow, tableColumn, grouping, groupSummaryItems)) {\n                  const columnSummaries = getColumnSummaries(\n                    groupSummaryItems,\n                    tableColumn.column!.name,\n                    groupSummaryValues[tableRow.row.compoundKey],\n                    summaryItem => (\n                      !(summaryItem as GroupSummaryItem).showInGroupFooter! &&\n                      (summaryItem as GroupSummaryItem).alignByColumn!\n                    ),\n                  );\n\n                  return (\n                    <SummaryCell\n                      {...params}\n                      row={params.tableRow.row}\n                      column={params.tableColumn.column!}\n                      onToggle={onToggle}\n                    >\n                      <TableSummaryContent\n                        column={tableColumn.column!}\n                        columnSummaries={columnSummaries}\n                        formatlessSummaryTypes={formatlessSummaryTypes!}\n                        itemComponent={SummaryItem}\n                        messages={messages!}\n                      />\n                    </SummaryCell>\n                  );\n                }\n\n                // NOTE: ensure that right-aligned summary will fit into a column\n                if (isPreviousCellContainSummary(\n                  tableRow, tableColumn, tableColumns, grouping, groupSummaryItems,\n                ) || TABLE_FLEX_TYPE === tableColumn.type) {\n                  return <StubCell {...params} onToggle={onToggle} />;\n                }\n\n                return <TemplatePlaceholder />;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders group rows and enables them to expand and collapse. */\nexport const TableGroupRow: React.ComponentType<TableGroupRowProps> & {\n  /** The group column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The group row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableGroupRowBase;\n", "import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnSortingDirection,\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  getNextColumnName,\n  TABLE_DATA_TYPE,\n  TABLE_HEADING_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableHeaderRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableRowsWithHeading(tableHeaderRows || []);\n\nclass TableHeaderRowBase extends React.PureComponent<TableHeaderRowProps> {\n  static ROW_TYPE = TABLE_HEADING_TYPE;\n  static defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton',\n  };\n\n  render() {\n    const {\n      showSortingControls,\n      showGroupingControls,\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n      contentComponent: Content,\n      sortLabelComponent: SortLabel,\n      groupButtonComponent: GroupButton,\n      titleComponent: Title,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n\n    return (\n      <Plugin\n        name=\"TableHeaderRow\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SortingState', optional: !showSortingControls },\n          { name: 'GroupingState', optional: !showGroupingControls },\n          { name: 'DragDropProvider', optional: true },\n          { name: 'TableColumnResizing', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                sorting, tableColumns, draggingEnabled, tableColumnResizingEnabled,\n                isColumnSortingEnabled, isColumnGroupingEnabled, columnResizingMode,\n              }, {\n                changeColumnSorting, changeColumnGrouping,\n                changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft,\n                storeWidthGetters = () => {},\n              }) => {\n                const { name: columnName, title: columnTitle } = params.tableColumn.column!;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled\n                  && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName)\n                  && atLeastOneDataColumn;\n                const nextColumnName = getNextColumnName(tableColumns, columnName);\n\n                return (\n                  <HeaderCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                    draggingEnabled={draggingEnabled && atLeastOneDataColumn}\n                    resizingEnabled={\n                      tableColumnResizingEnabled\n                      && (!!nextColumnName || columnResizingMode === 'widget')\n                    }\n                    onWidthChange={({ shift }) => changeTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraft={({ shift }) => draftTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraftCancel={() => cancelTableColumnWidthDraft()}\n                    getCellWidth={getter => storeWidthGetters({\n                      tableColumn: params.tableColumn , getter, tableColumns,\n                    })}\n                  >\n                    <TemplatePlaceholder\n                      name=\"tableHeaderCellBefore\"\n                      params={{\n                        column: params.tableColumn.column,\n                      }}\n                    />\n                    <Content\n                      column={params.tableColumn.column!}\n                      align={params.tableColumn.align!}\n                    >\n                      {showSortingControls ? (\n                        <SortLabel\n                          column={params.tableColumn.column!}\n                          align={params.tableColumn.align!}\n                          direction={getColumnSortingDirection(sorting, columnName) || null}\n                          disabled={!sortingEnabled}\n                          onSort={({ direction, keepOther }) => {\n                            changeColumnSorting({ columnName, direction, keepOther });\n                          }}\n                          getMessage={getMessage}\n                        >\n                          <Title>\n                            {columnTitle || columnName}\n                          </Title>\n                        </SortLabel>\n                      ) : (\n                        <Title>\n                          {columnTitle || columnName}\n                        </Title>\n                      )}\n                    </Content>\n                    {showGroupingControls ? (\n                      <GroupButton\n                        disabled={!groupingEnabled}\n                        onGroup={() => changeColumnGrouping({ columnName })}\n                      />\n                    ) : null}\n                  </HeaderCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isHeadingTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <HeaderRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton',\n};\n\n/***\n * A plugin that renders the table's header row. The Column's `title` field specifies the\n * column's title in the header row.The plugin also allows you to manage a column's sorting\n * and grouping state and initiate column dragging.\n * */\nexport const TableHeaderRow: React.ComponentType<TableHeaderRowProps> & {\n  /** The header row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableHeaderRowBase;\n", "import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getBandComponent, tableHeaderColumnChainsWithBands,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n  TABLE_BAND_TYPE,\n  BAND_FILL_LEVEL_CELL,\n  bandLevelsVisibility,\n  columnBandLevels,\n  columnVisibleIntervals,\n} from '@devexpress/dx-grid-core';\nimport { TableBandHeaderProps, TableBandHeader as BandHeaderNS, TableRowProps } from '../types';\n\nconst CellPlaceholder = (props: BandHeaderNS.CellProps) => <TemplatePlaceholder params={props} />;\n\nconst bandLevelsVisibilityComputed = (\n  { columnVisibleIntervals: columnIntervals, tableHeaderColumnChains, bandLevels }: Getters,\n) => bandLevelsVisibility(\n  columnIntervals, tableHeaderColumnChains, bandLevels,\n);\n\nconst columnVisibleIntervalsComputed = (\n  { viewport, tableColumns }: Getters,\n) => columnVisibleIntervals(viewport, tableColumns);\n\nclass TableBandHeaderBase extends React.PureComponent<TableBandHeaderProps> {\n  static ROW_TYPE = TABLE_BAND_TYPE;\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this.props;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableRowsWithBands(\n      tableHeaderRows, columnBands, tableColumns,\n    );\n    const tableHeaderColumnChainsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableHeaderColumnChainsWithBands(\n      tableHeaderRows, tableColumns, columnBands,\n    );\n    const bandLevels = columnBandLevels(columnBands);\n\n    return (\n      <Plugin\n        name=\"TableBandHeader\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'TableHeaderRow' },\n          { name: 'TableSelection', optional: true },\n          { name: 'TableEditColumn', optional: true },\n          { name: 'TableColumnVisibility', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        {/* internal */}\n        <Getter name=\"columnVisibleIntervals\" computed={columnVisibleIntervalsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Getter name=\"bandLevels\" value={bandLevels} />\n        <Getter name=\"bandLevelsVisibility\" computed={bandLevelsVisibilityComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isBandedOrHeaderRow(tableRow)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns,\n                tableHeaderRows,\n                tableHeaderColumnChains,\n                columnVisibleIntervals: columnIntervals, bandLevelsVisibility: levelsVisibility,\n              }) => {\n                const bandComponent = getBandComponent(\n                  params,\n                  tableHeaderRows, tableColumns,\n                  columnBands, tableHeaderColumnChains, columnIntervals,\n                  levelsVisibility,\n                );\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return <TemplatePlaceholder params={{ ...params }} />;\n\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload!;\n                    return (\n                      <Cell {...params} {...payload}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n\n                  case BAND_HEADER_CELL:\n                    return (\n                      <TemplatePlaceholder\n                        name=\"tableCell\"\n                        params={{ ...params, ...bandComponent.payload }}\n                      />\n                    );\n\n                  case BAND_FILL_LEVEL_CELL:\n                    return (\n                      <Cell\n                        {...params}\n                        {...bandComponent.payload}\n                        style={{ whiteSpace: 'pre' }}\n                      >\n                        {' '}\n                      </Cell>\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <HeaderCell component={CellPlaceholder} {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isBandedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <Row {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell',\n};\n\n/** A plugin that renders the banded cells. */\nexport const TableBandHeader: React.ComponentType<TableBandHeaderProps> & {\n  /** The band row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableBandHeaderBase;\n", "import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  isFilterValueEmpty,\n  getSelectedFilterOperation,\n  TABLE_FILTER_TYPE,\n  FilterConfig,\n  TOP_POSITION,\n} from '@devexpress/dx-grid-core';\nimport { TableFilterRowProps, TableFilterRowState, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst defaultMessages = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to',\n};\n\nclass TableFilterRowBase extends React.PureComponent<TableFilterRowProps, TableFilterRowState> {\n  static ROW_TYPE = TABLE_FILTER_TYPE;\n  static defaultProps = {\n    showFilterSelector: false,\n    messages: {},\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterOperations: {},\n    };\n  }\n\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      toggleButtonComponent,\n      editorComponent: EditorComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows }: Getters,\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                { filters, isColumnFilteringEnabled, getAvailableFilterOperations, isDataRemote },\n                { changeColumnFilter, scrollToRow }: Actions,\n              ) => {\n                const { filterOperations } = this.state;\n                const { name: columnName } = params.tableColumn.column!;\n                const filter = getColumnFilterConfig(filters, columnName)!;\n                const onFilter = (\n                  config: FilterConfig | null,\n                ) => {\n                  if (isDataRemote) {\n                    scrollToRow(TOP_POSITION);\n                  }\n                  changeColumnFilter({ columnName, config });\n                };\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = getSelectedFilterOperation(\n                  filterOperations, columnName, filter, columnFilterOperations,\n                );\n                const handleFilterOperationChange = (value: string) => {\n                  this.setState({\n                    filterOperations: {\n                      ...filterOperations,\n                      [columnName]: value,\n                    },\n                  });\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = (value: any) => onFilter(!isFilterValueEmpty(value)\n                  ? { value, operation: selectedFilterOperation }\n                  : null);\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column: params.tableColumn.column,\n                      value: filter ? filter.value : undefined,\n                      onValueChange: handleFilterValueChange,\n                      disabled: !filteringEnabled,\n                    }}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...params}\n                        getMessage={getMessage}\n                        column={params.tableColumn.column!}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              toggleButtonComponent={toggleButtonComponent}\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations as string[]}\n                              onChange={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : undefined}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChange={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFilterTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <FilterRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a filter row. */\nexport const TableFilterRow: React.ComponentType<TableFilterRowProps> & {\n  /** The filter row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableFilterRowBase;\n", "import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n  TABLE_EDIT_TYPE,\n  TABLE_ADDED_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableEditRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nclass TableEditRowBase extends React.PureComponent<TableEditRowProps> {\n  static ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  static EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this.props;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows }: Getters,\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCellValue,\n                createRowChange,\n                rowChanges,\n                isColumnEditingEnabled,\n              }, {\n                changeAddedRow,\n                changeRow,\n              }) => {\n                const { rowId, row } = params.tableRow;\n                const { column } = params.tableColumn;\n                const { name: columnName } = column!;\n\n                const isNew = isAddedTableRow(params.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId!) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue: any) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                const editingEnabled = isColumnEditingEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column,\n                      row,\n                      value,\n                      onValueChange,\n                      disabled: !editingEnabled,\n                    }}\n                  >\n                    {content => (\n                      <EditCell\n                        {...params}\n                        row={row}\n                        column={column!}\n                        value={value}\n                        editingEnabled={editingEnabled}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={(\n            { tableRow }: any,\n          ) => !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {(params: TableRowProps) => (\n            <EditRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a row being edited. */\nexport const TableEditRow: React.ComponentType<TableEditRowProps> & {\n  /** The added row type's identifier. */\n  ADDED_ROW_TYPE: symbol;\n  /** The edit row type's identifier. */\n  EDIT_ROW_TYPE: symbol;\n} = TableEditRowBase;\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_EDIT_COMMAND_TYPE,\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n} from '@devexpress/dx-grid-core';\nimport { TableEditColumnProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel',\n};\n\nclass TableEditColumnBase extends React.PureComponent<TableEditColumnProps> {\n  static COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  static defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithEditing(tableColumns, width!);\n\n    return (\n      <Plugin\n        name=\"TableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => (\n                <HeaderCell {...params}>\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => actions.addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => {\n                const isEdit = isEditTableRow(params.tableRow);\n                const isNew = isAddedTableRow(params.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [params.tableRow.rowId];\n                return (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => actions.startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          actions.deleteRows({ rowIds });\n                          actions.commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.commitAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.cancelAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders a command column. This column contains controls used for row editing,\n * creating, or deleting and committing/canceling changes.\n * */\nexport const TableEditColumn: React.ComponentType<TableEditColumnProps> & {\n  /** The edit column type's identifier. */\n  COLUMN_TYPE: symbol;\n} = TableEditColumnBase;\n", "import * as React from 'react';\nimport { memoize, MemoizedComputed } from '@devexpress/dx-core';\nimport {\n  Plugin, Getter, Action, createStateHelper, StateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithWidths,\n  tableColumnsWithDraftWidths,\n  changeTableColumnWidth,\n  draftTableColumnWidth,\n  cancelTableColumnWidthDraft,\n  ColumnWidthPayload,\n  TableColumnWidthInfo,\n  TABLE_DATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnResizingProps, TableColumnResizingState, CellWidthGetter } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnResizingBase extends React.PureComponent<TableColumnResizingProps, TableColumnResizingState> {\n  static defaultProps = {\n    defaultColumnWidths: [],\n    resizingMode: 'widget',\n  };\n  changeTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  draftTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  cancelTableColumnWidthDraft: ActionFn<any>;\n  storeWidthGetters: ActionFn<object>;\n  storeCache: (payload) => void;\n  clearCache: () => void;\n  tableColumnsComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithWidths>;\n  // tslint:disable-next-line: max-line-length\n  tableColumnsDraftComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithDraftWidths>;\n\n  widthGetters: { [colName: string]: CellWidthGetter } = {};\n  cachedWidths: { [colName: string]: number } = {};\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: [],\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        columnWidths: () => {\n          const { onColumnWidthsChange } = this.props;\n          return onColumnWidthsChange;\n        },\n      },\n    );\n\n    this.tableColumnsComputed = memoize(\n      columnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithWidths(tableColumns, columnWidths, this.props.resizingMode!),\n    );\n    this.tableColumnsDraftComputed = memoize(\n      draftColumnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithDraftWidths(\n        tableColumns, draftColumnWidths, this.props.resizingMode!,\n      ),\n    );\n\n    this.changeTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        const cachedWidths = { ...this.cachedWidths };\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return changeTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.draftTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        this.storeCache(payload);\n        const cachedWidths = this.cachedWidths;\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return draftTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(\n      stateHelper, cancelTableColumnWidthDraft,\n    );\n\n    this.storeCache = ({ columnName, nextColumnName }) => {\n      if (Object.keys(this.cachedWidths).length === 0) {\n        this.cachedWidths[columnName] = this.widthGetters[columnName]();\n        if (nextColumnName) {\n          this.cachedWidths[nextColumnName] = this.widthGetters[nextColumnName]();\n        }\n      }\n    };\n    this.clearCache = () => {\n      Object.keys(this.cachedWidths)\n      .forEach(columnName => delete this.cachedWidths[columnName]);\n    };\n\n    this.storeWidthGetters = memoize(({ tableColumn, getter, tableColumns }) => {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        this.widthGetters[tableColumn.column!.name] = getter;\n      }\n      Object.keys(this.widthGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.widthGetters[columnName];\n        }\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      columnWidths = prevState.columnWidths,\n    } = nextProps;\n\n    return {\n      columnWidths,\n    };\n  }\n\n  componentDidUpdate (_, prevState) {\n    const { columnWidths: currentWidths } = this.state;\n    const { columnWidths: prevWidths } = prevState;\n    if (currentWidths !== prevWidths) {\n      this.clearCache();\n    }\n  }\n\n  render() {\n    const { columnWidths, draftColumnWidths } = this.state;\n    const { resizingMode } = this.props;\n    const tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    const tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n\n    return (\n      <Plugin\n        name=\"TableColumnResizing\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumnResizingEnabled\" value />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsDraftComputed} />\n        <Getter name=\"columnResizingMode\" value={resizingMode} />\n        <Action name=\"changeTableColumnWidth\" action={this.changeTableColumnWidth} />\n        <Action name=\"draftTableColumnWidth\" action={this.draftTableColumnWidth} />\n        <Action name=\"cancelTableColumnWidthDraft\" action={this.cancelTableColumnWidthDraft} />\n        <Action name=\"storeWidthGetters\" action={this.storeWidthGetters} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages table column widths. */\nexport const TableColumnResizing: React.ComponentType<TableColumnResizingProps> = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { pageCount } from '@devexpress/dx-grid-core';\nimport { PagingPanelProps, TableKeyboardNavigation } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst defaultMessages = {\n  showAll: 'All',\n  info: ({ from, to, count }) => `${from}${from < to ? `-${to}` : ''} of ${count}`,\n};\n\nclass PagingPanelBase extends React.PureComponent<PagingPanelProps> {\n  static defaultProps = {\n    pageSizes: [],\n    messages: {},\n  };\n  static components = {\n    containerComponent: 'Container',\n  };\n\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"PagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"footer\">\n          {(params: TableKeyboardNavigation.ExtraProps) => (\n            <React.Fragment>\n              <TemplatePlaceholder />\n              <TemplateConnector>\n              {({ currentPage, pageSize, totalCount },\n                { setCurrentPage, setPageSize }) => (\n                <Pager\n                  {...params}\n                  currentPage={currentPage}\n                  pageSize={pageSize}\n                  totalCount={totalCount}\n                  totalPages={pageCount(totalCount, pageSize)}\n                  pageSizes={pageSizes!}\n                  getMessage={getMessage}\n                  onCurrentPageChange={setCurrentPage}\n                  onPageSizeChange={setPageSize}\n                />\n              )}\n              </TemplateConnector>\n            </React.Fragment>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the paging panel used for navigation through data pages. */\nexport const PagingPanel: React.ComponentType<PagingPanelProps> = PagingPanelBase;\n", "import * as React from 'react';\nimport { DragSource } from '@devexpress/dx-react-core';\nimport { GroupingPanel as GP } from '../../types';\n\nconst defaultProps = {\n  draggingEnabled: false,\n  onDragStart: () => {},\n  onDragEnd: () => {},\n};\ntype GPItemLayoutProps = GP.GroupingItemLayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nexport class ItemLayout extends React.PureComponent<GPItemLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dragging: false,\n    };\n  }\n\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n      itemRef,\n      draggingEnabled,\n      onDragStart,\n      onDragEnd,\n    } = this.props;\n    const { dragging } = this.state;\n\n    const itemElement = <Item item={{ ...item, draft: dragging || item.draft }} />;\n\n    return (draggingEnabled ? (\n      <DragSource\n        payload={[{ type: 'column', columnName: item.column.name }]}\n        onStart={() => {\n          this.setState({ dragging: true });\n          onDragStart();\n        }}\n        onEnd={() => {\n          this.setState({ dragging: false });\n          onDragEnd();\n        }}\n        ref={itemRef}\n      >\n        {itemElement}\n      </DragSource>\n    ) : (\n      itemElement\n    ));\n  }\n}\n", "import * as React from 'react';\nimport { DropTarget } from '@devexpress/dx-react-core';\nimport { getGroupCellTargetIndex } from '@devexpress/dx-grid-core';\nimport { ItemLayout } from './group-panel-layout/item-layout';\nimport { GroupingPanel as GP } from '../types';\n\nconst defaultProps = {\n  onGroup: () => {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: () => false,\n  onGroupDraft: () => {},\n  onGroupDraftCancel: () => {},\n};\ntype GPLayoutProps = GP.LayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nclass GroupPanelLayoutBase extends React.PureComponent<GPLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n  handleDragEvent: (...args: any) => void;\n  onEnter: (any) => void;\n  onOver: (any) => void;\n  itemRefs: Element[] = [];\n  draggingColumnName: string | null = null;\n  onLeave: () => void;\n  onDrop: () => void;\n  onDragStart: (columnName: any) => void;\n  onDragEnd: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    };\n    this.handleDragEvent = (eventHandler, { payload, ...restArgs }) => {\n      const { isColumnGroupingEnabled } = this.props;\n      const { columnName } = payload[0];\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler({ payload, ...restArgs });\n      }\n    };\n    this.onEnter = ({ payload }) => {\n      this.setState({\n        sourceColumnName: payload[0].columnName,\n      });\n    };\n    this.onOver = ({ clientOffset }) => {\n      const { onGroupDraft, items } = this.props;\n      const { sourceColumnName, targetItemIndex: prevTargetItemIndex } = this.state;\n      // eslint-disable-next-line react/no-find-dom-node\n      const itemGeometries = this.itemRefs\n        .map(ref => ref.getBoundingClientRect());\n      const sourceItemIndex = items.findIndex(({ column }) => column.name === sourceColumnName);\n      const targetItemIndex = getGroupCellTargetIndex(\n        itemGeometries,\n        sourceItemIndex,\n        clientOffset,\n      );\n\n      if (prevTargetItemIndex === targetItemIndex) return;\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n      this.setState({ targetItemIndex });\n    };\n    this.onLeave = () => {\n      const { onGroupDraft } = this.props;\n      const { sourceColumnName } = this.state;\n      if (!this.draggingColumnName) {\n        this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1,\n      });\n      this.setState({\n        targetItemIndex: -1,\n      });\n    };\n    this.onDrop = () => {\n      const { onGroup } = this.props;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n    };\n    this.onDragStart = (columnName) => {\n      this.draggingColumnName = columnName;\n    };\n    this.onDragEnd = () => {\n      this.draggingColumnName = null;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      const { onGroup } = this.props;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName,\n        });\n      }\n      this.resetState();\n    };\n  }\n\n  resetState() {\n    const { onGroupDraftCancel } = this.props;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    });\n  }\n\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n      draggingEnabled,\n      isColumnGroupingEnabled,\n    } = this.props;\n\n    this.itemRefs = [];\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              item={item}\n              itemComponent={Item}\n              itemRef={element => element && this.itemRefs.push(element)}\n              draggingEnabled={draggingEnabled && isColumnGroupingEnabled(columnName)}\n              onDragStart={() => this.onDragStart(columnName)}\n              onDragEnd={this.onDragEnd}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return draggingEnabled\n      ? (\n        <DropTarget\n          onEnter={args => this.handleDragEvent(this.onEnter, args)}\n          onOver={args => this.handleDragEvent(this.onOver, args)}\n          onLeave={args => this.handleDragEvent(this.onLeave, args)}\n          onDrop={args => this.handleDragEvent(this.onDrop, args)}\n        >\n          {groupPanel}\n        </DropTarget>\n      )\n      : groupPanel;\n  }\n}\n\n/** @internal */\nexport const GroupPanelLayout: React.ComponentType<GP.LayoutProps> = GroupPanelLayoutBase;\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector, withComponents,\n  Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n  TOP_POSITION,\n  GroupingPanelItem,\n} from '@devexpress/dx-grid-core';\nimport { GroupPanelLayout as Layout } from '../components/group-panel-layout';\nimport { GroupingPanelProps } from '../types';\n\nconst defaultMessages = {\n  groupByColumn: 'Drag a column header here to group by that column',\n};\n\nconst defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {},\n};\n\nclass GroupingPanelRaw extends React.PureComponent<GroupingPanelProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n  static components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage',\n  };\n\n  render() {\n    const {\n      layoutComponent: LayoutComponent,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const EmptyMessagePlaceholder = ({ forwardedRef }: { forwardedRef?: React.Ref<Element> }) => (\n      <EmptyMessage\n        getMessage={getMessage}\n        forwardedRef={forwardedRef}\n      />\n    );\n\n    const ItemPlaceholder = ({\n      item, forwardedRef,\n    }: { item: GroupingPanelItem, forwardedRef?: React.Ref<Element> }) => {\n      const { name: columnName } = item.column;\n\n      return (\n        <TemplateConnector>\n          {(\n            { sorting, isColumnSortingEnabled, isColumnGroupingEnabled },\n            { changeColumnGrouping, changeColumnSorting },\n          ) => {\n            const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n            const groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n\n            return (\n              <Item\n                forwardedRef={forwardedRef}\n                item={item}\n                sortingEnabled={sortingEnabled}\n                groupingEnabled={groupingEnabled}\n                showSortingControls={showSortingControls}\n                sortingDirection={showSortingControls\n                  ? getColumnSortingDirection(sorting, columnName)! : undefined}\n                showGroupingControls={showGroupingControls}\n                onGroup={() => changeColumnGrouping({ columnName })}\n                onSort={(\n                  { direction, keepOther },\n                ) => changeColumnSorting({ columnName, direction, keepOther })}\n              />\n            );\n          }}\n        </TemplateConnector>\n      );\n    };\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={[\n          { name: 'GroupingState' },\n          { name: 'Toolbar' },\n          { name: 'SortingState', optional: !showSortingControls },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              columns, grouping, draftGrouping,\n              draggingEnabled, isColumnGroupingEnabled, isDataRemote,\n            }: Getters, {\n              changeColumnGrouping, draftColumnGrouping, cancelColumnGroupingDraft, scrollToRow,\n            }: Actions) => {\n              const onGroup = (config) => {\n                if (isDataRemote) {\n                  scrollToRow(TOP_POSITION);\n                }\n                changeColumnGrouping(config);\n              };\n\n              return <LayoutComponent\n                items={groupingPanelItems(columns, grouping, draftGrouping)}\n                isColumnGroupingEnabled={isColumnGroupingEnabled}\n                draggingEnabled={draggingEnabled}\n                onGroup={onGroup}\n                onGroupDraft={draftColumnGrouping}\n                onGroupDraftCancel={cancelColumnGroupingDraft}\n                itemComponent={ItemPlaceholder}\n                emptyMessageComponent={EmptyMessagePlaceholder}\n                containerComponent={Container}\n              />;\n            }}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\n * to change grouped columns' sorting order and render sorting indicators.\n * */\nexport const GroupingPanel: React.ComponentType<GroupingPanelProps> = withComponents(\n  { Layout },\n)(GroupingPanelRaw);\n", "import * as React from 'react';\nimport { Plugin, Template, Getter, Getters } from '@devexpress/dx-react-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\nimport {\n  DataTypeProvider as DataTypeProviderNS, DataTypeProviderProps,\n} from '../types';\n\nclass DataTypeProviderBase extends React.PureComponent<DataTypeProviderProps> {\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this.props;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations }: Getters,\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations!,\n      columnNames,\n    );\n\n    return (\n      <Plugin name=\"DataTypeProvider\" key={columnNames.join('_')}>\n        <Getter\n          name=\"getAvailableFilterOperations\"\n          computed={getAvailableFilterOperationsComputed}\n        />\n        {Formatter\n          ? (\n            <Template\n              name=\"valueFormatter\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueFormatterProps) => <Formatter {...params} />}\n            </Template>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <Template\n              name=\"valueEditor\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueEditorProps) => <Editor {...params} />}\n            </Template>\n          )\n          : null\n        }\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\nexport const DataTypeProvider: React.ComponentType<DataTypeProviderProps> = DataTypeProviderBase;\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Action,\n  Getter,\n  Plugin,\n  Template,\n  TemplateConnector,\n  TemplatePlaceholder,\n  createStateHelper,\n  ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  toggleColumn,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumns } from './internal/visible-table-columns';\nimport { TableColumnVisibilityProps, TableColumnVisibilityState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  noColumns: 'Nothing to show',\n};\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnVisibilityBase extends React.PureComponent<TableColumnVisibilityProps, TableColumnVisibilityState> {\n  static defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true,\n  };\n  static components = {\n    emptyMessageComponent: 'EmptyMessage',\n  };\n  toggleColumnVisibility: ActionFn<string[]>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        hiddenColumnNames: () => {\n          const { onHiddenColumnNamesChange } = this.props;\n          return onHiddenColumnNamesChange;\n        },\n      },\n    );\n\n    this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(\n      stateHelper, 'hiddenColumnNames', toggleColumn,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      hiddenColumnNames = prevState.hiddenColumnNames,\n    } = nextProps;\n\n    return {\n      hiddenColumnNames,\n    };\n  }\n\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const { hiddenColumnNames } = this.state;\n    const { columnExtensions, columnTogglingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <VisibleTableColumns hiddenColumnNames={hiddenColumnNames} />\n\n        <Getter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <Action\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (tableDataColumnsExist(tableColumns)\n                ? <TemplatePlaceholder />\n                : (\n                  <EmptyMessage\n                    getMessage={getMessage}\n                    {...params}\n                  />\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage',\n};\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages Grid columns' visibility. */\nexport const TableColumnVisibility: React.ComponentType<TableColumnVisibilityProps> = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n", "import * as React from 'react';\n\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { ToolbarProps, TableKeyboardNavigation } from '../types';\n\nclass ToolbarBase extends React.PureComponent<ToolbarProps> {\n  static components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace',\n  };\n\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n        {(params: TableKeyboardNavigation.ExtraProps) => (\n          <React.Fragment>\n            <Root {...params}>\n              <TemplatePlaceholder name=\"toolbarContent\" />\n            </Root>\n            <TemplatePlaceholder />\n          </React.Fragment>\n        )}\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Grid toolbar. */\nexport const Toolbar: React.ComponentType<ToolbarProps> = ToolbarBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { TreeDataStateProps, TreeDataStateState } from '../types';\n\nclass TreeDataStateBase extends React.PureComponent<TreeDataStateProps, TreeDataStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"TreeDataState\"\n      >\n        <Getter name=\"expandedRowIds\" value={expandedRowIds} />\n        {' '}\n        {/* collision =( */}\n        <Action name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for tree rows. */\nexport const TreeDataState: React.ComponentType<TreeDataStateProps> = TreeDataStateBase;\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomTreeDataProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds }: Getters,\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows }: Getters,\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows }: Getters,\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }: Getters) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }: Getters) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows }: Getters,\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }: Getters) => unwrappedCustomTreeRows(rows);\n\nclass CustomTreeDataBase extends React.PureComponent<CustomTreeDataProps> {\n  render() {\n    const {\n      getChildRows,\n    } = this.props;\n    const treeRowsComputed = ({ rows }: Getters) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <Plugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={treeRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <Getter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <Getter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <Getter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <Getter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that converts custom formatted tree data to a supported format and performs\n * local row expanding/collapsing.\n * */\nexport const CustomTreeData: React.ComponentType<CustomTreeDataProps> = CustomTreeDataBase;\n", "import * as React from 'react';\nimport {\n  Template, Getter, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\nimport { TableTreeColumnProps, TableCellProps } from '../types';\n\nclass TableTreeColumnBase extends React.PureComponent<TableTreeColumnProps> {\n  static defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false,\n  };\n  static components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox',\n  };\n\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"TableTreeColumn\"\n        dependencies={[\n          { name: 'DataTypeProvider', optional: true },\n          { name: 'TreeDataState' },\n          { name: 'SelectionState', optional: !showSelectionControls },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n          { name: 'Table' },\n          { name: 'TableHeaderRow', optional: true },\n        ]}\n        key={forColumnName}\n      >\n        <Getter name=\"tableTreeColumnName\" value={forColumnName} />\n        <Template\n          name=\"tableHeaderCellBefore\"\n          predicate={({ column }: any) => column.name === forColumnName}\n        >\n          <ExpandButton\n            visible={false}\n            expanded={false}\n            onToggle={() => {}}\n          />\n          {showSelectionControls && showSelectAll && (\n            <TemplateConnector>\n              {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                <Checkbox\n                  disabled={!selectAllAvailable}\n                  checked={allSelected}\n                  indeterminate={someSelected}\n                  onChange={toggleSelectAll}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCollapsedRows, expandedRowIds, selection, isTreeRowLeaf, getTreeRowLevel,\n                getCellValue,\n              }, {\n                toggleRowExpanded, toggleSelection,\n              }) => {\n                const { row, rowId } = params.tableRow;\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\nexport const TableTreeColumn: React.ComponentType<TableTreeColumnProps> = TableTreeColumnBase;\n", "import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\nimport { SearchStateProps, SearchStateState } from '../types';\n\nclass SearchStateBase extends React.PureComponent<SearchStateProps, SearchStateState> {\n  static defaultProps = {\n    defaultValue: '',\n  };\n  changeValue: ActionFn<string>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value || props.defaultValue,\n    };\n    const stateHelper = createStateHelper(this, {\n      value: () => {\n        const { onValueChange } = this.props;\n        return onValueChange;\n      },\n    });\n\n    this.changeValue = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'value', changeSearchValue);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      value = prevState.value,\n    } = nextProps;\n\n    return {\n      value,\n    };\n  }\n\n  render() {\n    const { value } = this.state;\n    const filterExpressionComputed = (\n      { filterExpression, columns }: Getters,\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <Plugin\n        name=\"SearchState\"\n      >\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter name=\"searchValue\" value={value} />\n        <Action name=\"changeSearchValue\" action={this.changeValue} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the search state. */\nexport const SearchState: React.ComponentType<SearchStateProps> = SearchStateBase;\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template,\n  TemplatePlaceholder,\n  Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  TOP_POSITION,\n} from '@devexpress/dx-grid-core';\nimport { SearchPanelProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'SearchState' },\n];\n\nconst defaultMessages = {\n  searchPlaceholder: 'Search...',\n};\n\nclass SearchPanelBase extends React.PureComponent<SearchPanelProps> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    inputComponent: 'Input',\n  };\n  ref: React.RefObject<HTMLElement> = React.createRef();\n\n  render() {\n    const { inputComponent: Input, messages } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"SearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ searchValue, isDataRemote },\n            { changeSearchValue, scrollToRow, setSearchPanelRef }) => {\n              const onValueChange = (value) => {\n                if (isDataRemote) {\n                  scrollToRow(TOP_POSITION);\n                }\n                changeSearchValue(value);\n              };\n              if (setSearchPanelRef) {\n                setSearchPanelRef(this.ref);\n              }\n\n              return <Input\n                value={searchValue}\n                inputRef={this.ref}\n                onValueChange={onValueChange}\n                getMessage={getMessage}\n              />;\n            }}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Search Panel. */\nexport const SearchPanel: React.ComponentType<SearchPanelProps> = SearchPanelBase;\n", "import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isFixedTableRow,\n  tableColumnsWithFixed,\n  tableHeaderRowsWithFixed,\n  tableHeaderColumnChainsWithFixed,\n  calculateFixedColumnProps,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableCellProps, TableRowProps, TableFixedColumnsProps, TableFixedColumnsState,\n} from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithFixed(tableHeaderRows);\nconst tableHeaderColumnChainsComputed = (\n  { tableColumns, tableHeaderRows, tableHeaderColumnChains }: Getters,\n) => tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n\nconst CellPlaceholder = props => <TemplatePlaceholder params={props} />;\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'TableBandHeader', optional: true },\n  { name: 'TableColumnReordering', optional: true },\n  { name: 'TableEditColumn', optional: true },\n  { name: 'TableEditRow', optional: true },\n  { name: 'TableFilterRow', optional: true },\n  { name: 'TableGroupRow', optional: true },\n  { name: 'TableHeaderRow', optional: true },\n  { name: 'TableRowDetail', optional: true },\n  { name: 'TableSelection', optional: true },\n  { name: 'TableSummaryRow', optional: true },\n  { name: 'TableTreeColumn', optional: true },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableFixedColumnsBase extends React.PureComponent<TableFixedColumnsProps, TableFixedColumnsState> {\n  static components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell',\n  };\n  static defaultProps = {\n    leftColumns: [],\n    rightColumns: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tableColumnDimensions: {},\n    };\n  }\n\n  handleListenerSizeChange(key, width) {\n    const { tableColumnDimensions } = this.state;\n    if (tableColumnDimensions[key] !== width) {\n      this.setState(state => ({\n        tableColumnDimensions: {\n          ...state.tableColumnDimensions,\n          [key]: width,\n        },\n      }));\n    }\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      listenerRowComponent: ListenerRow,\n      listenerCellComponent: ListenerCell,\n    } = this.props;\n    const leftColumns = this.props.leftColumns!;\n    const rightColumns = this.props.rightColumns!;\n\n    const tableColumnsComputed = ({ tableColumns }: Getters) => tableColumnsWithFixed(\n      tableColumns,\n      leftColumns,\n      rightColumns,\n    );\n\n    return (\n      <Plugin\n        name=\"TableFixedColumns\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableColumn }: any) => !!tableColumn.fixed}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns, tableHeaderColumnChains, selection, focused, highlightSelectedRow,\n              }) => {\n                const selected = isRowHighlighted(highlightSelectedRow, selection,\n                  params.tableRow, focused);\n                const { tableColumnDimensions } = this.state;\n                const fixedColumnProps = calculateFixedColumnProps(\n                  params,\n                  { leftColumns, rightColumns },\n                  tableColumns,\n                  tableColumnDimensions,\n                  tableHeaderColumnChains,\n                );\n\n                return (\n                  <Cell\n                    {...params}\n                    {...fixedColumnProps}\n                    component={CellPlaceholder}\n                    selected={selected}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <ListenerRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <ListenerCell\n              {...params}\n              listen={!!params.tableColumn.fixed}\n              onSizeChange={({\n                width,\n              }) => this.handleListenerSizeChange(params.tableColumn.key, width)}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\nexport const TableFixedColumns: React.ComponentType<TableFixedColumnsProps> = TableFixedColumnsBase;\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { prepareGroupSummaryItems } from '@devexpress/dx-grid-core';\nimport { SummaryStateProps } from '../types';\n\nconst groupSummaryItemsComputed = (\n  { groupSummaryItems }: Getters,\n) => prepareGroupSummaryItems(groupSummaryItems);\n\nclass SummaryStateBase extends React.PureComponent<SummaryStateProps> {\n  static defaultProps = {\n    totalItems: [],\n    groupItems: [],\n    treeItems: [],\n  };\n\n  render() {\n    const { totalItems, groupItems, treeItems } = this.props;\n\n    return (\n      <Plugin\n        name=\"SummaryState\"\n      >\n        <Getter name=\"totalSummaryItems\" value={totalItems} />\n        <Getter name=\"groupSummaryItems\" value={groupItems} />\n        <Getter name=\"groupSummaryItems\" computed={groupSummaryItemsComputed} />\n        <Getter name=\"treeSummaryItems\" value={treeItems} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that provides items for total, group, and tree summaries. */\nexport const SummaryState: React.ComponentType<SummaryStateProps> = SummaryStateBase;\n", "import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  defaultSummaryCalculator,\n  totalSummaryValues,\n  groupSummaryValues,\n  treeSummaryValues,\n  SummaryCalculator,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSummaryProps, SummaryType } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n  { name: 'IntegratedGrouping', optional: true },\n];\n\nclass IntegratedSummaryBase extends React.PureComponent<IntegratedSummaryProps> {\n  static defaultCalculator: SummaryCalculator = defaultSummaryCalculator;\n\n  render() {\n    const { calculator } = this.props;\n\n    const totalSummaryValuesComputed = ({\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => totalSummaryValues(\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const groupSummaryValuesComputed = ({\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => groupSummaryValues(\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const treeSummaryValuesComputed = ({\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n    }: Getters) => treeSummaryValues(\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n      calculator,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" computed={totalSummaryValuesComputed} />\n        <Getter name=\"groupSummaryValues\" computed={groupSummaryValuesComputed} />\n        <Getter name=\"treeSummaryValues\" computed={treeSummaryValuesComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs a built-in data summary calculation. */\nexport const IntegratedSummary: React.ComponentType<IntegratedSummaryProps> & {\n  /** The built-in summary calculator. */\n  defaultCalculator: (type: SummaryType, rows: Array<any>, getValue: (row: any) => any) => any;\n} = IntegratedSummaryBase;\n", "import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomSummaryProps } from '../types/summary/custom-summary.types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nclass CustomSummaryBase extends React.PureComponent<CustomSummaryProps> {\n  render() {\n    const { totalValues, groupValues, treeValues } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" value={totalValues} />\n        <Getter name=\"groupSummaryValues\" value={groupValues} />\n        <Getter name=\"treeSummaryValues\" value={treeValues} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows you to calculate a custom summary. */\nexport const CustomSummary: React.ComponentType<CustomSummaryProps> = CustomSummaryBase;\n", "import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithSummaries,\n  tableRowsWithTotalSummaries,\n  isTotalSummaryTableCell,\n  isGroupSummaryTableCell,\n  isTreeSummaryTableCell,\n  isTotalSummaryTableRow,\n  isGroupSummaryTableRow,\n  isTreeSummaryTableRow,\n  getColumnSummaries,\n  TABLE_TREE_SUMMARY_TYPE,\n  TABLE_GROUP_SUMMARY_TYPE,\n  TABLE_TOTAL_SUMMARY_TYPE,\n  isFooterSummary,\n} from '@devexpress/dx-grid-core';\nimport { TableCellProps, TableRowProps, TableSummaryRowProps } from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\n\nconst dependencies = [\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState' },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'TableTreeColumn', optional: true },\n];\n\nconst tableBodyRowsComputed = ({\n  tableBodyRows,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  groupSummaryItems,\n  treeSummaryItems,\n}: Getters) => tableRowsWithSummaries(\n  tableBodyRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId,\n);\nconst tableFooterRowsComputed = ({\n  tableFooterRows, totalSummaryItems,\n}: Getters) => totalSummaryItems.length\n  ? tableRowsWithTotalSummaries(tableFooterRows)\n  : tableFooterRows;\n\nexport class TableSummaryRowBase extends React.PureComponent<TableSummaryRowProps> {\n  static TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  static GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  static TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  static defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {},\n  };\n  static components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item',\n  };\n\n  renderContent(column, columnSummaries) {\n    const {\n      formatlessSummaryTypes,\n      itemComponent: Item,\n      messages,\n    } = this.props;\n\n    return (\n      <TableSummaryContent\n        column={column}\n        columnSummaries={columnSummaries}\n        formatlessSummaryTypes={formatlessSummaryTypes}\n        itemComponent={Item}\n        messages={messages!}\n      />\n    );\n  }\n\n  render() {\n    const {\n      totalRowComponent: TotalRow,\n      groupRowComponent: GroupRow,\n      treeRowComponent: TreeRow,\n      totalCellComponent: TotalCell,\n      groupCellComponent: GroupCell,\n      treeCellComponent: TreeCell,\n      treeColumnCellComponent: TreeColumnCell,\n      treeColumnContentComponent: TreeColumnContent,\n      treeColumnIndentComponent: TreeColumnIndent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableSummaryRow\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" computed={tableFooterRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTotalSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ totalSummaryItems, totalSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  totalSummaryItems,\n                  params.tableColumn.column!.name,\n                  totalSummaryValues,\n                );\n                return (\n                  <TotalCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TotalCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isGroupSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ groupSummaryItems, groupSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  groupSummaryItems,\n                  params.tableColumn.column!.name,\n                  groupSummaryValues[params.tableRow.row.compoundKey],\n                  summaryItem => isFooterSummary(summaryItem),\n                );\n                return (\n                  <GroupCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </GroupCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                treeSummaryItems,\n                treeSummaryValues,\n                tableTreeColumnName,\n                getRowId,\n                getTreeRowLevel,\n              }) => {\n                const columnSummaries = getColumnSummaries(\n                  treeSummaryItems,\n                  params.tableColumn.column!.name,\n                  treeSummaryValues[getRowId(params.tableRow.row)],\n                );\n                if (tableTreeColumnName === params.tableColumn.column!.name) {\n                  return (\n                    <TreeColumnCell\n                      {...params}\n                      column={params.tableColumn.column!}\n                    >\n                      <TreeColumnIndent\n                        level={getTreeRowLevel(params.tableRow.row)}\n                      />\n                      <TreeColumnContent>\n                        {this.renderContent(params.tableColumn.column, columnSummaries)}\n                      </TreeColumnContent>\n                    </TreeColumnCell>\n                  );\n                }\n                return (\n                  <TreeCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TreeCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTotalSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TotalRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isGroupSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTreeSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TreeRow\n              {...params}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders table rows that display a total, group, and tree summary. */\nexport const TableSummaryRow: React.ComponentType<TableSummaryRowProps> & {\n  /** The tree summary row type's indentifier. */\n  TREE_ROW_TYPE: symbol;\n  /** The group summary row type's indentifier. */\n  GROUP_ROW_TYPE: symbol;\n  /** The total row type's indentifier. */\n  TOTAL_ROW_TYPE: symbol;\n} = TableSummaryRowBase;\n", "import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  virtualRowsWithCache, trimRowsToInterval, emptyVirtualRows, plainRows, loadedRowsStart,\n  VirtualRows, Interval, getAvailableRowCount, needFetchMorePages, getReferenceIndex,\n  shouldSendRequest, getRequestMeta,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableStateProps, VirtualTableStateState } from '../../types';\n\nconst virtualRowsComputed = (\n  { skip, rows, virtualRowsCache }: Getters,\n) => virtualRowsWithCache(skip, rows, virtualRowsCache);\n\nconst rowsComputed = (\n  { virtualRows, availableRowCount }: Getters,\n) => plainRows(virtualRows, availableRowCount);\n\nconst loadedRowsStartComputed = ({ virtualRows }: Getters) => loadedRowsStart(virtualRows);\n\n// tslint:disable-next-line: max-line-length\nclass VirtualTableStateBase extends React.PureComponent<VirtualTableStateProps, VirtualTableStateState> {\n  static defaultProps = {\n    pageSize: 100,\n  };\n  requestTimer: number = 0;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedStartIndex: 0,\n      availableRowCount: props.totalRowCount || 0,\n      requestedEndIndex: 2 * props.pageSize,\n    };\n  }\n\n  setViewport = (\n    viewport,\n    { virtualRows }: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    const { pageSize } = this.props;\n    const referenceIndex = getReferenceIndex(viewport);\n\n    if (needFetchMorePages(virtualRows, referenceIndex, pageSize!)) {\n      requestNextPage({ referenceIndex });\n    }\n  }\n\n  requestNextPageAction = (\n    { referenceIndex, forceReload },\n    { virtualRows }: Getters,\n  ) => {\n    const { pageSize, totalRowCount, infiniteScrolling } = this.props;\n    const { requestedStartIndex, requestedEndIndex } = this.state;\n    const actualVirtualRows = forceReload ? emptyVirtualRows : virtualRows;\n    const { requestedRange, actualBounds } = getRequestMeta(\n      referenceIndex, virtualRows, pageSize!, totalRowCount, forceReload, infiniteScrolling,\n    );\n\n    if (forceReload || shouldSendRequest(requestedRange, requestedStartIndex, requestedEndIndex)) {\n      this.requestNextPage(requestedRange, actualVirtualRows, actualBounds);\n    }\n  }\n\n  requestNextPage(\n    requestedRange: Interval, virtualRows: VirtualRows, actualBounds: Interval,\n  ) {\n    const { getRows, infiniteScrolling, totalRowCount } = this.props;\n    const { availableRowCount: stateAvailableCount } = this.state;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      const { start: requestedStartIndex, end } = requestedRange;\n      const loadCount = end - requestedStartIndex;\n      const virtualRowsCache = trimRowsToInterval(virtualRows, actualBounds);\n      const availableRowCount = getAvailableRowCount(\n        infiniteScrolling,\n        actualBounds.end,\n        stateAvailableCount,\n        totalRowCount,\n      );\n\n      getRows(requestedStartIndex, loadCount);\n\n      this.setState({\n        virtualRowsCache,\n        availableRowCount,\n        requestedStartIndex,\n        requestedEndIndex: end,\n      });\n    }, 50);\n  }\n\n  requestFirstPage() {\n    const { getRows, pageSize } = this.props;\n    const startIndex = 0;\n    const endIndex = 2 * pageSize!;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      getRows(startIndex, endIndex);\n\n      this.setState({\n        virtualRowsCache: emptyVirtualRows,\n        requestedStartIndex: startIndex,\n        requestedEndIndex: endIndex,\n      });\n    }, 50);\n  }\n\n  clearRowsCacheAction = (\n    _: any,\n    __: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    this.setState({\n      virtualRowsCache: emptyVirtualRows,\n    });\n    requestNextPage({ forceReload: true });\n  }\n\n  resetVirtualTablePosition = () => this.requestFirstPage();\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      availableRowCount: prevAvailableRowCount = prevState.availableRowCount,\n      totalRowCount,\n      pageSize,\n      infiniteScrolling,\n    } = nextProps;\n    const {\n      requestedStartIndex: prevRequestedStartIndex,\n      virtualRowsCache: prevVirtualRowCache,\n    } = prevState;\n\n    const availableRowCount = getAvailableRowCount(\n      infiniteScrolling,\n      pageSize * 2,\n      prevAvailableRowCount,\n      totalRowCount,\n    );\n    const requestedStartIndex = Math.max(\n      Math.min(prevRequestedStartIndex, availableRowCount - pageSize),\n      0,\n    );\n    const virtualRowsCache =\n      prevRequestedStartIndex === requestedStartIndex\n        ? prevVirtualRowCache\n        : emptyVirtualRows;\n\n    return {\n      availableRowCount,\n      requestedStartIndex,\n      virtualRowsCache,\n    };\n  }\n\n  componentDidMount() {\n    const { getRows, pageSize, infiniteScrolling, totalRowCount } = this.props;\n    getRows(0, 2 * pageSize!);\n\n    const newRowCount = infiniteScrolling ? 2 * pageSize! : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount,\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  }\n\n  render() {\n    const { virtualRowsCache, availableRowCount } = this.state;\n    const { skip, pageSize, loading, infiniteScrolling } = this.props;\n\n    return (\n      <Plugin\n        name=\"VirtualTableState\"\n      >\n        <Getter name=\"isDataRemote\" value />\n        <Getter name=\"isDataLoading\" value={loading} />\n        <Getter name=\"isScrollingInfinite\" value={infiniteScrolling} />\n        <Getter name=\"skip\" value={skip} />\n        <Getter name=\"virtualRowsCache\" value={virtualRowsCache} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Getter name=\"availableRowCount\" value={availableRowCount} />\n\n        <Getter name=\"virtualRows\" computed={virtualRowsComputed} />\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"loadedRowsStart\" computed={loadedRowsStartComputed} />\n\n        <Action name=\"requestNextPage\" action={this.requestNextPageAction} />\n        <Action name=\"setViewport\" action={this.setViewport} />\n        <Action name=\"clearRowCache\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnSorting\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnFilter\" action={this.resetVirtualTablePosition} />\n        <Action name=\"changeSearchValue\" action={this.resetVirtualTablePosition} />\n        <Action name=\"changeColumnGrouping\" action={this.resetVirtualTablePosition} />\n      </Plugin>\n    );\n  }\n}\n\nexport const VirtualTableState: React.ComponentType<VirtualTableStateProps> = VirtualTableStateBase;\n", "import * as React from 'react';\nimport {\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  TABLE_DATA_TYPE,\n  rowsWithEditingCells,\n  columnsWithEditingCells,\n} from '@devexpress/dx-grid-core';\nimport { TableInlineCellEditingProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst rowsWithEditingCellsComputed = (\n  { tableBodyRows, editingCells }: Getters,\n) => rowsWithEditingCells(tableBodyRows, editingCells);\nconst columnsWithEditingCellsComputed = (\n  { tableColumns, editingCells }: Getters,\n) => columnsWithEditingCells(tableColumns, editingCells);\n\n/* tslint:disable-next-line max-line-length*/\nconst INLINE_CELL_EDITING_ERROR = 'The startEditAction property of the InlineCellEditing plugin is given an invalid value.';\n\n// tslint:disable-next-line: max-line-length\nconst TableInlineCellEditingBase: React.SFC<TableInlineCellEditingProps> & {components: {cellComponent: string}} = (props) => {\n  const { cellComponent: EditCell, startEditAction, selectTextOnEditStart } = props;\n\n  return (\n    <Plugin name=\"TableInlineCellEditing\" dependencies={pluginDependencies}>\n      <Getter name=\"tableBodyRows\" computed={rowsWithEditingCellsComputed} />\n      <Getter name=\"tableColumns\" computed={columnsWithEditingCellsComputed} />\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.type === TABLE_DATA_TYPE &&\n          tableColumn.type === TABLE_DATA_TYPE\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {({}, { startEditCells }) => {\n              const { tableRow : { rowId }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              if (startEditAction !== 'click' && startEditAction !== 'doubleClick') {\n                throw new Error(INLINE_CELL_EDITING_ERROR);\n              }\n\n              const startEditCellCallback = () =>\n                startEditCells({\n                  editingCells: [{ rowId, columnName }],\n                });\n              const eventName = startEditAction === 'click' ? 'onClick' : 'onDoubleClick';\n              const newParams = { ...params, [eventName]: startEditCellCallback };\n\n              return <TemplatePlaceholder params={newParams} />;\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.hasEditCell && tableColumn.hasEditCell\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {(\n              { getCellValue, createRowChange, rowChanges, isColumnEditingEnabled },\n              { changeRow, stopEditCells, commitChangedRows, cancelChangedRows },\n            ) => {\n              const { tableRow : { rowId, row }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              const changedRow = {\n                ...row,\n                ...getRowChange(rowChanges, rowId!),\n              };\n\n              const value = getCellValue(changedRow, columnName);\n              const onValueChange = (newValue: any) => {\n                const changeArgs = {\n                  rowId,\n                  change: createRowChange(changedRow, newValue, columnName),\n                };\n                changeRow(changeArgs);\n              };\n              const onKeyDown = ({ key }) => {\n                if (key === 'Enter') {\n                  commitChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                } else if (key === 'Escape') {\n                  cancelChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                }\n              };\n              const onBlur = () => {\n                commitChangedRows({ rowIds: [rowId] });\n                stopEditCells({ editingCells: [{ rowId, columnName }] });\n              };\n              const onFocus = selectTextOnEditStart ? e => e.target.select() : () => {};\n              const editingEnabled = isColumnEditingEnabled(columnName);\n\n              return (\n                <TemplatePlaceholder\n                  name=\"valueEditor\"\n                  params={{\n                    column,\n                    row,\n                    value,\n                    onValueChange,\n                    disabled: !editingEnabled,\n                  }}\n                >\n                  {content => (\n                    <EditCell\n                      {...params}\n                      row={row}\n                      column={column!}\n                      value={value}\n                      editingEnabled={editingEnabled}\n                      onValueChange={onValueChange}\n                      autoFocus\n                      onKeyDown={onKeyDown}\n                      onBlur={onBlur}\n                      onFocus={onFocus}\n                    >\n                      {content}\n                    </EditCell>\n                  )}\n                </TemplatePlaceholder>\n              );\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n    </Plugin>\n  );\n};\n\nTableInlineCellEditingBase.components = {\n  cellComponent: 'Cell',\n};\n\nTableInlineCellEditingBase.defaultProps = {\n  startEditAction: 'click',\n  selectTextOnEditStart: false,\n};\n\n// tslint:disable-next-line: max-line-length\nexport const TableInlineCellEditing: React.ComponentType<TableInlineCellEditingProps> = TableInlineCellEditingBase;\n", "import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { ExportPanelProps, ExportPanelState } from '../types';\n\nconst defaultMessages = {\n  showExportMenu: 'Export',\n  exportAll: 'Export all data',\n  exportSelected: 'Export selected rows',\n};\n\nclass ExportPanelBase extends React.PureComponent<ExportPanelProps, ExportPanelState> {\n  static components = {\n    toggleButtonComponent: 'ToggleButton',\n    menuComponent: 'Menu',\n    menuItemComponent: 'MenuItem',\n  };\n  button!: React.ReactInstance;\n  state = { visible: false };\n\n  setButtonRef = button => this.button = button;\n\n  handleToggle = () => {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide = () => this.setState({ visible: false });\n\n  render() {\n    const {\n      toggleButtonComponent: ToggleButton,\n      menuComponent: Menu,\n      menuItemComponent: MenuItem,\n      messages,\n      startExport,\n    } = this.props;\n    const {\n      visible,\n    } = this.state;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"ExportPanel\"\n        dependencies={[\n          { name: 'SelectionState', optional: true },\n          { name: 'Toolbar' },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ selection }) => (\n              <>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                />\n                <Menu\n                  visible={visible}\n                  onHide={this.handleHide}\n                  target={this.button}\n                >\n                  <MenuItem\n                    key=\"exportAll\"\n                    text={getMessage('exportAll')}\n                    onClick={() => {\n                      this.handleHide();\n                      startExport();\n                    }}\n                  />\n                  {selection?.length ? (\n                    <MenuItem\n                      key=\"exportSelected\"\n                      text={getMessage('exportSelected')}\n                      onClick={() => {\n                        this.handleHide();\n                        startExport({ selectedOnly: true });\n                      }}\n                    />\n                  ) : null}\n                </Menu>\n              </>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nexport const ExportPanel: React.ComponentType<any> = ExportPanelBase;\n", "import * as React from 'react';\nimport {\n Plugin, TemplateConnector, Action, Template, TemplatePlaceholder, Getter,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_ADDED_TYPE, TABLE_DATA_TYPE, TABLE_FLEX_TYPE,\n  getNextFocusedCell,  getPart, getIndexToFocus,\n  isCellExist, focus, isTabArrowUpDown,\n  filterHeaderRows, Elements, isDataTableRow, isRowFocused, getClosestCellByRow,\n  isCellFocused, getFocusing, RIGHT_POSITION, LEFT_POSITION,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableKeyboardNavigationProps, TableKeyboardNavigationCoreProps, TableKeyboardNavigationCoreState,\n  TableCellProps, TableRowProps,\n} from '../types';\n\nconst CellPlaceholder = (props: TableCellProps) => <TemplatePlaceholder params={props} />;\nconst RowPlaceholder = (props: TableRowProps) => <TemplatePlaceholder params={props} />;\n\nclass TableKeyboardNavigationCore extends React.PureComponent<TableKeyboardNavigationCoreProps,\nTableKeyboardNavigationCoreState> {\n  elements: Elements = {};\n  searchPanelRef: React.RefObject<HTMLElement> | undefined;\n\n  constructor(props) {\n    super(props);\n\n    const focusedCell = props.focusedCell || props.defaultFocusedCell;\n\n    this.state = {\n      focusedElement: focusedCell ?\n      { part: TABLE_DATA_TYPE.toString(), ...focusedCell } : focusedCell,\n    };\n    this.handleKeyDownOnWidget = this.handleKeyDownOnWidget.bind(this);\n    this.updateRef = this.updateRef.bind(this);\n    this.setFocusedElement = this.setFocusedElement.bind(this);\n    this.setSearchPanelRef = this.setSearchPanelRef.bind(this);\n  }\n\n  static getDerivedStateFromProps(\n    props: TableKeyboardNavigationCoreProps, state: TableKeyboardNavigationCoreState,\n  ): TableKeyboardNavigationCoreState {\n    const focusedCell = props.focusedCell !== undefined ? props.focusedCell : state.focusedElement;\n    return {\n      focusedElement: focusedCell ? {\n        part: TABLE_DATA_TYPE.toString(),\n        ...focusedCell,\n      } : undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.props.rootRef.current!.addEventListener('keydown', this.handleKeyDownOnWidget);\n  }\n\n  componentWillUnmount() {\n    this.props.rootRef.current!.removeEventListener('keydown', this.handleKeyDownOnWidget);\n  }\n\n  pushRef(ref, key1, key2) {\n    const { focusedElement } = this.state;\n    const { tableColumns } = this.props;\n    if (!this.elements[key1]) {\n      this.elements[key1] = [];\n    }\n    if (!this.elements[key1][key2]) {\n      this.elements[key1][key2] = [];\n    }\n\n    this.elements[key1][key2].push(ref);\n\n    if (focusedElement?.rowKey === key1 && focusedElement?.columnKey === key2) {\n      focus(this.elements, focusedElement, undefined, this.props.onFocusedCellChange);\n    }\n\n    if (key1.toString().includes(TABLE_ADDED_TYPE.toString()) &&\n    key2 === tableColumns[0].key) {\n      this.changeFocusedElement({\n        part: TABLE_DATA_TYPE.toString(),\n        columnKey: key2,\n        rowKey: key1,\n      }, focusedElement);\n    }\n  }\n\n  setSearchPanelRef(ref) {\n    this.searchPanelRef = ref;\n  }\n\n  removeRef(key1, key2) {\n    delete this.elements[key1][key2];\n    if (Object.keys(this.elements[key1]).length === 0) {\n      delete this.elements[key1];\n    }\n  }\n\n  updateRef({ ref, key1, key2, action }) {\n    if (action === 'add') {\n      this.pushRef(ref, key1, key2);\n    } else {\n      this.removeRef(key1, key2);\n    }\n  }\n\n  changeFocusedElement(focusedCell, prevFocusedCell) {\n    const { onFocusedCellChange } = this.props;\n    this.setState({\n      focusedElement: focusedCell,\n    });\n    focus(this.elements, focusedCell, prevFocusedCell, onFocusedCellChange);\n  }\n\n  handleKeyDownOnWidget(event) {\n    const { focusedElement } = this.state;\n    const {\n      tableColumns, tableBodyRows, tableHeaderRows, expandedRowIds, scrollToColumn, inlineEditing,\n    } = this.props;\n\n    if (event.key === 'f' && (event.ctrlKey || event.metaKey)) {\n      if (this.searchPanelRef) {\n        event.preventDefault();\n        this.searchPanelRef.current?.click();\n      }\n      if (focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n      return;\n    }\n\n    if (focusedElement && !isCellExist(this.elements, focusedElement) && event.key === 'Tab') {\n      const focusedCell = getClosestCellByRow(tableBodyRows, focusedElement, this.elements);\n      event.preventDefault();\n      this.changeFocusedElement(focusedCell, focusedElement);\n      return;\n    }\n\n    if (focusedElement || isTabArrowUpDown(event)) {\n      const { element, scrolling } = getNextFocusedCell(tableColumns, tableBodyRows,\n        tableHeaderRows, expandedRowIds, this.elements, event, inlineEditing,\n        focusedElement, scrollToColumn);\n\n      if (element) {\n        if (scrolling) {\n          scrollToColumn(scrolling === 'left' ? LEFT_POSITION : RIGHT_POSITION);\n        }\n        event.preventDefault();\n        this.changeFocusedElement(element, focusedElement);\n      } else if (isTabArrowUpDown(event) && focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n    }\n  }\n\n  setFocusedElement({ key1, key2, event }) {\n    const { focusedElement } = this.state;\n    const { inlineEditing } = this.props;\n    if (key1 === 'paging' || key1 === 'toolbar') {\n      this.changeFocusedElement(undefined, focusedElement);\n    } else if (key2.includes(TABLE_FLEX_TYPE.toString())) {\n      const columnKey = this.props.tableColumns[0].key;\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey,\n        index: -1,\n        part: getPart(key1),\n      }, focusedElement);\n    } else {\n      const part = getPart(key1);\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey: key2,\n        index: getIndexToFocus(key1, key2, this.elements, event, inlineEditing, part),\n        part,\n      }, focusedElement);\n    }\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      focusedRowEnabled,\n      tableBodyRows,\n    } = this.props;\n    const { focusedElement } = this.state;\n    const getFocusedGetter = () => getFocusing(tableBodyRows, focusedElement);\n    return (\n      <Plugin\n        name=\"TableKeyboardNavigationCore\"\n      >\n        <Action name=\"setSearchPanelRef\" action={this.setSearchPanelRef} />\n        {focusedRowEnabled &&\n          <Getter name=\"highlightSelectedRow\" value />\n        }\n        {focusedRowEnabled &&\n          <Getter name=\"focused\" computed={getFocusedGetter} />\n        }\n        <Template name=\"tableCell\">\n          {(params: TableCellProps) => (\n            <Cell\n              {...params}\n              component={CellPlaceholder}\n              tabIndex={0}\n              updateRefForKeyboardNavigation={this.updateRef}\n              setFocusedElement={this.setFocusedElement}\n              focused={isCellFocused(params.tableRow, params.tableColumn, focusedElement)}\n            />\n          )}\n        </Template>\n        <Template name=\"header\">\n          <TemplatePlaceholder\n            params={{\n              updateRefForKeyboardNavigation: this.updateRef,\n              setFocusedElement: this.setFocusedElement,\n            }}\n          />\n        </Template>\n        <Template name=\"footer\">\n          <TemplatePlaceholder\n            params={{\n              updateRefForKeyboardNavigation: this.updateRef,\n              setFocusedElement: this.setFocusedElement,\n            }}\n          />\n        </Template>\n        {(focusedRowEnabled) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <Row\n                {...params}\n                component={RowPlaceholder}\n                focused={isRowFocused(params.tableRow, focusedElement?.rowKey)}\n              />\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass TableKeyboardNavigationBase extends React.PureComponent<TableKeyboardNavigationProps> {\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n  };\n  render() {\n    return (\n      <Plugin\n        name=\"TableKeyboardNavigation\"\n        dependencies={[\n          { name: 'Table' },\n        ]}\n      >\n        <TemplateConnector>\n        {(\n          { tableColumns, tableBodyRows, rootRef, tableHeaderRows, expandedRowIds },\n          { scrollToColumn, stopEditCells, commitChangedRows, cancelChangedRows, startEditCells },\n        ) => {\n          return rootRef.current ? (\n            <TableKeyboardNavigationCore\n              tableColumns={tableColumns}\n              tableBodyRows={tableBodyRows}\n              rootRef={rootRef}\n              tableHeaderRows={filterHeaderRows(tableHeaderRows)}\n              expandedRowIds={expandedRowIds}\n              scrollToColumn={scrollToColumn}\n              inlineEditing={{\n                stopEditCells,\n                commitChangedRows,\n                cancelChangedRows,\n                startEditCells,\n              }}\n              {...this.props}\n            />\n          ) : null;\n        }}\n        </TemplateConnector>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\nexport const TableKeyboardNavigation: React.ComponentType<TableKeyboardNavigationProps> = TableKeyboardNavigationBase;\n", "export const getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n\nexport const isNumber = (value: string | number) =>\n  typeof value === 'number' || !Number.isNaN(Number(value));\n", "/* globals requestAnimationFrame cancelAnimationFrame */\n\nimport * as React from 'react';\nimport {\n  getAnimations,\n  filterActiveAnimations,\n  evalAnimations,\n  TABLE_FLEX_TYPE,\n  ColumnAnimationMap,\n} from '@devexpress/dx-grid-core';\nimport { shallowEqual } from '@devexpress/dx-core';\nimport { TableLayoutCoreProps, TableLayoutCoreState } from '../types';\nimport { isNumber } from '../utils/helpers';\n\nclass TableLayoutBase extends React.PureComponent<TableLayoutCoreProps, TableLayoutCoreState> {\n  animations: ColumnAnimationMap;\n  savedScrollWidth: { [key: number]: number };\n  savedOffsetWidth = -1;\n  tableRef: React.RefObject<HTMLTableElement>;\n  raf = -1;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationState: new Map(),\n    };\n\n    this.animations = new Map();\n    this.savedScrollWidth = {};\n    this.tableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.tableRef.current) {\n      const { forwardedRef } = this.props;\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(this.tableRef.current);\n      } else if (forwardedRef) {\n        forwardedRef.current = this.tableRef.current;\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { columns } = this.props;\n    const { columns: prevColumns } = prevProps;\n    const { animationState } = this.state;\n\n    const activeAnimationExists = !shallowEqual(columns, prevColumns)\n      || !!animationState.size || !!this.animations.size;\n\n    // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  }\n\n  processAnimation(prevColumns) {\n    const { columns } = this.props;\n    const tableWidth = this.getTableWidth(prevColumns, columns);\n\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  }\n\n  getTableWidth(prevColumns, columns) {\n    const { offsetWidth, scrollWidth } = this.tableRef.current!;\n    const { animationState } = this.state;\n\n    const widthChanged = this.savedOffsetWidth !== offsetWidth\n      || !this.savedScrollWidth[columns.length];\n    const columnCountChanged = columns.length !== prevColumns.length;\n\n    if (columnCountChanged || (widthChanged && !animationState.size)) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n\n    return this.savedScrollWidth[columns.length];\n  }\n\n  getColumns() {\n    const { columns } = this.props;\n    const { animationState } = this.state;\n\n    let result = columns;\n\n    const isFixedWidth = columns\n      .filter(column => column.width === undefined || column.width === 'auto')\n      .length === 0;\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = [...result, { key: TABLE_FLEX_TYPE.toString(), type: TABLE_FLEX_TYPE }];\n    }\n\n    if (animationState.size) {\n      result = result\n        .map(column => (animationState.has(column.key)\n          ? { ...column, animationState: animationState.get(column.key) }\n          : column));\n    }\n\n    return result;\n  }\n\n  processAnimationFrame() {\n    const { animationState: animationComponentState } = this.state;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({ animationState: new Map() });\n      }\n      return;\n    }\n\n    const animationState = evalAnimations(this.animations);\n    this.setState({ animationState });\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      minColumnWidth,\n      forwardedRef,\n      ...restProps\n    } = this.props;\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .filter(value => value !== 'auto' && value !== 0)\n      .map(value => isNumber(value) ? `${value}px` : value)\n      .join(' + ');\n\n    return (\n      <Layout\n        {...restProps}\n        tableRef={this.tableRef}\n        columns={columns}\n        minWidth={minWidth}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  }\n}\n\n/** @internal */\nexport const TableLayout: React.ComponentType<TableLayoutCoreProps> = TableLayoutBase;\n", "import * as React from 'react';\nimport { VirtualRowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst shouldUpdateRow = (prevProps, nextProps) => {\n  const { cells: prevCells, row: prevRow } = prevProps;\n  const { cells: nextCells, row: nextRow } = nextProps;\n\n  if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n    return false;\n  }\n\n  return !nextCells.some((nextCell, i) => {\n    const prevCell = prevCells[i];\n    return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n  });\n};\n\nexport const VirtualRowLayout = React.memo<VirtualRowLayoutProps>(({\n  row, cells, rowComponent: Row, cellComponent: Cell, forwardedRef,\n}) => {\n  return (\n    <Row\n      forwardedRef={forwardedRef}\n      tableRow={row}\n      style={getRowStyle({ row })}\n    >\n      {cells.map(({ column, colSpan }) => {\n        return (\n          <Cell\n            key={column.key}\n            tableRow={row}\n            tableColumn={column}\n            colSpan={colSpan}\n          />\n        );\n      })}\n    </Row>\n  );\n}, shouldUpdateRow);\n", "import * as React from 'react';\nimport { VirtualTableLayoutBlockProps } from '../../types';\nimport { VirtualRowLayout } from './virtual-row-layout';\n\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayoutBlock extends React.PureComponent<VirtualTableLayoutBlockProps, any> {\n  static defaultProps = {\n    rowRefsHandler: () => {},\n  };\n\n  render() {\n    const {\n      collapsedGrid,\n      rowRefsHandler,\n      bodyComponent: Body,\n      cellComponent,\n      rowComponent,\n      isFixed,\n    } = this.props;\n\n    return (\n      <Body isFixed={isFixed}>\n        {collapsedGrid.rows.map((visibleRow) => {\n          const { row, cells = [] } = visibleRow;\n\n          return (\n            <VirtualRowLayout\n              key={row.key}\n              forwardedRef={ref => rowRefsHandler(row, ref)}\n              row={row}\n              cells={cells}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n            />\n          );\n        })}\n        </Body>\n    );\n  }\n\n}\n", "import * as React from 'react';\nimport { TableColumn } from '@devexpress/dx-grid-core';\n\n/** @internal */\nexport class ColumnGroup extends React.PureComponent<{ columns: TableColumn[] }> {\n  render() {\n    const { columns } = this.props;\n\n    return (\n      <colgroup>\n        {columns.map(({ key, width }) => {\n          const styleWidth = typeof width === 'number' ? `${width}px` : width;\n          return (\n            <col\n              key={key}\n              style={width !== undefined\n                ? { width: styleWidth }\n                : undefined}\n            />\n          );\n        })}\n      </colgroup>\n    );\n  }\n}\n", "import * as React from 'react';\nimport { MemoizedFunction, memoize } from '@devexpress/dx-core';\nimport {\n  TableColumn, GetColumnWidthFn, getCollapsedGrids,\n  getColumnWidthGetter, TABLE_STUB_TYPE, getViewport, GridViewport, getScrollLeft,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableLayoutState, VirtualTableLayoutProps } from '../../types';\nimport { VirtualTableLayoutBlock } from './virtual-table-layout-block';\nimport { Sizer } from '@devexpress/dx-react-core';\nimport { ColumnGroup } from './column-group';\n\nconst AUTO_HEIGHT = 'auto';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n  tableComponent: () => null,\n  containerComponent: React.forwardRef(() => null),\n};\ntype PropsType = VirtualTableLayoutProps & typeof defaultProps;\n\n/** @internal */\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayout extends React.PureComponent<PropsType, VirtualTableLayoutState> {\n  static defaultProps = defaultProps;\n  getColumnWidthGetter: MemoizedFunction<[TableColumn[], number, number], GetColumnWidthFn>;\n  rowRefs = new Map<any, HTMLElement>();\n  blockRefs = new Map<string, HTMLElement>();\n  viewportTop = 0;\n  containerHeight = 600;\n  containerWidth = 800;\n  viewportLeft = 0;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rowHeights: new Map<any, number>(),\n      height: 0,\n      visibleRowBoundaries: {},\n    };\n\n    this.getColumnWidthGetter = memoize(\n      (tableColumns, tableWidth, minColumnWidth) => (\n        getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth)\n      ),\n    );\n  }\n\n  componentDidMount() {\n    this.storeRowHeights();\n  }\n\n  componentDidUpdate(prevProps) {\n    setTimeout(this.storeRowHeights.bind(this));\n\n    const { bodyRows, columns } = this.props;\n\n    // NOTE: the boundaries depend not only on scroll position and container dimensions\n    // but on body rows too. This boundaries update is especially important when\n    // lazy loading is used because by the time that all involved events are handled\n    // no rows are loaded yet.\n    const bodyRowsChanged = prevProps.bodyRows !== bodyRows;\n    // Also it's the only place where we can respond to the column count change\n    const columnCountChanged = prevProps.columns.length !== columns.length;\n\n    if (bodyRowsChanged || columnCountChanged || columns[0].width !== undefined &&\n        prevProps.columns.some((column, index) => {\n          return column.width !== columns[index].width;\n        })\n      ) {\n      this.updateViewport();\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { rowHeights: prevRowHeight } = prevState;\n    const rowHeights = [...nextProps.headerRows, ...nextProps.bodyRows, ...nextProps.footerRows]\n      .reduce(\n        (acc, row) => {\n          const rowHeight = prevRowHeight.get(row.key);\n          if (rowHeight !== undefined) {\n            acc.set(row.key, rowHeight);\n          }\n          return acc;\n        },\n        new Map(),\n      );\n    return { rowHeights };\n  }\n\n  getRowHeight = (row) => {\n    const { rowHeights } = this.state;\n    const { estimatedRowHeight } = this.props;\n    if (row) {\n      const storedHeight = rowHeights.get(row.key);\n      if (storedHeight !== undefined) return storedHeight;\n      if (row.height) return row.height;\n    }\n    return estimatedRowHeight;\n  }\n\n  registerRowRef = (row, ref) => {\n    if (ref === null) {\n      this.rowRefs.delete(row);\n    } else {\n      this.rowRefs.set(row, ref);\n    }\n  }\n\n  registerBlockRef = (name, ref) => {\n    if (ref === null) {\n      this.blockRefs.delete(name);\n    } else {\n      this.blockRefs.set(name, ref);\n    }\n  }\n\n  storeRowHeights() {\n    const rowsWithChangedHeights = Array.from(this.rowRefs.entries())\n      .map(([row, ref]) => [row, ref])\n      .filter(([, node]) => !!node)\n      .map(([row, node]) => [row, node.getBoundingClientRect().height])\n      .filter(([row]) => row.type !== TABLE_STUB_TYPE)\n      .filter(([row, height]) => height !== this.getRowHeight(row));\n\n    if (rowsWithChangedHeights.length) {\n      const { rowHeights } = this.state;\n      rowsWithChangedHeights\n        .forEach(([row, height]) => rowHeights.set(row.key, height));\n\n      this.setState({\n        rowHeights,\n      });\n    }\n  }\n\n  onScroll = (e) => {\n    const node = e.target;\n\n    if (this.shouldSkipScrollEvent(e)) {\n      return;\n    }\n\n    const { scrollTop: viewportTop, scrollLeft: viewportLeft } = node;\n\n    this.viewportTop = viewportTop;\n    this.viewportLeft = viewportLeft;\n\n    this.updateViewport();\n  }\n\n  handleContainerSizeChange = ({ width, height }) => {\n    this.containerHeight = height;\n    this.containerWidth = width;\n\n    this.updateViewport();\n  }\n\n  shouldSkipScrollEvent(e) {\n    const node = e.target;\n\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return true;\n    }\n    // NOTE: normalize position:\n    // in Firefox and Chrome (zoom > 100%) when scrolled to the bottom\n    // in Edge when scrolled to the right edge\n    const correction = 1;\n    const nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    const nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction;\n    // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n    if (node.scrollTop < 0\n      || node.scrollLeft < 0\n      || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth)\n      || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateViewport() {\n    const { viewport, setViewport } = this.props;\n    const newViewport = this.calculateViewport();\n\n    if (viewport !== newViewport) {\n      setViewport(newViewport);\n    }\n  }\n\n  calculateViewport() {\n    const { state, viewportTop, viewportLeft, containerHeight, containerWidth } = this;\n    const {\n      loadedRowsStart,\n      bodyRows,\n      headerRows,\n      footerRows,\n      estimatedRowHeight,\n      columns,\n      minColumnWidth,\n      isDataRemote,\n      viewport,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getViewport(\n      { ...state, viewportTop, viewportLeft, containerHeight, containerWidth },\n      { loadedRowsStart, columns, bodyRows, headerRows, footerRows, isDataRemote, viewport },\n      estimatedRowHeight, this.getRowHeight, getColumnWidth,\n    );\n  }\n\n  getCollapsedGrids(viewport: GridViewport) {\n    const { containerWidth, viewportLeft } = this;\n    const {\n      headerRows, bodyRows, footerRows,\n      columns, loadedRowsStart, totalRowCount,\n      getCellColSpan, minColumnWidth,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getCollapsedGrids({\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      loadedRowsStart,\n      totalRowCount,\n      getCellColSpan,\n      viewportLeft,\n      containerWidth,\n      viewport,\n      getRowHeight: this.getRowHeight,\n      getColumnWidth,\n    });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      footerComponent: Footer,\n      tableRef,\n      height,\n      headerRows,\n      footerRows,\n      minColumnWidth,\n      minWidth,\n      cellComponent,\n      rowComponent,\n      viewport,\n      scrollTop,\n      columns,\n      nextColumnId,\n    } = this.props;\n\n    const scrollLeft = getScrollLeft(columns.length, minColumnWidth!, nextColumnId);\n\n    const collapsedGrids = this.getCollapsedGrids(viewport);\n    const commonProps = {\n      cellComponent,\n      rowComponent,\n      minColumnWidth,\n      minWidth,\n      blockRefsHandler: this.registerBlockRef,\n      rowRefsHandler: this.registerRowRef,\n    };\n    const sizerHeight = height === AUTO_HEIGHT ? null : height;\n\n    return (\n      <Sizer\n        onSizeChange={this.handleContainerSizeChange}\n        containerComponent={Container}\n        style={{ height: sizerHeight }}\n        onScroll={this.onScroll}\n        scrollTop={scrollTop}\n        scrollLeft={scrollLeft}\n      >\n        <Table\n          forwardedRef={tableRef}\n          style={{\n            minWidth: `${minWidth}px`,\n          }}\n        >\n          <ColumnGroup\n            columns={collapsedGrids.bodyGrid.columns as TableColumn[]}\n          />\n          {\n            (!!headerRows.length) && (\n              <VirtualTableLayoutBlock\n                {...commonProps}\n                name=\"header\"\n                isFixed={true}\n                collapsedGrid={collapsedGrids.headerGrid}\n                bodyComponent={Head}\n              />\n            )\n          }\n          <VirtualTableLayoutBlock\n            {...commonProps}\n            name=\"body\"\n            collapsedGrid={collapsedGrids.bodyGrid}\n            bodyComponent={Body}\n          />\n          {\n            (!!footerRows.length) && (\n              <VirtualTableLayoutBlock\n                {...commonProps}\n                name=\"footer\"\n                isFixed={true}\n                collapsedGrid={collapsedGrids.footerGrid}\n                bodyComponent={Footer}\n              />\n            )\n          }\n        </Table>\n      </Sizer>\n    );\n  }\n}\n", "import * as React from 'react';\nimport { RowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst getColumnStyle = ({ column }) => column.animationState;\n\n/** @internal */\nexport const RowLayout: React.SFC<RowLayoutProps> = React.memo((props) => {\n  const {\n    row,\n    columns,\n    rowComponent: Row,\n    cellComponent: Cell,\n    getCellColSpan,\n  } = props;\n\n  const getColSpan = React.useCallback(\n    (tableRow, tableColumn) => getCellColSpan!({ tableRow, tableColumn, tableColumns: columns }),\n    [columns, getCellColSpan],\n  );\n\n  return (\n    <Row\n      tableRow={row}\n      style={getRowStyle({ row })}\n    >\n      {\n        columns\n          .map(column => (\n            <Cell\n              key={column.key}\n              tableRow={row}\n              tableColumn={column}\n              style={getColumnStyle({ column })}\n              colSpan={getColSpan(row, column)}\n            />\n          ))\n      }\n    </Row>\n  );\n});\n", "import * as React from 'react';\nimport { RowLayout } from './row-layout';\nimport { RowsBlockLayoutProps } from '../../types';\n\n/** @internal */\nexport class RowsBlockLayout extends React.PureComponent<RowsBlockLayoutProps> {\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  }\n}\n", "import * as React from 'react';\nimport { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\nimport { TableLayoutProps } from '../../types';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n};\n\n/** @internal */\nexport class StaticTableLayout extends React.PureComponent<TableLayoutProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minWidth,\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n      tableRef,\n    } = this.props;\n\n    const commonProps = {\n      columns,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    };\n\n    return (\n      <Container>\n        <Table\n          forwardedRef={tableRef}\n          style={{ minWidth: `calc(${minWidth})` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              blockComponent={headComponent}\n              {...commonProps}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            blockComponent={bodyComponent}\n            {...commonProps}\n          />\n          {!!footerRows.length && (\n            <RowsBlockLayout\n              rows={footerRows}\n              blockComponent={footerComponent}\n              {...commonProps}\n            />\n          )}\n        </Table>\n      </Container>\n    );\n  }\n}\n", "import * as React from 'react';\nimport {\n  Plugin, Template, Action,\n  PluginComponents,\n  TemplateConnector,\n  TemplatePlaceholder,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isStubTableCell, checkColumnWidths, getScrollTop,\n  TOP_POSITION, BOTTOM_POSITION, getTopRowId,\n} from '@devexpress/dx-grid-core';\nimport {\n  VirtualTableProps,\n  Table as TableNS,\n  TableLayoutProps,\n  VirtualTablePluginState,\n} from '../../types';\n\n/** @internal */\nexport const emptyViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600,\n};\n\nconst tableColumnsComputed = (\n  { tableColumns }: Getters,\n) => {\n  return checkColumnWidths(tableColumns);\n};\n\n/** @internal */\nexport const makeVirtualTable: (...args: any) => any = (Table, {\n  VirtualLayout,\n  FixedHeader,\n  FixedFooter,\n  SkeletonCell,\n  defaultEstimatedRowHeight,\n  defaultHeight,\n}) => {\n  class VirtualTable extends React.PureComponent<VirtualTableProps, VirtualTablePluginState> {\n    static defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      skeletonCellComponent: SkeletonCell,\n      onTopRowChange: () => {},\n    };\n    static FixedHeader: React.ComponentType;\n    static FixedFooter: React.ComponentType;\n    static SkeletonCell: React.ComponentType;\n    static TOP_POSITION = TOP_POSITION;\n    static BOTTOM_POSITION = BOTTOM_POSITION;\n\n    scrollToRow: (prop: number | string | symbol) => void;\n    scrollToColumn: (prop: symbol) => void;\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        viewport: emptyViewport,\n        nextRowId: undefined,\n        nextColumnId: undefined,\n      };\n      this.scrollToRow = nextRowId => this.setState({ nextRowId });\n      this.scrollToColumn = nextColumnId => this.setState({ nextColumnId });\n    }\n\n    setViewport = (viewport) => {\n      this.setState({ viewport });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const { nextRowId: prevId } = prevState;\n      const { nextRowId: currentId } = this.state;\n      const areIdsEqual = currentId !== undefined && currentId === prevId;\n\n      if (areIdsEqual) {\n        this.setState({ nextRowId: undefined });\n      }\n    }\n\n    render() {\n      const {\n        height,\n        estimatedRowHeight,\n        skeletonCellComponent: SkeletonStubCell,\n        children,\n        ...restProps\n      } = this.props;\n      const {\n        viewport: stateViewport,\n        nextRowId: nextId,\n        nextColumnId,\n      } = this.state;\n\n      return (\n        <Plugin name=\"VirtualTable\">\n          <Table layoutComponent={VirtualLayout} {...restProps} />\n\n          {/* prevents breaking change */}\n          <Action name=\"setViewport\" action={this.setViewport} />\n          <Action name=\"scrollToRow\" action={this.scrollToRow} />\n          <Action name=\"scrollToColumn\" action={this.scrollToColumn} />\n          <Getter name=\"viewport\" value={stateViewport} />\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n          <Template name=\"tableLayout\">\n            {(params: TableLayoutProps) => (\n              <TemplateConnector>\n                {(\n                  { availableRowCount, loadedRowsStart, tableBodyRows, isDataRemote, viewport },\n                  { setViewport },\n                ) => {\n\n                  const { onTopRowChange } = this.props;\n                  const rowId = getTopRowId(viewport, tableBodyRows, isDataRemote);\n\n                  onTopRowChange(rowId);\n\n                  const totalRowCount = availableRowCount || tableBodyRows.length;\n                  const scrollTop = getScrollTop(\n                    tableBodyRows,\n                    totalRowCount,\n                    nextId,\n                    estimatedRowHeight,\n                    isDataRemote,\n                  );\n\n                  return (\n                    <TemplatePlaceholder\n                      params={{\n                        ...params,\n                        totalRowCount,\n                        loadedRowsStart,\n                        isDataRemote,\n                        height,\n                        estimatedRowHeight,\n                        setViewport,\n                        viewport,\n                        scrollTop,\n                        nextColumnId,\n                      }}\n                    />\n                  );\n                }}\n              </TemplateConnector>\n            )}\n          </Template>\n\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow }: any) => !!isStubTableCell(tableRow)}\n          >\n            {(params: TableNS.CellProps) => (\n              <TemplateConnector>\n                {({ isDataRemote }) => (\n                  isDataRemote ? <SkeletonStubCell {...params} /> : <TemplatePlaceholder />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        </Plugin>\n      );\n    }\n  }\n\n  Object.values(Table.components as PluginComponents).forEach((name) => {\n    VirtualTable[name] = Table[name];\n  });\n\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n\n  return VirtualTable;\n};\n", "import { RowCache } from '../types';\n\nclass Node {\n  start: number;\n  rows: ReadonlyArray<any>;\n  prev: Node | null = null;\n  next: Node | null = null;\n\n  constructor(start: number, rows: ReadonlyArray<any>) {\n    this.start = start;\n    this.rows = rows;\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass LRUCache {\n  pageSize: number;\n  capacity: number;\n  head!: Node;\n  tail!: Node;\n  pages = new Map<number, Node>();\n\n  constructor(pageSize: number, capacity = Number.POSITIVE_INFINITY) {\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n\n  initList() {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  }\n\n  addPage(pageStart: number, rows: ReadonlyArray<any>) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n\n    const node = new Node(pageStart, rows);\n    const last = this.tail.prev!;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next!.start);\n    }\n  }\n\n  removePage(start: number) {\n    const node = this.pages.get(start)!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n\n    this.pages.delete(start);\n  }\n\n  getPage(pageStart: number) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n\n    const { rows } = this.pages.get(pageStart)!;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n\n    return rows;\n  }\n\n  clear() {\n    this.pages.clear();\n    this.initList();\n  }\n}\n\nexport const createRowCache = (pageSize = 100, capacity = Number.POSITIVE_INFINITY): RowCache => {\n  const cache = new LRUCache(pageSize, capacity / pageSize);\n\n  return {\n    getRows: (skip: number, take: number) => {\n      let result: any[] = [];\n      const pageCount = Math.ceil(take / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = skip + i * pageSize;\n        const chunk = cache.getPage(pageStart);\n\n        if (chunk !== null) {\n          result = result.concat(chunk);\n        }\n\n        // yield if last page is incomplete\n        if (chunk === null || (i !== pageCount - 1 && chunk.length !== pageSize)) {\n          return result;\n        }\n      }\n      return result;\n    },\n    setRows: (skip: number, rows: ReadonlyArray<any>) => {\n      const pageCount = Math.ceil(rows.length / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = i * pageSize;\n        const rowsChunk = rows.slice(pageStart, pageStart + pageSize);\n\n        // put incomplete page only if it is last one\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: () => cache.clear(),\n  };\n};\n", "import * as React from 'react';\nimport { KeyboardNavigationComponent, Table } from '../types';\n\nexport const withKeyboardNavigation =\n<T extends KeyboardNavigationComponent>(key1?: string, key2?: string) =>\n(Component: React.ComponentType<Table.CellProps>): React.ComponentType<T> => {\n  class ComponentWithNavigation extends React.PureComponent<T> {\n    ref: React.RefObject<T>;\n    constructor(props) {\n      super(props);\n      this.ref = { current: null };\n      this.handleClick = this.handleClick.bind(this);\n      this.setForwardedRef = this.setForwardedRef.bind(this);\n    }\n\n    setForwardedRef(node) {\n      (this.ref.current as any)?.removeEventListener('mouseup', this.handleClick);\n      (this.ref.current as any) = node;\n      (this.ref.current as any)?.addEventListener('mouseup', this.handleClick);\n    }\n\n    componentDidMount() {\n      const { updateRefForKeyboardNavigation, tableRow, tableColumn } = this.props;\n      if (this.ref.current && updateRefForKeyboardNavigation) {\n        updateRefForKeyboardNavigation({\n          ref: this.ref,\n          key1: key1 || tableRow.key,\n          key2: key2 || tableColumn.key,\n          action: 'add',\n        });\n      }\n    }\n\n    componentWillUnmount() {\n      const { updateRefForKeyboardNavigation, tableRow, tableColumn } = this.props;\n      if (this.ref.current && updateRefForKeyboardNavigation) {\n        updateRefForKeyboardNavigation({\n          ref: this.ref,\n          key1: key1 || tableRow.key,\n          key2: key2 || tableColumn.key,\n          action: 'remove',\n        });\n        (this.ref.current as any).removeEventListener('mouseup', this.handleClick);\n      }\n    }\n\n    handleClick(event) {\n      const { tableRow, tableColumn, setFocusedElement } = this.props;\n      if (setFocusedElement) {\n        setFocusedElement({ key1: key1 || tableRow.key, key2: key2 || tableColumn.key, event });\n      }\n    }\n\n    render() {\n      const { setFocusedElement, updateRefForKeyboardNavigation, ...restProps } = this.props;\n      return <Component forwardedRef={this.setForwardedRef} {...restProps} />;\n    }\n  }\n  return ComponentWithNavigation;\n};\n", "import * as React from 'react';\nimport { TableGroupRow } from '../../types';\n\nexport const InlineSummaryItem: React.SFC<TableGroupRow.InlineSummaryItemProps> = React.memo(({\n  summary: { messageKey, columnTitle, component: SummaryComponent },\n  getMessage,\n}) => (\n  <React.Fragment>\n    {getMessage(messageKey, { columnTitle })}\n    <SummaryComponent />\n  </React.Fragment>\n));\n"],
  "mappings": "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",
  "names": ["getCollapsedRows", "filterExpression", "_a", "setCurrentPage", "currentPage", "tableHeaderRows", "nextColumnName", "getColumnWidth", "loadedRowsStart", "rowCount", "columnVisibleIntervals", "bandLevelsVisibility", "_b", "i", "VALID_UNITS", "side", "plainRows", "stopEditCells", "startEditCells", "VALID_UNITS", "getColumnWidth", "loadedRowsStart", "tableHeaderRows", "tableFooterRows", "React.memo", "tableColumnsComputed", "_a", "React.createElement", "React.useCallback", "GridCore", "React.createRef", "__rest", "__assign", "React.PureComponent", "ColumnChooserBase", "React.Fragment", "FilteringStateBase", "pluginDependencies", "IntegratedFilteringBase", "rowsComputed", "filterExpression", "getCollapsedRows", "columnExtensionValueGetter", "EditingStateBase", "PagingStateBase", "currentPage", "setCurrentPage", "IntegratedPagingBase", "CustomPagingBase", "GroupingStateBase", "changeColumnSorting", "getCollapsedRowsComputed", "IntegratedGroupingBase", "expandedGroupedRowsComputed", "CustomGroupingBase", "SelectionStateBase", "toggleSelection", "IntegratedSelectionBase", "SortingStateBase", "IntegratedSortingBase", "DragDropProviderBase", "DragDropProviderCore", "DragDropProvider", "tableHeaderRows", "TableColumnReorderingRaw", "draftOrderComputed", "draftOrder", "React.forwardRef", "TableBase", "TableSelectionBase", "allSelected", "someSelected", "toggleSelectAll", "RowDetailStateBase", "TableRowDetailBase", "tableBodyRowsComputed", "toggleDetailRowExpanded", "groupSummaryValues", "__spread", "defaultMessages", "getCellColSpanComputed", "TableGroupRowBase", "InlineSummaryItem", "tableHeaderRowsComputed", "TableHeaderRowBase", "changeColumnGrouping", "changeTableColumnWidth", "draftTableColumnWidth", "cancelTableColumnWidthDraft", "nextColumnName", "CellPlaceholder", "TableBandHeaderBase", "tableHeaderColumnChainsComputed", "TableFilterRowBase", "changeColumnFilter", "TableEditRowBase", "changeAddedRow", "changeRow", "TableEditColumnBase", "TableColumnResizingBase", "PagingPanelBase", "setPageSize", "ItemLayout", "defaultProps", "GroupPanelLayoutBase", "GroupingPanelRaw", "draftColumnGrouping", "cancelColumnGroupingDraft", "DataTypeProviderBase", "TableColumnVisibilityBase", "ToolbarBase", "TreeDataStateBase", "getRowIdComputed", "CustomTreeDataBase", "TableTreeColumnBase", "toggleRowExpanded", "SearchStateBase", "filterExpressionComputed", "SearchPanelBase", "changeSearchValue", "TableFixedColumnsBase", "SummaryStateBase", "IntegratedSummaryBase", "CustomSummaryBase", "dependencies", "tableFooterRows", "TableSummaryRowBase", "totalSummaryValues", "treeSummaryValues", "VirtualTableStateBase", "startEditCells", "stopEditCells", "ExportPanelBase", "RowPlaceholder", "TableKeyboardNavigationCore", "TableKeyboardNavigationBase", "TableLayoutBase", "VirtualTableLayoutBlock", "ColumnGroup", "VirtualTableLayout", "__read", "loadedRowsStart", "getColumnWidth", "Table", "RowsBlockLayout", "StaticTableLayout", "VirtualTable", "_b", "Node", "LRUCache", "pageCount", "ComponentWithNavigation"]
}
